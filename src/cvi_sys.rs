#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals, unused_imports)]
/* automatically generated by rust-bindgen 0.70.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const CVI_NULL: u32 = 0;
pub const CVI_SUCCESS: u32 = 0;
pub const CVI_FAILURE: i32 = -1;
pub const CVI_FAILURE_ILLEGAL_PARAM: i32 = -2;
pub const CVI_TRUE: u32 = 1;
pub const CVI_FALSE: u32 = 0;
pub const __BITS_PER_LONG: u32 = 64;
pub const IOCTL_BASE_MAGIC: u8 = 115u8;
pub const CVI_CHIP_NAME: &[u8; 7] = b"CV181X\0";
pub const CVI_CHIP_TEST: u32 = 0;
pub const CVIU01: u32 = 1;
pub const CVIU02: u32 = 2;
pub const CVI_COLDBOOT: u32 = 1;
pub const CVI_WDTBOOT: u32 = 2;
pub const CVI_SUSPENDBOOT: u32 = 3;
pub const CVI_WARMBOOT: u32 = 4;
pub const MMF_VER_PRIX: &[u8; 7] = b"_MMF_V\0";
pub const ALIGN_NUM: u32 = 4;
pub const LUMA_PHY_ALIGN: u32 = 16;
pub const DEFAULT_ALIGN: u32 = 64;
pub const MAX_ALIGN: u32 = 1024;
pub const SEG_CMP_LENGTH: u32 = 256;
pub const VENC_MAX_NAME_LEN: u32 = 16;
pub const VENC_MAX_CHN_NUM: u32 = 16;
pub const VEDU_IP_NUM: u32 = 1;
pub const H264E_MAX_WIDTH: u32 = 4096;
pub const H264E_MAX_HEIGHT: u32 = 4096;
pub const H264E_MIN_WIDTH: u32 = 114;
pub const H264E_MIN_HEIGHT: u32 = 114;
pub const H265E_MAX_WIDTH: u32 = 4096;
pub const H265E_MAX_HEIGHT: u32 = 4096;
pub const H265E_MIN_WIDTH: u32 = 114;
pub const H265E_MIN_HEIGHT: u32 = 114;
pub const JPEGE_MAX_WIDTH: u32 = 8192;
pub const JPEGE_MAX_HEIGHT: u32 = 8192;
pub const JPEGE_MIN_WIDTH: u32 = 32;
pub const JPEGE_MIN_HEIGHT: u32 = 32;
pub const JPGE_MAX_NUM: u32 = 1;
pub const VENC_MAX_ROI_NUM: u32 = 8;
pub const H264E_MIN_HW_INDEX: u32 = 0;
pub const H264E_MAX_HW_INDEX: u32 = 11;
pub const H264E_MIN_VW_INDEX: u32 = 0;
pub const H264E_MAX_VW_INDEX: u32 = 3;
pub const VENC_QP_HISGRM_NUM: u32 = 52;
pub const MAX_TILE_NUM: u32 = 1;
pub const H265E_ADAPTIVE_FRAME_TYPE: u32 = 4;
pub const H265E_ADAPTIVE_QP_TYPE: u32 = 5;
pub const VENC_MIN_INPUT_FRAME_RATE: u32 = 1;
pub const VENC_MAX_INPUT_FRAME_RATE: u32 = 240;
pub const VENC_MAX_RECEIVE_SOURCE: u32 = 4;
pub const VENC_PIC_RECEIVE_SOURCE0: u32 = 0;
pub const VENC_PIC_RECEIVE_SOURCE1: u32 = 1;
pub const VENC_PIC_RECEIVE_SOURCE2: u32 = 2;
pub const VENC_PIC_RECEIVE_SOURCE3: u32 = 3;
pub const VENC_ALIGN_W: u32 = 32;
pub const VENC_ALIGN_H: u32 = 16;
pub const RC_TEXTURE_THR_SIZE: u32 = 16;
pub const MIN_BITRATE: u32 = 2;
pub const MAX_BITRATE: u32 = 102400;
pub const VDEC_MAX_CHN_NUM: u32 = 64;
pub const VDH_MAX_CHN_NUM: u32 = 0;
pub const VEDU_CHN_START: u32 = 0;
pub const VEDU_H264D_ERRRATE: u32 = 10;
pub const VEDU_H264D_FULLERR: u32 = 100;
pub const H264D_ALIGN_W: u32 = 64;
pub const H264D_ALIGN_H: u32 = 64;
pub const H265D_ALIGN_W: u32 = 64;
pub const H265D_ALIGN_H: u32 = 64;
pub const JPEGD_ALIGN_W: u32 = 64;
pub const JPEGD_ALIGN_H: u32 = 16;
pub const JPEGD_RGB_ALIGN: u32 = 16;
pub const H264D_ALIGN_FRM: u32 = 4096;
pub const H265D_ALIGN_FRM: u32 = 4096;
pub const JPEGD_ALIGN_FRM: u32 = 4096;
pub const H264D_MAX_SPS: u32 = 32;
pub const H264D_MIN_SPS: u32 = 1;
pub const H264D_MAX_PPS: u32 = 256;
pub const H264D_MIN_PPS: u32 = 1;
pub const H264D_MAX_SLICE: u32 = 300;
pub const H264D_MIN_SLICE: u32 = 1;
pub const H265D_MAX_VPS: u32 = 16;
pub const H265D_MIN_VPS: u32 = 1;
pub const H265D_MAX_SPS: u32 = 16;
pub const H265D_MIN_SPS: u32 = 1;
pub const H265D_MAX_PPS: u32 = 64;
pub const H265D_MIN_PPS: u32 = 1;
pub const H265D_MAX_SLICE: u32 = 200;
pub const H265D_MIN_SLICE: u32 = 1;
pub const VEDU_H264D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H264D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H264D_MIN_WIDTH: u32 = 114;
pub const VEDU_H264D_MIN_HEIGHT: u32 = 114;
pub const VEDU_H265D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H265D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H265D_MIN_WIDTH: u32 = 114;
pub const VEDU_H265D_MIN_HEIGHT: u32 = 114;
pub const JPEGD_IP_NUM: u32 = 1;
pub const JPEGD_MAX_WIDTH: u32 = 2880;
pub const JPEGD_MAX_HEIGHT: u32 = 1920;
pub const JPEGD_MIN_WIDTH: u32 = 8;
pub const JPEGD_MIN_HEIGHT: u32 = 8;
pub const RGN_MIN_WIDTH: u32 = 2;
pub const RGN_MIN_HEIGHT: u32 = 2;
pub const RGN_COVER_MAX_WIDTH: u32 = 2880;
pub const RGN_COVER_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVER_MIN_X: u32 = 0;
pub const RGN_COVER_MIN_Y: u32 = 0;
pub const RGN_COVER_MAX_X: u32 = 2878;
pub const RGN_COVER_MAX_Y: u32 = 4094;
pub const RGN_COVEREX_MAX_NUM: u32 = 4;
pub const RGN_COVEREX_MAX_WIDTH: u32 = 2880;
pub const RGN_COVEREX_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVEREX_MIN_X: u32 = 0;
pub const RGN_COVEREX_MIN_Y: u32 = 0;
pub const RGN_COVEREX_MAX_X: u32 = 2878;
pub const RGN_COVEREX_MAX_Y: u32 = 4094;
pub const RGN_OVERLAY_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAY_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAY_MIN_X: u32 = 0;
pub const RGN_OVERLAY_MIN_Y: u32 = 0;
pub const RGN_OVERLAY_MAX_X: u32 = 2878;
pub const RGN_OVERLAY_MAX_Y: u32 = 4094;
pub const RGN_OVERLAYEX_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAYEX_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAYEX_MIN_X: u32 = 0;
pub const RGN_OVERLAYEX_MIN_Y: u32 = 0;
pub const RGN_OVERLAYEX_MAX_X: u32 = 2878;
pub const RGN_OVERLAYEX_MAX_Y: u32 = 4094;
pub const RGN_MOSAIC_MAX_NUM: u32 = 8;
pub const RGN_MOSAIC_X_ALIGN: u32 = 4;
pub const RGN_MOSAIC_Y_ALIGN: u32 = 2;
pub const RGN_MOSAIC_WIDTH_ALIGN: u32 = 4;
pub const RGN_MOSAIC_HEIGHT_ALIGN: u32 = 4;
pub const RGN_MOSAIC_MIN_WIDTH: u32 = 8;
pub const RGN_MOSAIC_MIN_HEIGHT: u32 = 8;
pub const RGN_MOSAIC_MAX_WIDTH: u32 = 2880;
pub const RGN_MOSAIC_MAX_HEIGHT: u32 = 4096;
pub const RGN_MOSAIC_MIN_X: u32 = 0;
pub const RGN_MOSAIC_MIN_Y: u32 = 0;
pub const RGN_MOSAIC_MAX_X: u32 = 2872;
pub const RGN_MOSAIC_MAX_Y: u32 = 4088;
pub const RGN_MAX_LAYER_VPSS: u32 = 2;
pub const RGN_ODEC_LAYER_VPSS: u32 = 0;
pub const RGN_NORMAL_LAYER_VPSS: u32 = 1;
pub const RGN_MAX_NUM_VPSS: u32 = 8;
pub const RGN_EX_MAX_NUM_VPSS: u32 = 16;
pub const RGN_EX_MAX_WIDTH: u32 = 2880;
pub const RGN_MAX_NUM_VO: u32 = 8;
pub const RGN_MAX_BUF_NUM: u32 = 2;
pub const RGN_MAX_NUM: u32 = 108;
pub const VENC_MAX_SSE_NUM: u32 = 8;
pub const CVI_MAX_SENSOR_NUM: u32 = 2;
pub const VI_MAX_DEV_NUM: u32 = 3;
pub const VI_MAX_PHY_PIPE_NUM: u32 = 4;
pub const VI_MAX_VIR_PIPE_NUM: u32 = 0;
pub const VI_MAX_PIPE_NUM: u32 = 4;
pub const VI_MAX_WDR_NUM: u32 = 1;
pub const VI_MAX_VIR_CHN_NUM: u32 = 2;
pub const VI_MAX_PHY_CHN_NUM: u32 = 3;
pub const VI_MAX_EXT_CHN_NUM: u32 = 2;
pub const VI_MAX_CHN_NUM: u32 = 5;
pub const VI_EXT_CHN_START: u32 = 5;
pub const VI_MAX_EXTCHN_BIND_PER_CHN: u32 = 1;
pub const VI_MAX_WDR_FRAME_NUM: u32 = 2;
pub const VI_MAX_NODE_NUM: u32 = 3;
pub const VIPROC_IP_NUM: u32 = 1;
pub const VICAP_IP_NUM: u32 = 1;
pub const VI_MAX_SPLIT_NODE_NUM: u32 = 3;
pub const VI_DEV_MIN_WIDTH: u32 = 120;
pub const VI_DEV_MIN_HEIGHT: u32 = 120;
pub const VI_DEV_MAX_WIDTH: u32 = 4608;
pub const VI_DEV_MAX_HEIGHT: u32 = 4608;
pub const VI_FPN_MAX_WIDTH: u32 = 4096;
pub const VI_FPN_MAX_HEIGHT: u32 = 4608;
pub const VI_PIPE_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_OFFLINE_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_OFFLINE_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_ONLINE_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_ONLINE_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE0_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE0_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE1_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE1_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE2_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE2_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE3_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE3_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE_WDR_FIRST_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_FUSION_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_FUSION_MAX_HEIGHT: u32 = 1944;
pub const VI_PHYCHN_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MAX_WIDTH: u32 = 4608;
pub const VI_PHYCHN_OFFLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_PHYCHN_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_ONLINE_MAX_WIDTH: u32 = 2048;
pub const VI_PHYCHN_ONLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_CMP_PARAM_SIZE: u32 = 152;
pub const CVI_VI_VPSS_EXTRA_BUF: u32 = 0;
pub const CVI_VI_CHN_0_BUF: u32 = 2;
pub const CVI_VI_CHN_1_BUF: u32 = 2;
pub const CVI_VI_CHN_2_BUF: u32 = 2;
pub const CVI_VI_CHN_3_BUF: u32 = 2;
pub const CVI_VI_BUF: u32 = 8;
pub const VO_MIN_CHN_WIDTH: u32 = 32;
pub const VO_MIN_CHN_HEIGHT: u32 = 32;
pub const VO_MAX_DEV_NUM: u32 = 1;
pub const VO_MAX_LAYER_NUM: u32 = 1;
pub const VO_MAX_PRIORITY: u32 = 1;
pub const VO_MAX_CHN_NUM: u32 = 1;
pub const VO_MAX_LAYER_IN_DEV: u32 = 1;
pub const VO_MAX_GRAPHICS_LAYER_NUM: u32 = 1;
pub const VO_MIN_TOLERATE: u32 = 1;
pub const VO_MAX_TOLERATE: u32 = 100000;
pub const AI_DEV_MAX_NUM: u32 = 1;
pub const AO_DEV_MIN_NUM: u32 = 0;
pub const AO_DEV_MAX_NUM: u32 = 2;
pub const AIO_MAX_NUM: u32 = 2;
pub const AENC_MAX_CHN_NUM: u32 = 3;
pub const ADEC_MAX_CHN_NUM: u32 = 3;
pub const AI_MAX_CHN_NUM: u32 = 2;
pub const AO_MAX_CHN_NUM: u32 = 1;
pub const AO_SYSCHN_CHNID: u32 = 0;
pub const VPSS_IP_NUM: u32 = 2;
pub const VPSS_DEV_0: u32 = 0;
pub const VPSS_DEV_1: u32 = 1;
pub const VPSS_MAX_GRP_NUM: u32 = 16;
pub const VPSS_ONLINE_NUM: u32 = 3;
pub const VPSS_ONLINE_GRP_0: u32 = 0;
pub const VPSS_ONLINE_GRP_1: u32 = 1;
pub const VPSS_ONLINE_GRP_2: u32 = 2;
pub const VPSS_MAX_PHY_CHN_NUM: u32 = 4;
pub const VPSS_MAX_CHN_NUM: u32 = 4;
pub const VPSS_MIN_IMAGE_WIDTH: u32 = 32;
pub const VPSS_MAX_IMAGE_WIDTH: u32 = 2880;
pub const VPSS_MAX_IMAGE_HEIGHT: u32 = 4096;
pub const VPSS_MAX_ZOOMIN: u32 = 32;
pub const VPSS_MAX_ZOOMOUT: u32 = 32;
pub const LDC_ALIGN: u32 = 64;
pub const LDC_MIN_IMAGE_WIDTH: u32 = 640;
pub const LDC_MIN_IMAGE_HEIGHT: u32 = 480;
pub const SPREAD_MIN_IMAGE_WIDTH: u32 = 640;
pub const SPREAD_MIN_IMAGE_HEIGHT: u32 = 480;
pub const GDC_IP_NUM: u32 = 1;
pub const GDC_PROC_JOB_INFO_NUM: u32 = 500;
pub const VER_X: u32 = 1;
pub const VER_Y: u32 = 0;
pub const VER_Z: u32 = 0;
pub const VER_D: &[u8; 9] = b" Release\0";
pub const CVI_INVALID_CHN: i32 = -1;
pub const CVI_INVALID_LAYER: i32 = -1;
pub const CVI_INVALID_DEV: i32 = -1;
pub const CVI_INVALID_HANDLE: i32 = -1;
pub const CVI_INVALID_VALUE: i32 = -1;
pub const CVI_INVALID_TYPE: i32 = -1;
pub const CCM_MATRIX_SIZE: u32 = 9;
pub const CCM_MATRIX_NUM: u32 = 7;
pub const VERSION_NAME_MAXLEN: u32 = 128;
pub const CONFIG_CVI_GDB_NO: u32 = 1;
pub const CONFIG_CVI_GDB: &[u8; 2] = b"n\0";
pub const CONFIG_CVI_LOG_TRACE_SUPPORT: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_ALL: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_LEVEL: u32 = 4;
pub const CVI_DBG_EMERG: u32 = 0;
pub const CVI_DBG_ALERT: u32 = 1;
pub const CVI_DBG_CRIT: u32 = 2;
pub const CVI_DBG_ERR: u32 = 3;
pub const CVI_DBG_WARN: u32 = 4;
pub const CVI_DBG_NOTICE: u32 = 5;
pub const CVI_DBG_INFO: u32 = 6;
pub const CVI_DBG_DEBUG: u32 = 7;
pub const SRC_LENS_COEF_SEG: u32 = 2;
pub const DST_LENS_COEF_SEG: u32 = 3;
pub const SRC_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_NUM: u32 = 4;
pub const ISP_BAYER_CHN: u32 = 4;
pub const ISP_WB_GAIN_NUM: u32 = 4;
pub const ISP_CAP_CCM_NUM: u32 = 9;
pub const BIND_DEST_MAXNUM: u32 = 32;
pub const BIND_NODE_MAXNUM: u32 = 64;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type CVI_UCHAR = ::std::os::raw::c_uchar;
pub type CVI_U8 = ::std::os::raw::c_uchar;
pub type CVI_U16 = ::std::os::raw::c_ushort;
pub type CVI_U32 = ::std::os::raw::c_uint;
pub type CVI_HANDLE = ::std::os::raw::c_uint;
pub type CVI_S8 = ::std::os::raw::c_schar;
pub type CVI_CHAR = ::std::os::raw::c_char;
pub type CVI_S16 = ::std::os::raw::c_short;
pub type CVI_S32 = ::std::os::raw::c_int;
pub type CVI_UL = ::std::os::raw::c_ulong;
pub type CVI_SL = ::std::os::raw::c_long;
pub type CVI_FLOAT = f32;
pub type CVI_DOUBLE = f64;
pub type CVI_VOID = ::std::os::raw::c_void;
pub type CVI_BOOL = ::std::os::raw::c_uchar;
pub type CVI_U64 = u64;
pub type CVI_S64 = i64;
pub type CVI_SIZE_T = ::std::os::raw::c_uint;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal32 {
    pub signr: ::std::os::raw::c_uint,
    pub context: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal32"][::std::mem::size_of::<base_statesignal32>() - 8usize];
    ["Alignment of base_statesignal32"][::std::mem::align_of::<base_statesignal32>() - 4usize];
    ["Offset of field: base_statesignal32::signr"]
        [::std::mem::offset_of!(base_statesignal32, signr) - 0usize];
    ["Offset of field: base_statesignal32::context"]
        [::std::mem::offset_of!(base_statesignal32, context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal"][::std::mem::size_of::<base_statesignal>() - 16usize];
    ["Alignment of base_statesignal"][::std::mem::align_of::<base_statesignal>() - 8usize];
    ["Offset of field: base_statesignal::signr"]
        [::std::mem::offset_of!(base_statesignal, signr) - 0usize];
    ["Offset of field: base_statesignal::context"]
        [::std::mem::offset_of!(base_statesignal, context) - 8usize];
};
pub const base_state_e_BASE_STATE_NORMAL: base_state_e = 0;
pub const base_state_e_BASE_STATE_SUSPEND_PREPARE: base_state_e = 1;
pub const base_state_e_BASE_STATE_SUSPEND: base_state_e = 2;
pub const base_state_e_BASE_STATE_RESUME: base_state_e = 3;
pub const base_state_e_BASE_STATE_NUM: base_state_e = 4;
pub type base_state_e = ::std::os::raw::c_uint;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822: ENUM_CHIP_ID = 0;
pub const ENUM_CHIP_ID_E_CHIPID_CV1832: ENUM_CHIP_ID = 1;
pub const ENUM_CHIP_ID_E_CHIPID_CV1835: ENUM_CHIP_ID = 2;
pub const ENUM_CHIP_ID_E_CHIPID_CV1838: ENUM_CHIP_ID = 3;
pub const ENUM_CHIP_ID_E_CHIPID_CV1829: ENUM_CHIP_ID = 4;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826: ENUM_CHIP_ID = 5;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821: ENUM_CHIP_ID = 6;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820: ENUM_CHIP_ID = 7;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823: ENUM_CHIP_ID = 8;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825: ENUM_CHIP_ID = 9;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820A: ENUM_CHIP_ID = 10;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821A: ENUM_CHIP_ID = 11;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822A: ENUM_CHIP_ID = 12;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823A: ENUM_CHIP_ID = 13;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825A: ENUM_CHIP_ID = 14;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826A: ENUM_CHIP_ID = 15;
pub const ENUM_CHIP_ID_E_CHIPID_CV1810C: ENUM_CHIP_ID = 16;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811C: ENUM_CHIP_ID = 17;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812C: ENUM_CHIP_ID = 18;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811H: ENUM_CHIP_ID = 19;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812H: ENUM_CHIP_ID = 20;
pub const ENUM_CHIP_ID_E_CHIPID_CV1813H: ENUM_CHIP_ID = 21;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800B: ENUM_CHIP_ID = 22;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801B: ENUM_CHIP_ID = 23;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800C: ENUM_CHIP_ID = 24;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801C: ENUM_CHIP_ID = 25;
pub type ENUM_CHIP_ID = ::std::os::raw::c_uint;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U01: ENUM_CHIP_VERSION = 1;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U02: ENUM_CHIP_VERSION = 2;
pub type ENUM_CHIP_VERSION = ::std::os::raw::c_uint;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_COLDBOOT: ENUM_CHIP_PWR_ON_REASON = 1;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WDT: ENUM_CHIP_PWR_ON_REASON = 2;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_SUSPEND: ENUM_CHIP_PWR_ON_REASON = 3;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WARM_RST: ENUM_CHIP_PWR_ON_REASON = 4;
pub type ENUM_CHIP_PWR_ON_REASON = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct vb_ext_control {
    pub id: __u32,
    pub reserved: [__u32; 1usize],
    pub __bindgen_anon_1: vb_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vb_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control__bindgen_ty_1"]
        [::std::mem::size_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Alignment of vb_ext_control__bindgen_ty_1"]
        [::std::mem::align_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value64"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value64) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control"][::std::mem::size_of::<vb_ext_control>() - 16usize];
    ["Alignment of vb_ext_control"][::std::mem::align_of::<vb_ext_control>() - 1usize];
    ["Offset of field: vb_ext_control::id"][::std::mem::offset_of!(vb_ext_control, id) - 0usize];
    ["Offset of field: vb_ext_control::reserved"]
        [::std::mem::offset_of!(vb_ext_control, reserved) - 4usize];
};
pub type AI_CHN = CVI_S32;
pub type AO_CHN = CVI_S32;
pub type AENC_CHN = CVI_S32;
pub type ADEC_CHN = CVI_S32;
pub type AUDIO_DEV = CVI_S32;
pub type VI_DEV = CVI_S32;
pub type VI_PIPE = CVI_S32;
pub type VI_CHN = CVI_S32;
pub type VO_DEV = CVI_S32;
pub type VO_LAYER = CVI_S32;
pub type VO_CHN = CVI_S32;
pub type GRAPHIC_LAYER = CVI_S32;
pub type VENC_CHN = CVI_S32;
pub type VDEC_CHN = CVI_S32;
pub type ISP_DEV = CVI_S32;
pub type SENSOR_ID = CVI_S32;
pub type MIPI_DEV = CVI_S32;
pub type SLAVE_DEV = CVI_S32;
pub type VPSS_GRP = CVI_S32;
pub type VPSS_CHN = CVI_S32;
pub const _MOD_ID_E_CVI_ID_BASE: _MOD_ID_E = 0;
pub const _MOD_ID_E_CVI_ID_VB: _MOD_ID_E = 1;
pub const _MOD_ID_E_CVI_ID_SYS: _MOD_ID_E = 2;
pub const _MOD_ID_E_CVI_ID_RGN: _MOD_ID_E = 3;
pub const _MOD_ID_E_CVI_ID_CHNL: _MOD_ID_E = 4;
pub const _MOD_ID_E_CVI_ID_VDEC: _MOD_ID_E = 5;
pub const _MOD_ID_E_CVI_ID_VPSS: _MOD_ID_E = 6;
pub const _MOD_ID_E_CVI_ID_VENC: _MOD_ID_E = 7;
pub const _MOD_ID_E_CVI_ID_H264E: _MOD_ID_E = 8;
pub const _MOD_ID_E_CVI_ID_JPEGE: _MOD_ID_E = 9;
pub const _MOD_ID_E_CVI_ID_MPEG4E: _MOD_ID_E = 10;
pub const _MOD_ID_E_CVI_ID_H265E: _MOD_ID_E = 11;
pub const _MOD_ID_E_CVI_ID_JPEGD: _MOD_ID_E = 12;
pub const _MOD_ID_E_CVI_ID_VO: _MOD_ID_E = 13;
pub const _MOD_ID_E_CVI_ID_VI: _MOD_ID_E = 14;
pub const _MOD_ID_E_CVI_ID_DIS: _MOD_ID_E = 15;
pub const _MOD_ID_E_CVI_ID_RC: _MOD_ID_E = 16;
pub const _MOD_ID_E_CVI_ID_AIO: _MOD_ID_E = 17;
pub const _MOD_ID_E_CVI_ID_AI: _MOD_ID_E = 18;
pub const _MOD_ID_E_CVI_ID_AO: _MOD_ID_E = 19;
pub const _MOD_ID_E_CVI_ID_AENC: _MOD_ID_E = 20;
pub const _MOD_ID_E_CVI_ID_ADEC: _MOD_ID_E = 21;
pub const _MOD_ID_E_CVI_ID_AUD: _MOD_ID_E = 22;
pub const _MOD_ID_E_CVI_ID_VPU: _MOD_ID_E = 23;
pub const _MOD_ID_E_CVI_ID_ISP: _MOD_ID_E = 24;
pub const _MOD_ID_E_CVI_ID_IVE: _MOD_ID_E = 25;
pub const _MOD_ID_E_CVI_ID_USER: _MOD_ID_E = 26;
pub const _MOD_ID_E_CVI_ID_PROC: _MOD_ID_E = 27;
pub const _MOD_ID_E_CVI_ID_LOG: _MOD_ID_E = 28;
pub const _MOD_ID_E_CVI_ID_H264D: _MOD_ID_E = 29;
pub const _MOD_ID_E_CVI_ID_GDC: _MOD_ID_E = 30;
pub const _MOD_ID_E_CVI_ID_PHOTO: _MOD_ID_E = 31;
pub const _MOD_ID_E_CVI_ID_FB: _MOD_ID_E = 32;
pub const _MOD_ID_E_CVI_ID_BUTT: _MOD_ID_E = 33;
pub type _MOD_ID_E = ::std::os::raw::c_uint;
pub use self::_MOD_ID_E as MOD_ID_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_CHN_S {
    pub enModId: MOD_ID_E,
    pub s32DevId: CVI_S32,
    pub s32ChnId: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_CHN_S"][::std::mem::size_of::<_MMF_CHN_S>() - 12usize];
    ["Alignment of _MMF_CHN_S"][::std::mem::align_of::<_MMF_CHN_S>() - 4usize];
    ["Offset of field: _MMF_CHN_S::enModId"][::std::mem::offset_of!(_MMF_CHN_S, enModId) - 0usize];
    ["Offset of field: _MMF_CHN_S::s32DevId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32DevId) - 4usize];
    ["Offset of field: _MMF_CHN_S::s32ChnId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32ChnId) - 8usize];
};
pub type MMF_CHN_S = _MMF_CHN_S;
pub const PAYLOAD_TYPE_E_PT_PCMU: PAYLOAD_TYPE_E = 0;
pub const PAYLOAD_TYPE_E_PT_1016: PAYLOAD_TYPE_E = 1;
pub const PAYLOAD_TYPE_E_PT_G721: PAYLOAD_TYPE_E = 2;
pub const PAYLOAD_TYPE_E_PT_GSM: PAYLOAD_TYPE_E = 3;
pub const PAYLOAD_TYPE_E_PT_G723: PAYLOAD_TYPE_E = 4;
pub const PAYLOAD_TYPE_E_PT_DVI4_8K: PAYLOAD_TYPE_E = 5;
pub const PAYLOAD_TYPE_E_PT_DVI4_16K: PAYLOAD_TYPE_E = 6;
pub const PAYLOAD_TYPE_E_PT_LPC: PAYLOAD_TYPE_E = 7;
pub const PAYLOAD_TYPE_E_PT_PCMA: PAYLOAD_TYPE_E = 8;
pub const PAYLOAD_TYPE_E_PT_G722: PAYLOAD_TYPE_E = 9;
pub const PAYLOAD_TYPE_E_PT_S16BE_STEREO: PAYLOAD_TYPE_E = 10;
pub const PAYLOAD_TYPE_E_PT_S16BE_MONO: PAYLOAD_TYPE_E = 11;
pub const PAYLOAD_TYPE_E_PT_QCELP: PAYLOAD_TYPE_E = 12;
pub const PAYLOAD_TYPE_E_PT_CN: PAYLOAD_TYPE_E = 13;
pub const PAYLOAD_TYPE_E_PT_MPEGAUDIO: PAYLOAD_TYPE_E = 14;
pub const PAYLOAD_TYPE_E_PT_G728: PAYLOAD_TYPE_E = 15;
pub const PAYLOAD_TYPE_E_PT_DVI4_3: PAYLOAD_TYPE_E = 16;
pub const PAYLOAD_TYPE_E_PT_DVI4_4: PAYLOAD_TYPE_E = 17;
pub const PAYLOAD_TYPE_E_PT_G729: PAYLOAD_TYPE_E = 18;
pub const PAYLOAD_TYPE_E_PT_G711A: PAYLOAD_TYPE_E = 19;
pub const PAYLOAD_TYPE_E_PT_G711U: PAYLOAD_TYPE_E = 20;
pub const PAYLOAD_TYPE_E_PT_G726: PAYLOAD_TYPE_E = 21;
pub const PAYLOAD_TYPE_E_PT_G729A: PAYLOAD_TYPE_E = 22;
pub const PAYLOAD_TYPE_E_PT_LPCM: PAYLOAD_TYPE_E = 23;
pub const PAYLOAD_TYPE_E_PT_CelB: PAYLOAD_TYPE_E = 25;
pub const PAYLOAD_TYPE_E_PT_JPEG: PAYLOAD_TYPE_E = 26;
pub const PAYLOAD_TYPE_E_PT_CUSM: PAYLOAD_TYPE_E = 27;
pub const PAYLOAD_TYPE_E_PT_NV: PAYLOAD_TYPE_E = 28;
pub const PAYLOAD_TYPE_E_PT_PICW: PAYLOAD_TYPE_E = 29;
pub const PAYLOAD_TYPE_E_PT_CPV: PAYLOAD_TYPE_E = 30;
pub const PAYLOAD_TYPE_E_PT_H261: PAYLOAD_TYPE_E = 31;
pub const PAYLOAD_TYPE_E_PT_MPEGVIDEO: PAYLOAD_TYPE_E = 32;
pub const PAYLOAD_TYPE_E_PT_MPEG2TS: PAYLOAD_TYPE_E = 33;
pub const PAYLOAD_TYPE_E_PT_H263: PAYLOAD_TYPE_E = 34;
pub const PAYLOAD_TYPE_E_PT_SPEG: PAYLOAD_TYPE_E = 35;
pub const PAYLOAD_TYPE_E_PT_MPEG2VIDEO: PAYLOAD_TYPE_E = 36;
pub const PAYLOAD_TYPE_E_PT_AAC: PAYLOAD_TYPE_E = 37;
pub const PAYLOAD_TYPE_E_PT_WMA9STD: PAYLOAD_TYPE_E = 38;
pub const PAYLOAD_TYPE_E_PT_HEAAC: PAYLOAD_TYPE_E = 39;
pub const PAYLOAD_TYPE_E_PT_PCM_VOICE: PAYLOAD_TYPE_E = 40;
pub const PAYLOAD_TYPE_E_PT_PCM_AUDIO: PAYLOAD_TYPE_E = 41;
pub const PAYLOAD_TYPE_E_PT_MP3: PAYLOAD_TYPE_E = 43;
pub const PAYLOAD_TYPE_E_PT_ADPCMA: PAYLOAD_TYPE_E = 49;
pub const PAYLOAD_TYPE_E_PT_AEC: PAYLOAD_TYPE_E = 50;
pub const PAYLOAD_TYPE_E_PT_X_LD: PAYLOAD_TYPE_E = 95;
pub const PAYLOAD_TYPE_E_PT_H264: PAYLOAD_TYPE_E = 96;
pub const PAYLOAD_TYPE_E_PT_D_GSM_HR: PAYLOAD_TYPE_E = 200;
pub const PAYLOAD_TYPE_E_PT_D_GSM_EFR: PAYLOAD_TYPE_E = 201;
pub const PAYLOAD_TYPE_E_PT_D_L8: PAYLOAD_TYPE_E = 202;
pub const PAYLOAD_TYPE_E_PT_D_RED: PAYLOAD_TYPE_E = 203;
pub const PAYLOAD_TYPE_E_PT_D_VDVI: PAYLOAD_TYPE_E = 204;
pub const PAYLOAD_TYPE_E_PT_D_BT656: PAYLOAD_TYPE_E = 220;
pub const PAYLOAD_TYPE_E_PT_D_H263_1998: PAYLOAD_TYPE_E = 221;
pub const PAYLOAD_TYPE_E_PT_D_MP1S: PAYLOAD_TYPE_E = 222;
pub const PAYLOAD_TYPE_E_PT_D_MP2P: PAYLOAD_TYPE_E = 223;
pub const PAYLOAD_TYPE_E_PT_D_BMPEG: PAYLOAD_TYPE_E = 224;
pub const PAYLOAD_TYPE_E_PT_MP4VIDEO: PAYLOAD_TYPE_E = 230;
pub const PAYLOAD_TYPE_E_PT_MP4AUDIO: PAYLOAD_TYPE_E = 237;
pub const PAYLOAD_TYPE_E_PT_VC1: PAYLOAD_TYPE_E = 238;
pub const PAYLOAD_TYPE_E_PT_JVC_ASF: PAYLOAD_TYPE_E = 255;
pub const PAYLOAD_TYPE_E_PT_D_AVI: PAYLOAD_TYPE_E = 256;
pub const PAYLOAD_TYPE_E_PT_DIVX3: PAYLOAD_TYPE_E = 257;
pub const PAYLOAD_TYPE_E_PT_AVS: PAYLOAD_TYPE_E = 258;
pub const PAYLOAD_TYPE_E_PT_REAL8: PAYLOAD_TYPE_E = 259;
pub const PAYLOAD_TYPE_E_PT_REAL9: PAYLOAD_TYPE_E = 260;
pub const PAYLOAD_TYPE_E_PT_VP6: PAYLOAD_TYPE_E = 261;
pub const PAYLOAD_TYPE_E_PT_VP6F: PAYLOAD_TYPE_E = 262;
pub const PAYLOAD_TYPE_E_PT_VP6A: PAYLOAD_TYPE_E = 263;
pub const PAYLOAD_TYPE_E_PT_SORENSON: PAYLOAD_TYPE_E = 264;
pub const PAYLOAD_TYPE_E_PT_H265: PAYLOAD_TYPE_E = 265;
pub const PAYLOAD_TYPE_E_PT_VP8: PAYLOAD_TYPE_E = 266;
pub const PAYLOAD_TYPE_E_PT_MVC: PAYLOAD_TYPE_E = 267;
pub const PAYLOAD_TYPE_E_PT_PNG: PAYLOAD_TYPE_E = 268;
pub const PAYLOAD_TYPE_E_PT_AMR: PAYLOAD_TYPE_E = 1001;
pub const PAYLOAD_TYPE_E_PT_MJPEG: PAYLOAD_TYPE_E = 1002;
pub const PAYLOAD_TYPE_E_PT_BUTT: PAYLOAD_TYPE_E = 1003;
pub type PAYLOAD_TYPE_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_VERSION_S {
    pub version: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_VERSION_S"][::std::mem::size_of::<_MMF_VERSION_S>() - 128usize];
    ["Alignment of _MMF_VERSION_S"][::std::mem::align_of::<_MMF_VERSION_S>() - 1usize];
    ["Offset of field: _MMF_VERSION_S::version"]
        [::std::mem::offset_of!(_MMF_VERSION_S, version) - 0usize];
};
pub type MMF_VERSION_S = _MMF_VERSION_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LOG_LEVEL_CONF_S {
    pub enModId: MOD_ID_E,
    pub s32Level: CVI_S32,
    pub cModName: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LOG_LEVEL_CONF_S"][::std::mem::size_of::<_LOG_LEVEL_CONF_S>() - 24usize];
    ["Alignment of _LOG_LEVEL_CONF_S"][::std::mem::align_of::<_LOG_LEVEL_CONF_S>() - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::enModId"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, enModId) - 0usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::s32Level"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, s32Level) - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::cModName"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, cModName) - 8usize];
};
pub type LOG_LEVEL_CONF_S = _LOG_LEVEL_CONF_S;
extern "C" {
    pub static mut log_levels: *mut CVI_S32;
}
extern "C" {
    pub static mut log_name: [*const CVI_CHAR; 8usize];
}
extern "C" {
    pub static MOD_STRING: [*const ::std::os::raw::c_char; 34usize];
}
pub const _OPERATION_MODE_E_OPERATION_MODE_AUTO: _OPERATION_MODE_E = 0;
pub const _OPERATION_MODE_E_OPERATION_MODE_MANUAL: _OPERATION_MODE_E = 1;
pub const _OPERATION_MODE_E_OPERATION_MODE_BUTT: _OPERATION_MODE_E = 2;
pub type _OPERATION_MODE_E = ::std::os::raw::c_uint;
pub use self::_OPERATION_MODE_E as OPERATION_MODE_E;
pub const _ROTATION_E_ROTATION_0: _ROTATION_E = 0;
pub const _ROTATION_E_ROTATION_90: _ROTATION_E = 1;
pub const _ROTATION_E_ROTATION_180: _ROTATION_E = 2;
pub const _ROTATION_E_ROTATION_270: _ROTATION_E = 3;
pub const _ROTATION_E_ROTATION_XY_FLIP: _ROTATION_E = 4;
pub const _ROTATION_E_ROTATION_MAX: _ROTATION_E = 5;
pub type _ROTATION_E = ::std::os::raw::c_uint;
pub use self::_ROTATION_E as ROTATION_E;
pub const _VB_SOURCE_E_VB_SOURCE_COMMON: _VB_SOURCE_E = 0;
pub const _VB_SOURCE_E_VB_SOURCE_MODULE: _VB_SOURCE_E = 1;
pub const _VB_SOURCE_E_VB_SOURCE_PRIVATE: _VB_SOURCE_E = 2;
pub const _VB_SOURCE_E_VB_SOURCE_USER: _VB_SOURCE_E = 3;
pub const _VB_SOURCE_E_VB_SOURCE_BUTT: _VB_SOURCE_E = 4;
pub type _VB_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VB_SOURCE_E as VB_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BORDER_S {
    pub u32TopWidth: CVI_U32,
    pub u32BottomWidth: CVI_U32,
    pub u32LeftWidth: CVI_U32,
    pub u32RightWidth: CVI_U32,
    pub u32Color: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BORDER_S"][::std::mem::size_of::<_BORDER_S>() - 20usize];
    ["Alignment of _BORDER_S"][::std::mem::align_of::<_BORDER_S>() - 4usize];
    ["Offset of field: _BORDER_S::u32TopWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32TopWidth) - 0usize];
    ["Offset of field: _BORDER_S::u32BottomWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32BottomWidth) - 4usize];
    ["Offset of field: _BORDER_S::u32LeftWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32LeftWidth) - 8usize];
    ["Offset of field: _BORDER_S::u32RightWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32RightWidth) - 12usize];
    ["Offset of field: _BORDER_S::u32Color"][::std::mem::offset_of!(_BORDER_S, u32Color) - 16usize];
};
pub type BORDER_S = _BORDER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINT_S"][::std::mem::size_of::<_POINT_S>() - 8usize];
    ["Alignment of _POINT_S"][::std::mem::align_of::<_POINT_S>() - 4usize];
    ["Offset of field: _POINT_S::s32X"][::std::mem::offset_of!(_POINT_S, s32X) - 0usize];
    ["Offset of field: _POINT_S::s32Y"][::std::mem::offset_of!(_POINT_S, s32Y) - 4usize];
};
pub type POINT_S = _POINT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SIZE_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SIZE_S"][::std::mem::size_of::<_SIZE_S>() - 8usize];
    ["Alignment of _SIZE_S"][::std::mem::align_of::<_SIZE_S>() - 4usize];
    ["Offset of field: _SIZE_S::u32Width"][::std::mem::offset_of!(_SIZE_S, u32Width) - 0usize];
    ["Offset of field: _SIZE_S::u32Height"][::std::mem::offset_of!(_SIZE_S, u32Height) - 4usize];
};
pub type SIZE_S = _SIZE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RECT_S"][::std::mem::size_of::<_RECT_S>() - 16usize];
    ["Alignment of _RECT_S"][::std::mem::align_of::<_RECT_S>() - 4usize];
    ["Offset of field: _RECT_S::s32X"][::std::mem::offset_of!(_RECT_S, s32X) - 0usize];
    ["Offset of field: _RECT_S::s32Y"][::std::mem::offset_of!(_RECT_S, s32Y) - 4usize];
    ["Offset of field: _RECT_S::u32Width"][::std::mem::offset_of!(_RECT_S, u32Width) - 8usize];
    ["Offset of field: _RECT_S::u32Height"][::std::mem::offset_of!(_RECT_S, u32Height) - 12usize];
};
pub type RECT_S = _RECT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_REGION_INFO_S {
    pub u32RegionNum: CVI_U32,
    pub pstRegion: *mut RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_REGION_INFO_S"][::std::mem::size_of::<_VIDEO_REGION_INFO_S>() - 16usize];
    ["Alignment of _VIDEO_REGION_INFO_S"][::std::mem::align_of::<_VIDEO_REGION_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::u32RegionNum"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, u32RegionNum) - 0usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::pstRegion"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, pstRegion) - 8usize];
};
pub type VIDEO_REGION_INFO_S = _VIDEO_REGION_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CROP_INFO_S"][::std::mem::size_of::<_CROP_INFO_S>() - 20usize];
    ["Alignment of _CROP_INFO_S"][::std::mem::align_of::<_CROP_INFO_S>() - 4usize];
    ["Offset of field: _CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _CROP_INFO_S::stRect"]
        [::std::mem::offset_of!(_CROP_INFO_S, stRect) - 4usize];
};
pub type CROP_INFO_S = _CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAME_RATE_CTRL_S {
    pub s32SrcFrameRate: CVI_S32,
    pub s32DstFrameRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FRAME_RATE_CTRL_S"][::std::mem::size_of::<_FRAME_RATE_CTRL_S>() - 8usize];
    ["Alignment of _FRAME_RATE_CTRL_S"][::std::mem::align_of::<_FRAME_RATE_CTRL_S>() - 4usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32SrcFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32SrcFrameRate) - 0usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32DstFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32DstFrameRate) - 4usize];
};
pub type FRAME_RATE_CTRL_S = _FRAME_RATE_CTRL_S;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_NONE: _ASPECT_RATIO_E = 0;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_AUTO: _ASPECT_RATIO_E = 1;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MANUAL: _ASPECT_RATIO_E = 2;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MAX: _ASPECT_RATIO_E = 3;
pub type _ASPECT_RATIO_E = ::std::os::raw::c_uint;
pub use self::_ASPECT_RATIO_E as ASPECT_RATIO_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASPECT_RATIO_S {
    pub enMode: ASPECT_RATIO_E,
    pub bEnableBgColor: CVI_BOOL,
    pub u32BgColor: CVI_U32,
    pub stVideoRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ASPECT_RATIO_S"][::std::mem::size_of::<_ASPECT_RATIO_S>() - 28usize];
    ["Alignment of _ASPECT_RATIO_S"][::std::mem::align_of::<_ASPECT_RATIO_S>() - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::enMode"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, enMode) - 0usize];
    ["Offset of field: _ASPECT_RATIO_S::bEnableBgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, bEnableBgColor) - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::u32BgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, u32BgColor) - 8usize];
    ["Offset of field: _ASPECT_RATIO_S::stVideoRect"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, stVideoRect) - 12usize];
};
pub type ASPECT_RATIO_S = _ASPECT_RATIO_S;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888: _PIXEL_FORMAT_E = 0;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888: _PIXEL_FORMAT_E = 1;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888_PLANAR: _PIXEL_FORMAT_E = 2;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888_PLANAR: _PIXEL_FORMAT_E = 3;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_1555: _PIXEL_FORMAT_E = 4;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_4444: _PIXEL_FORMAT_E = 5;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_8888: _PIXEL_FORMAT_E = 6;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_8BPP: _PIXEL_FORMAT_E = 7;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_10BPP: _PIXEL_FORMAT_E = 8;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_12BPP: _PIXEL_FORMAT_E = 9;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_14BPP: _PIXEL_FORMAT_E = 10;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_16BPP: _PIXEL_FORMAT_E = 11;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_422: _PIXEL_FORMAT_E = 12;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_420: _PIXEL_FORMAT_E = 13;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_444: _PIXEL_FORMAT_E = 14;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_400: _PIXEL_FORMAT_E = 15;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888: _PIXEL_FORMAT_E = 16;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888_PLANAR: _PIXEL_FORMAT_E = 17;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV12: _PIXEL_FORMAT_E = 18;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV21: _PIXEL_FORMAT_E = 19;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV16: _PIXEL_FORMAT_E = 20;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV61: _PIXEL_FORMAT_E = 21;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUYV: _PIXEL_FORMAT_E = 22;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UYVY: _PIXEL_FORMAT_E = 23;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YVYU: _PIXEL_FORMAT_E = 24;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_VYUY: _PIXEL_FORMAT_E = 25;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C1: _PIXEL_FORMAT_E = 32;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C3_PLANAR: _PIXEL_FORMAT_E = 33;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C1: _PIXEL_FORMAT_E = 34;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C3_PLANAR: _PIXEL_FORMAT_E = 35;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C1: _PIXEL_FORMAT_E = 36;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C3_PLANAR: _PIXEL_FORMAT_E = 37;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C1: _PIXEL_FORMAT_E = 38;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C3_PLANAR: _PIXEL_FORMAT_E = 39;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C1: _PIXEL_FORMAT_E = 40;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C3_PLANAR: _PIXEL_FORMAT_E = 41;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C1: _PIXEL_FORMAT_E = 42;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C3_PLANAR: _PIXEL_FORMAT_E = 43;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C1: _PIXEL_FORMAT_E = 44;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C3_PLANAR: _PIXEL_FORMAT_E = 45;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C1: _PIXEL_FORMAT_E = 46;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C3_PLANAR: _PIXEL_FORMAT_E = 47;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_8BIT_MODE: _PIXEL_FORMAT_E = 48;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_MAX: _PIXEL_FORMAT_E = 49;
pub type _PIXEL_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_PIXEL_FORMAT_E as PIXEL_FORMAT_E;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR: _VIDEO_FORMAT_E = 0;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_MAX: _VIDEO_FORMAT_E = 1;
pub type _VIDEO_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_FORMAT_E as VIDEO_FORMAT_E;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_NONE: _COMPRESS_MODE_E = 0;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_TILE: _COMPRESS_MODE_E = 1;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_LINE: _COMPRESS_MODE_E = 2;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_FRAME: _COMPRESS_MODE_E = 3;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_BUTT: _COMPRESS_MODE_E = 4;
pub type _COMPRESS_MODE_E = ::std::os::raw::c_uint;
pub use self::_COMPRESS_MODE_E as COMPRESS_MODE_E;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_BG: _BAYER_FORMAT_E = 0;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GB: _BAYER_FORMAT_E = 1;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GR: _BAYER_FORMAT_E = 2;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_RG: _BAYER_FORMAT_E = 3;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_MAX: _BAYER_FORMAT_E = 4;
pub type _BAYER_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_BAYER_FORMAT_E as BAYER_FORMAT_E;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PREVIEW: _VIDEO_DISPLAY_MODE_E = 0;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PLAYBACK: _VIDEO_DISPLAY_MODE_E = 1;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_MAX: _VIDEO_DISPLAY_MODE_E = 2;
pub type _VIDEO_DISPLAY_MODE_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_DISPLAY_MODE_E as VIDEO_DISPLAY_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FRAME_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub au32Ratio: [CVI_U32; 3usize],
    pub u32IspNrStrength: CVI_U32,
    pub u32FNumber: CVI_U32,
    pub u32SensorID: CVI_U32,
    pub u32SensorMode: CVI_U32,
    pub u32HmaxTimes: CVI_U32,
    pub u32VcNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FRAME_INFO_S"][::std::mem::size_of::<_ISP_FRAME_INFO_S>() - 56usize];
    ["Alignment of _ISP_FRAME_INFO_S"][::std::mem::align_of::<_ISP_FRAME_INFO_S>() - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ExposureTime) - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspDgain) - 8usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Again"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Again) - 12usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Dgain) - 16usize];
    ["Offset of field: _ISP_FRAME_INFO_S::au32Ratio"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, au32Ratio) - 20usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspNrStrength"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspNrStrength) - 32usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32FNumber"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32FNumber) - 36usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorID"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorID) - 40usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorMode"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorMode) - 44usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32HmaxTimes) - 48usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32VcNum"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32VcNum) - 52usize];
};
pub type ISP_FRAME_INFO_S = _ISP_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_HDR_INFO_S {
    pub u32ColorTemp: CVI_U32,
    pub au16CCM: [CVI_U16; 9usize],
    pub u8Saturation: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_HDR_INFO_S"][::std::mem::size_of::<_ISP_HDR_INFO_S>() - 24usize];
    ["Alignment of _ISP_HDR_INFO_S"][::std::mem::align_of::<_ISP_HDR_INFO_S>() - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u32ColorTemp"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u32ColorTemp) - 0usize];
    ["Offset of field: _ISP_HDR_INFO_S::au16CCM"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, au16CCM) - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u8Saturation) - 22usize];
};
pub type ISP_HDR_INFO_S = _ISP_HDR_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ATTACH_INFO_S {
    pub stIspHdr: ISP_HDR_INFO_S,
    pub u32ISO: CVI_U32,
    pub u8SnsWDRMode: *mut CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ATTACH_INFO_S"][::std::mem::size_of::<_ISP_ATTACH_INFO_S>() - 40usize];
    ["Alignment of _ISP_ATTACH_INFO_S"][::std::mem::align_of::<_ISP_ATTACH_INFO_S>() - 8usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::stIspHdr"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, stIspHdr) - 0usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u32ISO) - 24usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u8SnsWDRMode"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u8SnsWDRMode) - 32usize];
};
pub type ISP_ATTACH_INFO_S = _ISP_ATTACH_INFO_S;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_FLASH: _FRAME_FLAG_E = 1;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_CUR: _FRAME_FLAG_E = 2;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_REF: _FRAME_FLAG_E = 4;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_END: _FRAME_FLAG_E = -2147483648;
pub const _FRAME_FLAG_E_FRAME_FLAG_MAX: _FRAME_FLAG_E = -2147483647;
pub type _FRAME_FLAG_E = ::std::os::raw::c_int;
pub use self::_FRAME_FLAG_E as FRAME_FLAG_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CONFIG_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub au32WhiteBalanceGain: [CVI_U32; 4usize],
    pub u32ColorTemperature: CVI_U32,
    pub au16CapCCM: [CVI_U16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CONFIG_INFO_S"][::std::mem::size_of::<_ISP_CONFIG_INFO_S>() - 52usize];
    ["Alignment of _ISP_CONFIG_INFO_S"][::std::mem::align_of::<_ISP_CONFIG_INFO_S>() - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32IspDgain) - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ExposureTime) - 8usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au32WhiteBalanceGain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au32WhiteBalanceGain) - 12usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ColorTemperature"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ColorTemperature) - 28usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au16CapCCM"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au16CapCCM) - 32usize];
};
pub type ISP_CONFIG_INFO_S = _ISP_CONFIG_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_SUPPLEMENT_S {
    pub u64JpegDCFPhyAddr: CVI_U64,
    pub u64IspInfoPhyAddr: CVI_U64,
    pub u64LowDelayPhyAddr: CVI_U64,
    pub u64FrameDNGPhyAddr: CVI_U64,
    pub pJpegDCFVirAddr: *mut CVI_VOID,
    pub pIspInfoVirAddr: *mut CVI_VOID,
    pub pLowDelayVirAddr: *mut CVI_VOID,
    pub pFrameDNGVirAddr: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_SUPPLEMENT_S"][::std::mem::size_of::<_VIDEO_SUPPLEMENT_S>() - 64usize];
    ["Alignment of _VIDEO_SUPPLEMENT_S"][::std::mem::align_of::<_VIDEO_SUPPLEMENT_S>() - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64JpegDCFPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64JpegDCFPhyAddr) - 0usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64IspInfoPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64IspInfoPhyAddr) - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64LowDelayPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64LowDelayPhyAddr) - 16usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64FrameDNGPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64FrameDNGPhyAddr) - 24usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pJpegDCFVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pJpegDCFVirAddr) - 32usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pIspInfoVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pIspInfoVirAddr) - 40usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pLowDelayVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pLowDelayVirAddr) - 48usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pFrameDNGVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pFrameDNGVirAddr) - 56usize];
};
pub type VIDEO_SUPPLEMENT_S = _VIDEO_SUPPLEMENT_S;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT601: _COLOR_GAMUT_E = 0;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT709: _COLOR_GAMUT_E = 1;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT2020: _COLOR_GAMUT_E = 2;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_USER: _COLOR_GAMUT_E = 3;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_MAX: _COLOR_GAMUT_E = 4;
pub type _COLOR_GAMUT_E = ::std::os::raw::c_uint;
pub use self::_COLOR_GAMUT_E as COLOR_GAMUT_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLORGAMMUT_INFO_S {
    pub enColorGamut: COLOR_GAMUT_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLORGAMMUT_INFO_S"][::std::mem::size_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Alignment of _ISP_COLORGAMMUT_INFO_S"]
        [::std::mem::align_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Offset of field: _ISP_COLORGAMMUT_INFO_S::enColorGamut"]
        [::std::mem::offset_of!(_ISP_COLORGAMMUT_INFO_S, enColorGamut) - 0usize];
};
pub type ISP_COLORGAMMUT_INFO_S = _ISP_COLORGAMMUT_INFO_S;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR8: _DYNAMIC_RANGE_E = 0;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR10: _DYNAMIC_RANGE_E = 1;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HDR10: _DYNAMIC_RANGE_E = 2;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HLG: _DYNAMIC_RANGE_E = 3;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SLF: _DYNAMIC_RANGE_E = 4;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_XDR: _DYNAMIC_RANGE_E = 5;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_MAX: _DYNAMIC_RANGE_E = 6;
pub type _DYNAMIC_RANGE_E = ::std::os::raw::c_uint;
pub use self::_DYNAMIC_RANGE_E as DYNAMIC_RANGE_E;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_8: _DATA_BITWIDTH_E = 0;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_10: _DATA_BITWIDTH_E = 1;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_12: _DATA_BITWIDTH_E = 2;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_14: _DATA_BITWIDTH_E = 3;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_16: _DATA_BITWIDTH_E = 4;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_MAX: _DATA_BITWIDTH_E = 5;
pub type _DATA_BITWIDTH_E = ::std::os::raw::c_uint;
pub use self::_DATA_BITWIDTH_E as DATA_BITWIDTH_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enColorGamut: COLOR_GAMUT_E,
    pub u32Stride: [CVI_U32; 3usize],
    pub u64PhyAddr: [CVI_U64; 3usize],
    pub pu8VirAddr: [*mut CVI_U8; 3usize],
    pub u32Length: [CVI_U32; 3usize],
    pub s16OffsetTop: CVI_S16,
    pub s16OffsetBottom: CVI_S16,
    pub s16OffsetLeft: CVI_S16,
    pub s16OffsetRight: CVI_S16,
    pub u32TimeRef: CVI_U32,
    pub u64PTS: CVI_U64,
    pub pPrivateData: *mut ::std::os::raw::c_void,
    pub u32FrameFlag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_S"][::std::mem::size_of::<_VIDEO_FRAME_S>() - 144usize];
    ["Alignment of _VIDEO_FRAME_S"][::std::mem::align_of::<_VIDEO_FRAME_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Width"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Width) - 0usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Height"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Height) - 4usize];
    ["Offset of field: _VIDEO_FRAME_S::enPixelFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enPixelFormat) - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::enBayerFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enBayerFormat) - 12usize];
    ["Offset of field: _VIDEO_FRAME_S::enVideoFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enVideoFormat) - 16usize];
    ["Offset of field: _VIDEO_FRAME_S::enCompressMode"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enCompressMode) - 20usize];
    ["Offset of field: _VIDEO_FRAME_S::enDynamicRange"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enDynamicRange) - 24usize];
    ["Offset of field: _VIDEO_FRAME_S::enColorGamut"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enColorGamut) - 28usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Stride"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Stride) - 32usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PhyAddr) - 48usize];
    ["Offset of field: _VIDEO_FRAME_S::pu8VirAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pu8VirAddr) - 72usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Length"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Length) - 96usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetTop"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetTop) - 108usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetBottom"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetBottom) - 110usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetLeft"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetLeft) - 112usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetRight"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetRight) - 114usize];
    ["Offset of field: _VIDEO_FRAME_S::u32TimeRef"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32TimeRef) - 116usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PTS"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PTS) - 120usize];
    ["Offset of field: _VIDEO_FRAME_S::pPrivateData"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pPrivateData) - 128usize];
    ["Offset of field: _VIDEO_FRAME_S::u32FrameFlag"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32FrameFlag) - 136usize];
};
pub type VIDEO_FRAME_S = _VIDEO_FRAME_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_INFO_S {
    pub stVFrame: VIDEO_FRAME_S,
    pub u32PoolId: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_INFO_S"][::std::mem::size_of::<_VIDEO_FRAME_INFO_S>() - 152usize];
    ["Alignment of _VIDEO_FRAME_INFO_S"][::std::mem::align_of::<_VIDEO_FRAME_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::stVFrame"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, stVFrame) - 0usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::u32PoolId"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, u32PoolId) - 144usize];
};
pub type VIDEO_FRAME_INFO_S = _VIDEO_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CAL_CONFIG_S {
    pub u32VBSize: CVI_U32,
    pub u32MainStride: CVI_U32,
    pub u32CStride: CVI_U32,
    pub u32MainSize: CVI_U32,
    pub u32MainYSize: CVI_U32,
    pub u32MainCSize: CVI_U32,
    pub u16AddrAlign: CVI_U16,
    pub plane_num: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CAL_CONFIG_S"][::std::mem::size_of::<_VB_CAL_CONFIG_S>() - 28usize];
    ["Alignment of _VB_CAL_CONFIG_S"][::std::mem::align_of::<_VB_CAL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32VBSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32VBSize) - 0usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainStride) - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32CStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32CStride) - 8usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainSize) - 12usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainYSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainYSize) - 16usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainCSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainCSize) - 20usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u16AddrAlign"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u16AddrAlign) - 24usize];
    ["Offset of field: _VB_CAL_CONFIG_S::plane_num"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, plane_num) - 26usize];
};
pub type VB_CAL_CONFIG_S = _VB_CAL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub pData: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BITMAP_S"][::std::mem::size_of::<_BITMAP_S>() - 24usize];
    ["Alignment of _BITMAP_S"][::std::mem::align_of::<_BITMAP_S>() - 8usize];
    ["Offset of field: _BITMAP_S::enPixelFormat"]
        [::std::mem::offset_of!(_BITMAP_S, enPixelFormat) - 0usize];
    ["Offset of field: _BITMAP_S::u32Width"][::std::mem::offset_of!(_BITMAP_S, u32Width) - 4usize];
    ["Offset of field: _BITMAP_S::u32Height"]
        [::std::mem::offset_of!(_BITMAP_S, u32Height) - 8usize];
    ["Offset of field: _BITMAP_S::pData"][::std::mem::offset_of!(_BITMAP_S, pData) - 16usize];
};
pub type BITMAP_S = _BITMAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDC_ATTR_S {
    pub bAspect: CVI_BOOL,
    pub s32XRatio: CVI_S32,
    pub s32YRatio: CVI_S32,
    pub s32XYRatio: CVI_S32,
    pub s32CenterXOffset: CVI_S32,
    pub s32CenterYOffset: CVI_S32,
    pub s32DistortionRatio: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDC_ATTR_S"][::std::mem::size_of::<_LDC_ATTR_S>() - 28usize];
    ["Alignment of _LDC_ATTR_S"][::std::mem::align_of::<_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _LDC_ATTR_S::bAspect"]
        [::std::mem::offset_of!(_LDC_ATTR_S, bAspect) - 0usize];
    ["Offset of field: _LDC_ATTR_S::s32XRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XRatio) - 4usize];
    ["Offset of field: _LDC_ATTR_S::s32YRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32YRatio) - 8usize];
    ["Offset of field: _LDC_ATTR_S::s32XYRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XYRatio) - 12usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterXOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterXOffset) - 16usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterYOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterYOffset) - 20usize];
    ["Offset of field: _LDC_ATTR_S::s32DistortionRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32DistortionRatio) - 24usize];
};
pub type LDC_ATTR_S = _LDC_ATTR_S;
pub const _WDR_MODE_E_WDR_MODE_NONE: _WDR_MODE_E = 0;
pub const _WDR_MODE_E_WDR_MODE_BUILT_IN: _WDR_MODE_E = 1;
pub const _WDR_MODE_E_WDR_MODE_QUDRA: _WDR_MODE_E = 2;
pub const _WDR_MODE_E_WDR_MODE_2To1_LINE: _WDR_MODE_E = 3;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME: _WDR_MODE_E = 4;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME_FULL_RATE: _WDR_MODE_E = 5;
pub const _WDR_MODE_E_WDR_MODE_3To1_LINE: _WDR_MODE_E = 6;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME: _WDR_MODE_E = 7;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME_FULL_RATE: _WDR_MODE_E = 8;
pub const _WDR_MODE_E_WDR_MODE_4To1_LINE: _WDR_MODE_E = 9;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME: _WDR_MODE_E = 10;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME_FULL_RATE: _WDR_MODE_E = 11;
pub const _WDR_MODE_E_WDR_MODE_MAX: _WDR_MODE_E = 12;
pub type _WDR_MODE_E = ::std::os::raw::c_uint;
pub use self::_WDR_MODE_E as WDR_MODE_E;
pub const _PROC_AMP_E_PROC_AMP_BRIGHTNESS: _PROC_AMP_E = 0;
pub const _PROC_AMP_E_PROC_AMP_CONTRAST: _PROC_AMP_E = 1;
pub const _PROC_AMP_E_PROC_AMP_SATURATION: _PROC_AMP_E = 2;
pub const _PROC_AMP_E_PROC_AMP_HUE: _PROC_AMP_E = 3;
pub const _PROC_AMP_E_PROC_AMP_MAX: _PROC_AMP_E = 4;
pub type _PROC_AMP_E = ::std::os::raw::c_uint;
pub use self::_PROC_AMP_E as PROC_AMP_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROC_AMP_CTRL_S {
    pub minimum: CVI_S32,
    pub maximum: CVI_S32,
    pub step: CVI_S32,
    pub default_value: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROC_AMP_CTRL_S"][::std::mem::size_of::<_PROC_AMP_CTRL_S>() - 16usize];
    ["Alignment of _PROC_AMP_CTRL_S"][::std::mem::align_of::<_PROC_AMP_CTRL_S>() - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::minimum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, minimum) - 0usize];
    ["Offset of field: _PROC_AMP_CTRL_S::maximum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, maximum) - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::step"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, step) - 8usize];
    ["Offset of field: _PROC_AMP_CTRL_S::default_value"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, default_value) - 12usize];
};
pub type PROC_AMP_CTRL_S = _PROC_AMP_CTRL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VCODEC_PERF_FPS_S {
    pub u32InFPS: CVI_U32,
    pub u32OutFPS: CVI_U32,
    pub u64HwTime: CVI_U64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VCODEC_PERF_FPS_S"][::std::mem::size_of::<_VCODEC_PERF_FPS_S>() - 16usize];
    ["Alignment of _VCODEC_PERF_FPS_S"][::std::mem::align_of::<_VCODEC_PERF_FPS_S>() - 8usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32InFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32InFPS) - 0usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32OutFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32OutFPS) - 4usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u64HwTime"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u64HwTime) - 8usize];
};
pub type VCODEC_PERF_FPS_S = _VCODEC_PERF_FPS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_BIND_DEST_S {
    pub u32Num: CVI_U32,
    pub astMmfChn: [MMF_CHN_S; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_BIND_DEST_S"][::std::mem::size_of::<_MMF_BIND_DEST_S>() - 388usize];
    ["Alignment of _MMF_BIND_DEST_S"][::std::mem::align_of::<_MMF_BIND_DEST_S>() - 4usize];
    ["Offset of field: _MMF_BIND_DEST_S::u32Num"]
        [::std::mem::offset_of!(_MMF_BIND_DEST_S, u32Num) - 0usize];
    ["Offset of field: _MMF_BIND_DEST_S::astMmfChn"]
        [::std::mem::offset_of!(_MMF_BIND_DEST_S, astMmfChn) - 4usize];
};
pub type MMF_BIND_DEST_S = _MMF_BIND_DEST_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BIND_NODE_S {
    pub bUsed: CVI_BOOL,
    pub src: MMF_CHN_S,
    pub dsts: MMF_BIND_DEST_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BIND_NODE_S"][::std::mem::size_of::<_BIND_NODE_S>() - 404usize];
    ["Alignment of _BIND_NODE_S"][::std::mem::align_of::<_BIND_NODE_S>() - 4usize];
    ["Offset of field: _BIND_NODE_S::bUsed"][::std::mem::offset_of!(_BIND_NODE_S, bUsed) - 0usize];
    ["Offset of field: _BIND_NODE_S::src"][::std::mem::offset_of!(_BIND_NODE_S, src) - 4usize];
    ["Offset of field: _BIND_NODE_S::dsts"][::std::mem::offset_of!(_BIND_NODE_S, dsts) - 16usize];
};
pub type BIND_NODE_S = _BIND_NODE_S;
pub const _VI_VPSS_MODE_E_VI_OFFLINE_VPSS_OFFLINE: _VI_VPSS_MODE_E = 0;
pub const _VI_VPSS_MODE_E_VI_OFFLINE_VPSS_ONLINE: _VI_VPSS_MODE_E = 1;
pub const _VI_VPSS_MODE_E_VI_ONLINE_VPSS_OFFLINE: _VI_VPSS_MODE_E = 2;
pub const _VI_VPSS_MODE_E_VI_ONLINE_VPSS_ONLINE: _VI_VPSS_MODE_E = 3;
pub const _VI_VPSS_MODE_E_VI_BE_OFL_POST_OL_VPSS_OFL: _VI_VPSS_MODE_E = 4;
pub const _VI_VPSS_MODE_E_VI_BE_OFL_POST_OFL_VPSS_OFL: _VI_VPSS_MODE_E = 5;
pub const _VI_VPSS_MODE_E_VI_BE_OL_POST_OFL_VPSS_OFL: _VI_VPSS_MODE_E = 6;
pub const _VI_VPSS_MODE_E_VI_BE_OL_POST_OL_VPSS_OFL: _VI_VPSS_MODE_E = 7;
pub const _VI_VPSS_MODE_E_VI_VPSS_MODE_BUTT: _VI_VPSS_MODE_E = 8;
pub type _VI_VPSS_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_VPSS_MODE_E as VI_VPSS_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_VPSS_MODE_S {
    pub aenMode: [VI_VPSS_MODE_E; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_VPSS_MODE_S"][::std::mem::size_of::<_VI_VPSS_MODE_S>() - 16usize];
    ["Alignment of _VI_VPSS_MODE_S"][::std::mem::align_of::<_VI_VPSS_MODE_S>() - 4usize];
    ["Offset of field: _VI_VPSS_MODE_S::aenMode"]
        [::std::mem::offset_of!(_VI_VPSS_MODE_S, aenMode) - 0usize];
};
pub type VI_VPSS_MODE_S = _VI_VPSS_MODE_S;
pub const _VPSS_MODE_E_VPSS_MODE_SINGLE: _VPSS_MODE_E = 0;
pub const _VPSS_MODE_E_VPSS_MODE_DUAL: _VPSS_MODE_E = 1;
pub const _VPSS_MODE_E_VPSS_MODE_RGNEX: _VPSS_MODE_E = 2;
pub const _VPSS_MODE_E_VPSS_MODE_BUTT: _VPSS_MODE_E = 3;
pub type _VPSS_MODE_E = ::std::os::raw::c_uint;
pub use self::_VPSS_MODE_E as VPSS_MODE_E;
pub const _VPSS_INPUT_E_VPSS_INPUT_MEM: _VPSS_INPUT_E = 0;
pub const _VPSS_INPUT_E_VPSS_INPUT_ISP: _VPSS_INPUT_E = 1;
pub const _VPSS_INPUT_E_VPSS_INPUT_BUTT: _VPSS_INPUT_E = 2;
pub type _VPSS_INPUT_E = ::std::os::raw::c_uint;
pub use self::_VPSS_INPUT_E as VPSS_INPUT_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VPSS_MODE_S {
    pub enMode: VPSS_MODE_E,
    pub aenInput: [VPSS_INPUT_E; 2usize],
    pub ViPipe: [VI_PIPE; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VPSS_MODE_S"][::std::mem::size_of::<_VPSS_MODE_S>() - 20usize];
    ["Alignment of _VPSS_MODE_S"][::std::mem::align_of::<_VPSS_MODE_S>() - 4usize];
    ["Offset of field: _VPSS_MODE_S::enMode"]
        [::std::mem::offset_of!(_VPSS_MODE_S, enMode) - 0usize];
    ["Offset of field: _VPSS_MODE_S::aenInput"]
        [::std::mem::offset_of!(_VPSS_MODE_S, aenInput) - 4usize];
    ["Offset of field: _VPSS_MODE_S::ViPipe"]
        [::std::mem::offset_of!(_VPSS_MODE_S, ViPipe) - 12usize];
};
pub type VPSS_MODE_S = _VPSS_MODE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CVI_TDMA_2D_S {
    pub paddr_src: u64,
    pub paddr_dst: u64,
    pub w_bytes: u32,
    pub h: u32,
    pub stride_bytes_src: u32,
    pub stride_bytes_dst: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CVI_TDMA_2D_S"][::std::mem::size_of::<_CVI_TDMA_2D_S>() - 32usize];
    ["Alignment of _CVI_TDMA_2D_S"][::std::mem::align_of::<_CVI_TDMA_2D_S>() - 8usize];
    ["Offset of field: _CVI_TDMA_2D_S::paddr_src"]
        [::std::mem::offset_of!(_CVI_TDMA_2D_S, paddr_src) - 0usize];
    ["Offset of field: _CVI_TDMA_2D_S::paddr_dst"]
        [::std::mem::offset_of!(_CVI_TDMA_2D_S, paddr_dst) - 8usize];
    ["Offset of field: _CVI_TDMA_2D_S::w_bytes"]
        [::std::mem::offset_of!(_CVI_TDMA_2D_S, w_bytes) - 16usize];
    ["Offset of field: _CVI_TDMA_2D_S::h"][::std::mem::offset_of!(_CVI_TDMA_2D_S, h) - 20usize];
    ["Offset of field: _CVI_TDMA_2D_S::stride_bytes_src"]
        [::std::mem::offset_of!(_CVI_TDMA_2D_S, stride_bytes_src) - 24usize];
    ["Offset of field: _CVI_TDMA_2D_S::stride_bytes_dst"]
        [::std::mem::offset_of!(_CVI_TDMA_2D_S, stride_bytes_dst) - 28usize];
};
pub type CVI_TDMA_2D_S = _CVI_TDMA_2D_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VPSS_VENC_WRAP_PARAM_S {
    pub bAllOnline: CVI_BOOL,
    pub u32FrameRate: CVI_U32,
    pub u32FullLinesStd: CVI_U32,
    pub stLargeStreamSize: SIZE_S,
    pub stSmallStreamSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VPSS_VENC_WRAP_PARAM_S"][::std::mem::size_of::<_VPSS_VENC_WRAP_PARAM_S>() - 28usize];
    ["Alignment of _VPSS_VENC_WRAP_PARAM_S"]
        [::std::mem::align_of::<_VPSS_VENC_WRAP_PARAM_S>() - 4usize];
    ["Offset of field: _VPSS_VENC_WRAP_PARAM_S::bAllOnline"]
        [::std::mem::offset_of!(_VPSS_VENC_WRAP_PARAM_S, bAllOnline) - 0usize];
    ["Offset of field: _VPSS_VENC_WRAP_PARAM_S::u32FrameRate"]
        [::std::mem::offset_of!(_VPSS_VENC_WRAP_PARAM_S, u32FrameRate) - 4usize];
    ["Offset of field: _VPSS_VENC_WRAP_PARAM_S::u32FullLinesStd"]
        [::std::mem::offset_of!(_VPSS_VENC_WRAP_PARAM_S, u32FullLinesStd) - 8usize];
    ["Offset of field: _VPSS_VENC_WRAP_PARAM_S::stLargeStreamSize"]
        [::std::mem::offset_of!(_VPSS_VENC_WRAP_PARAM_S, stLargeStreamSize) - 12usize];
    ["Offset of field: _VPSS_VENC_WRAP_PARAM_S::stSmallStreamSize"]
        [::std::mem::offset_of!(_VPSS_VENC_WRAP_PARAM_S, stSmallStreamSize) - 20usize];
};
pub type VPSS_VENC_WRAP_PARAM_S = _VPSS_VENC_WRAP_PARAM_S;
extern "C" {
    pub fn CVI_SYS_Init() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_Exit() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_VI_Open() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_VI_Close() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_Bind(pstSrcChn: *const MMF_CHN_S, pstDestChn: *const MMF_CHN_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_UnBind(pstSrcChn: *const MMF_CHN_S, pstDestChn: *const MMF_CHN_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetBindbyDest(
        pstDestChn: *const MMF_CHN_S,
        pstSrcChn: *mut MMF_CHN_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetBindbySrc(
        pstSrcChn: *const MMF_CHN_S,
        pstBindDest: *mut MMF_BIND_DEST_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetVersion(pstVersion: *mut MMF_VERSION_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetChipId(pu32ChipId: *mut CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetChipVersion(pu32ChipVersion: *mut CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetPowerOnReason(pu32PowerOnReason: *mut CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetCurPTS(pu64CurPTS: *mut CVI_U64) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonAlloc(
        pu64PhyAddr: *mut CVI_U64,
        ppVirAddr: *mut *mut CVI_VOID,
        strName: *const CVI_CHAR,
        u32Len: CVI_U32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonAlloc_Cached(
        pu64PhyAddr: *mut CVI_U64,
        ppVirAddr: *mut *mut CVI_VOID,
        strName: *const CVI_CHAR,
        u32Len: CVI_U32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonFree(u64PhyAddr: CVI_U64, pVirAddr: *mut CVI_VOID) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonFlushCache(
        u64PhyAddr: CVI_U64,
        pVirAddr: *mut CVI_VOID,
        u32Len: CVI_U32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonInvalidateCache(
        u64PhyAddr: CVI_U64,
        pVirAddr: *mut CVI_VOID,
        u32Len: CVI_U32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_IonGetFd() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_TDMACopy(u64PhyDst: CVI_U64, u64PhySrc: CVI_U64, u32Len: CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_TDMACopy2D(param: *mut CVI_TDMA_2D_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_Mmap(u64PhyAddr: CVI_U64, u32Size: CVI_U32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CVI_SYS_MmapCache(u64PhyAddr: CVI_U64, u32Size: CVI_U32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn CVI_SYS_Munmap(pVirAddr: *mut ::std::os::raw::c_void, u32Size: CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_SetVIVPSSMode(pstVIVPSSMode: *const VI_VPSS_MODE_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetVIVPSSMode(pstVIVPSSMode: *mut VI_VPSS_MODE_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_SetVPSSMode(enVPSSMode: VPSS_MODE_E) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetVPSSMode() -> VPSS_MODE_E;
}
extern "C" {
    pub fn CVI_SYS_SetVPSSModeEx(pstVPSSMode: *const VPSS_MODE_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetVPSSModeEx(pstVPSSMode: *mut VPSS_MODE_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_GetModName(id: MOD_ID_E) -> *const CVI_CHAR;
}
extern "C" {
    pub fn CVI_LOG_SetLevelConf(pstConf: *mut LOG_LEVEL_CONF_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_LOG_GetLevelConf(pstConf: *mut LOG_LEVEL_CONF_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_RegisterThermalCallback(
        setFPS: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn CVI_SYS_TraceBegin(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn CVI_SYS_TraceCounter(name: *const ::std::os::raw::c_char, value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn CVI_SYS_TraceEnd();
}
extern "C" {
    pub fn CVI_SYS_StartThermalThread() -> CVI_S32;
}
extern "C" {
    pub fn CVI_SYS_StopThermalThread() -> CVI_S32;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
