#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals, unused_imports, improper_ctypes)]
/* automatically generated by rust-bindgen 0.70.1 */

pub const __BITS_PER_LONG: u32 = 64;
pub const __FD_SETSIZE: u32 = 1024;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CVI_NULL: u32 = 0;
pub const CVI_SUCCESS: u32 = 0;
pub const CVI_FAILURE: i32 = -1;
pub const CVI_FAILURE_ILLEGAL_PARAM: i32 = -2;
pub const CVI_TRUE: u32 = 1;
pub const CVI_FALSE: u32 = 0;
pub const IOCTL_BASE_MAGIC: u8 = 115u8;
pub const CVI_CHIP_NAME: &[u8; 7] = b"CV181X\0";
pub const CVI_CHIP_TEST: u32 = 0;
pub const CVIU01: u32 = 1;
pub const CVIU02: u32 = 2;
pub const CVI_COLDBOOT: u32 = 1;
pub const CVI_WDTBOOT: u32 = 2;
pub const CVI_SUSPENDBOOT: u32 = 3;
pub const CVI_WARMBOOT: u32 = 4;
pub const MMF_VER_PRIX: &[u8; 7] = b"_MMF_V\0";
pub const ALIGN_NUM: u32 = 4;
pub const LUMA_PHY_ALIGN: u32 = 16;
pub const DEFAULT_ALIGN: u32 = 64;
pub const MAX_ALIGN: u32 = 1024;
pub const SEG_CMP_LENGTH: u32 = 256;
pub const VENC_MAX_NAME_LEN: u32 = 16;
pub const VENC_MAX_CHN_NUM: u32 = 16;
pub const VEDU_IP_NUM: u32 = 1;
pub const H264E_MAX_WIDTH: u32 = 4096;
pub const H264E_MAX_HEIGHT: u32 = 4096;
pub const H264E_MIN_WIDTH: u32 = 114;
pub const H264E_MIN_HEIGHT: u32 = 114;
pub const H265E_MAX_WIDTH: u32 = 4096;
pub const H265E_MAX_HEIGHT: u32 = 4096;
pub const H265E_MIN_WIDTH: u32 = 114;
pub const H265E_MIN_HEIGHT: u32 = 114;
pub const JPEGE_MAX_WIDTH: u32 = 8192;
pub const JPEGE_MAX_HEIGHT: u32 = 8192;
pub const JPEGE_MIN_WIDTH: u32 = 32;
pub const JPEGE_MIN_HEIGHT: u32 = 32;
pub const JPGE_MAX_NUM: u32 = 1;
pub const VENC_MAX_ROI_NUM: u32 = 8;
pub const H264E_MIN_HW_INDEX: u32 = 0;
pub const H264E_MAX_HW_INDEX: u32 = 11;
pub const H264E_MIN_VW_INDEX: u32 = 0;
pub const H264E_MAX_VW_INDEX: u32 = 3;
pub const VENC_QP_HISGRM_NUM: u32 = 52;
pub const MAX_TILE_NUM: u32 = 1;
pub const H265E_ADAPTIVE_FRAME_TYPE: u32 = 4;
pub const H265E_ADAPTIVE_QP_TYPE: u32 = 5;
pub const VENC_MIN_INPUT_FRAME_RATE: u32 = 1;
pub const VENC_MAX_INPUT_FRAME_RATE: u32 = 240;
pub const VENC_MAX_RECEIVE_SOURCE: u32 = 4;
pub const VENC_PIC_RECEIVE_SOURCE0: u32 = 0;
pub const VENC_PIC_RECEIVE_SOURCE1: u32 = 1;
pub const VENC_PIC_RECEIVE_SOURCE2: u32 = 2;
pub const VENC_PIC_RECEIVE_SOURCE3: u32 = 3;
pub const VENC_ALIGN_W: u32 = 32;
pub const VENC_ALIGN_H: u32 = 16;
pub const RC_TEXTURE_THR_SIZE: u32 = 16;
pub const MIN_BITRATE: u32 = 2;
pub const MAX_BITRATE: u32 = 102400;
pub const VDEC_MAX_CHN_NUM: u32 = 64;
pub const VDH_MAX_CHN_NUM: u32 = 0;
pub const VEDU_CHN_START: u32 = 0;
pub const VEDU_H264D_ERRRATE: u32 = 10;
pub const VEDU_H264D_FULLERR: u32 = 100;
pub const H264D_ALIGN_W: u32 = 64;
pub const H264D_ALIGN_H: u32 = 64;
pub const H265D_ALIGN_W: u32 = 64;
pub const H265D_ALIGN_H: u32 = 64;
pub const JPEGD_ALIGN_W: u32 = 64;
pub const JPEGD_ALIGN_H: u32 = 16;
pub const JPEGD_RGB_ALIGN: u32 = 16;
pub const H264D_ALIGN_FRM: u32 = 4096;
pub const H265D_ALIGN_FRM: u32 = 4096;
pub const JPEGD_ALIGN_FRM: u32 = 4096;
pub const H264D_MAX_SPS: u32 = 32;
pub const H264D_MIN_SPS: u32 = 1;
pub const H264D_MAX_PPS: u32 = 256;
pub const H264D_MIN_PPS: u32 = 1;
pub const H264D_MAX_SLICE: u32 = 300;
pub const H264D_MIN_SLICE: u32 = 1;
pub const H265D_MAX_VPS: u32 = 16;
pub const H265D_MIN_VPS: u32 = 1;
pub const H265D_MAX_SPS: u32 = 16;
pub const H265D_MIN_SPS: u32 = 1;
pub const H265D_MAX_PPS: u32 = 64;
pub const H265D_MIN_PPS: u32 = 1;
pub const H265D_MAX_SLICE: u32 = 200;
pub const H265D_MIN_SLICE: u32 = 1;
pub const VEDU_H264D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H264D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H264D_MIN_WIDTH: u32 = 114;
pub const VEDU_H264D_MIN_HEIGHT: u32 = 114;
pub const VEDU_H265D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H265D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H265D_MIN_WIDTH: u32 = 114;
pub const VEDU_H265D_MIN_HEIGHT: u32 = 114;
pub const JPEGD_IP_NUM: u32 = 1;
pub const JPEGD_MAX_WIDTH: u32 = 2880;
pub const JPEGD_MAX_HEIGHT: u32 = 1920;
pub const JPEGD_MIN_WIDTH: u32 = 8;
pub const JPEGD_MIN_HEIGHT: u32 = 8;
pub const RGN_MIN_WIDTH: u32 = 2;
pub const RGN_MIN_HEIGHT: u32 = 2;
pub const RGN_COVER_MAX_WIDTH: u32 = 2880;
pub const RGN_COVER_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVER_MIN_X: u32 = 0;
pub const RGN_COVER_MIN_Y: u32 = 0;
pub const RGN_COVER_MAX_X: u32 = 2878;
pub const RGN_COVER_MAX_Y: u32 = 4094;
pub const RGN_COVEREX_MAX_NUM: u32 = 4;
pub const RGN_COVEREX_MAX_WIDTH: u32 = 2880;
pub const RGN_COVEREX_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVEREX_MIN_X: u32 = 0;
pub const RGN_COVEREX_MIN_Y: u32 = 0;
pub const RGN_COVEREX_MAX_X: u32 = 2878;
pub const RGN_COVEREX_MAX_Y: u32 = 4094;
pub const RGN_OVERLAY_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAY_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAY_MIN_X: u32 = 0;
pub const RGN_OVERLAY_MIN_Y: u32 = 0;
pub const RGN_OVERLAY_MAX_X: u32 = 2878;
pub const RGN_OVERLAY_MAX_Y: u32 = 4094;
pub const RGN_OVERLAYEX_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAYEX_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAYEX_MIN_X: u32 = 0;
pub const RGN_OVERLAYEX_MIN_Y: u32 = 0;
pub const RGN_OVERLAYEX_MAX_X: u32 = 2878;
pub const RGN_OVERLAYEX_MAX_Y: u32 = 4094;
pub const RGN_MOSAIC_MAX_NUM: u32 = 8;
pub const RGN_MOSAIC_X_ALIGN: u32 = 4;
pub const RGN_MOSAIC_Y_ALIGN: u32 = 2;
pub const RGN_MOSAIC_WIDTH_ALIGN: u32 = 4;
pub const RGN_MOSAIC_HEIGHT_ALIGN: u32 = 4;
pub const RGN_MOSAIC_MIN_WIDTH: u32 = 8;
pub const RGN_MOSAIC_MIN_HEIGHT: u32 = 8;
pub const RGN_MOSAIC_MAX_WIDTH: u32 = 2880;
pub const RGN_MOSAIC_MAX_HEIGHT: u32 = 4096;
pub const RGN_MOSAIC_MIN_X: u32 = 0;
pub const RGN_MOSAIC_MIN_Y: u32 = 0;
pub const RGN_MOSAIC_MAX_X: u32 = 2872;
pub const RGN_MOSAIC_MAX_Y: u32 = 4088;
pub const RGN_MAX_LAYER_VPSS: u32 = 2;
pub const RGN_ODEC_LAYER_VPSS: u32 = 0;
pub const RGN_NORMAL_LAYER_VPSS: u32 = 1;
pub const RGN_MAX_NUM_VPSS: u32 = 8;
pub const RGN_EX_MAX_NUM_VPSS: u32 = 16;
pub const RGN_EX_MAX_WIDTH: u32 = 2880;
pub const RGN_MAX_NUM_VO: u32 = 8;
pub const RGN_MAX_BUF_NUM: u32 = 2;
pub const RGN_MAX_NUM: u32 = 108;
pub const VENC_MAX_SSE_NUM: u32 = 8;
pub const CVI_MAX_SENSOR_NUM: u32 = 2;
pub const VI_MAX_DEV_NUM: u32 = 3;
pub const VI_MAX_PHY_PIPE_NUM: u32 = 4;
pub const VI_MAX_VIR_PIPE_NUM: u32 = 0;
pub const VI_MAX_PIPE_NUM: u32 = 4;
pub const VI_MAX_WDR_NUM: u32 = 1;
pub const VI_MAX_VIR_CHN_NUM: u32 = 2;
pub const VI_MAX_PHY_CHN_NUM: u32 = 3;
pub const VI_MAX_EXT_CHN_NUM: u32 = 2;
pub const VI_MAX_CHN_NUM: u32 = 5;
pub const VI_EXT_CHN_START: u32 = 5;
pub const VI_MAX_EXTCHN_BIND_PER_CHN: u32 = 1;
pub const VI_MAX_WDR_FRAME_NUM: u32 = 2;
pub const VI_MAX_NODE_NUM: u32 = 3;
pub const VIPROC_IP_NUM: u32 = 1;
pub const VICAP_IP_NUM: u32 = 1;
pub const VI_MAX_SPLIT_NODE_NUM: u32 = 3;
pub const VI_DEV_MIN_WIDTH: u32 = 120;
pub const VI_DEV_MIN_HEIGHT: u32 = 120;
pub const VI_DEV_MAX_WIDTH: u32 = 4608;
pub const VI_DEV_MAX_HEIGHT: u32 = 4608;
pub const VI_FPN_MAX_WIDTH: u32 = 4096;
pub const VI_FPN_MAX_HEIGHT: u32 = 4608;
pub const VI_PIPE_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_OFFLINE_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_OFFLINE_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_ONLINE_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_ONLINE_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE0_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE0_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE1_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE1_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE2_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE2_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE3_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE3_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE_WDR_FIRST_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_FUSION_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_FUSION_MAX_HEIGHT: u32 = 1944;
pub const VI_PHYCHN_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MAX_WIDTH: u32 = 4608;
pub const VI_PHYCHN_OFFLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_PHYCHN_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_ONLINE_MAX_WIDTH: u32 = 2048;
pub const VI_PHYCHN_ONLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_CMP_PARAM_SIZE: u32 = 152;
pub const CVI_VI_VPSS_EXTRA_BUF: u32 = 0;
pub const CVI_VI_CHN_0_BUF: u32 = 2;
pub const CVI_VI_CHN_1_BUF: u32 = 2;
pub const CVI_VI_CHN_2_BUF: u32 = 2;
pub const CVI_VI_CHN_3_BUF: u32 = 2;
pub const CVI_VI_BUF: u32 = 8;
pub const VO_MIN_CHN_WIDTH: u32 = 32;
pub const VO_MIN_CHN_HEIGHT: u32 = 32;
pub const VO_MAX_DEV_NUM: u32 = 1;
pub const VO_MAX_LAYER_NUM: u32 = 1;
pub const VO_MAX_PRIORITY: u32 = 1;
pub const VO_MAX_CHN_NUM: u32 = 1;
pub const VO_MAX_LAYER_IN_DEV: u32 = 1;
pub const VO_MAX_GRAPHICS_LAYER_NUM: u32 = 1;
pub const VO_MIN_TOLERATE: u32 = 1;
pub const VO_MAX_TOLERATE: u32 = 100000;
pub const AI_DEV_MAX_NUM: u32 = 1;
pub const AO_DEV_MIN_NUM: u32 = 0;
pub const AO_DEV_MAX_NUM: u32 = 2;
pub const AIO_MAX_NUM: u32 = 2;
pub const AENC_MAX_CHN_NUM: u32 = 3;
pub const ADEC_MAX_CHN_NUM: u32 = 3;
pub const AI_MAX_CHN_NUM: u32 = 2;
pub const AO_MAX_CHN_NUM: u32 = 1;
pub const AO_SYSCHN_CHNID: u32 = 0;
pub const VPSS_IP_NUM: u32 = 2;
pub const VPSS_DEV_0: u32 = 0;
pub const VPSS_DEV_1: u32 = 1;
pub const VPSS_MAX_GRP_NUM: u32 = 16;
pub const VPSS_ONLINE_NUM: u32 = 3;
pub const VPSS_ONLINE_GRP_0: u32 = 0;
pub const VPSS_ONLINE_GRP_1: u32 = 1;
pub const VPSS_ONLINE_GRP_2: u32 = 2;
pub const VPSS_MAX_PHY_CHN_NUM: u32 = 4;
pub const VPSS_MAX_CHN_NUM: u32 = 4;
pub const VPSS_MIN_IMAGE_WIDTH: u32 = 32;
pub const VPSS_MAX_IMAGE_WIDTH: u32 = 2880;
pub const VPSS_MAX_IMAGE_HEIGHT: u32 = 4096;
pub const VPSS_MAX_ZOOMIN: u32 = 32;
pub const VPSS_MAX_ZOOMOUT: u32 = 32;
pub const LDC_ALIGN: u32 = 64;
pub const LDC_MIN_IMAGE_WIDTH: u32 = 640;
pub const LDC_MIN_IMAGE_HEIGHT: u32 = 480;
pub const SPREAD_MIN_IMAGE_WIDTH: u32 = 640;
pub const SPREAD_MIN_IMAGE_HEIGHT: u32 = 480;
pub const GDC_IP_NUM: u32 = 1;
pub const GDC_PROC_JOB_INFO_NUM: u32 = 500;
pub const VER_X: u32 = 1;
pub const VER_Y: u32 = 0;
pub const VER_Z: u32 = 0;
pub const VER_D: &[u8; 9] = b" Release\0";
pub const CVI_INVALID_CHN: i32 = -1;
pub const CVI_INVALID_LAYER: i32 = -1;
pub const CVI_INVALID_DEV: i32 = -1;
pub const CVI_INVALID_HANDLE: i32 = -1;
pub const CVI_INVALID_VALUE: i32 = -1;
pub const CVI_INVALID_TYPE: i32 = -1;
pub const CCM_MATRIX_SIZE: u32 = 9;
pub const CCM_MATRIX_NUM: u32 = 7;
pub const VERSION_NAME_MAXLEN: u32 = 128;
pub const SRC_LENS_COEF_SEG: u32 = 2;
pub const DST_LENS_COEF_SEG: u32 = 3;
pub const SRC_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_NUM: u32 = 4;
pub const ISP_BAYER_CHN: u32 = 4;
pub const ISP_WB_GAIN_NUM: u32 = 4;
pub const ISP_CAP_CCM_NUM: u32 = 9;
pub const CVI_ERR_APPID: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const CONFIG_CVI_GDB_NO: u32 = 1;
pub const CONFIG_CVI_GDB: &[u8; 2] = b"n\0";
pub const CONFIG_CVI_LOG_TRACE_SUPPORT: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_ALL: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_LEVEL: u32 = 4;
pub const CVI_DBG_EMERG: u32 = 0;
pub const CVI_DBG_ALERT: u32 = 1;
pub const CVI_DBG_CRIT: u32 = 2;
pub const CVI_DBG_ERR: u32 = 3;
pub const CVI_DBG_WARN: u32 = 4;
pub const CVI_DBG_NOTICE: u32 = 5;
pub const CVI_DBG_INFO: u32 = 6;
pub const CVI_DBG_DEBUG: u32 = 7;
pub const VB_INVALID_POOLID: i32 = -1;
pub const VB_INVALID_HANDLE: i32 = -1;
pub const VB_STATIC_POOLID: i32 = -2;
pub const VB_MAX_COMM_POOLS: u32 = 16;
pub const VB_POOL_MAX_BLK: u32 = 128;
pub const POOL_OWNER_COMMON: i32 = -1;
pub const POOL_OWNER_PRIVATE: i32 = -2;
pub const MAX_VB_POOL_NAME_LEN: u32 = 32;
pub const VB_SUPPLEMENT_JPEG_MASK: u32 = 1;
pub const VB_SUPPLEMENT_ISPINFO_MASK: u32 = 2;
pub const VB_SUPPLEMENT_MOTION_DATA_MASK: u32 = 4;
pub const VB_SUPPLEMENT_DNG_MASK: u32 = 8;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const JPEG_MARKER_ORDER_CNT: u32 = 16;
pub const CVI_VENC_STR_LEN: u32 = 255;
pub const CVI_VENC_MASK_ERR: u32 = 1;
pub const CVI_VENC_MASK_WARN: u32 = 2;
pub const CVI_VENC_MASK_INFO: u32 = 4;
pub const CVI_VENC_MASK_FLOW: u32 = 8;
pub const CVI_VENC_MASK_DBG: u32 = 16;
pub const CVI_VENC_MASK_BS: u32 = 256;
pub const CVI_VENC_MASK_SRC: u32 = 512;
pub const CVI_VENC_MASK_API: u32 = 1024;
pub const CVI_VENC_MASK_SYNC: u32 = 2048;
pub const CVI_VENC_MASK_PERF: u32 = 4096;
pub const CVI_VENC_MASK_CFG: u32 = 8192;
pub const CVI_VENC_MASK_FRC: u32 = 16384;
pub const CVI_VENC_MASK_BIND: u32 = 32768;
pub const CVI_VENC_MASK_TRACE: u32 = 65536;
pub const CVI_VENC_MASK_DUMP_YUV: u32 = 1048576;
pub const CVI_VENC_MASK_DUMP_BS: u32 = 2097152;
pub const CVI_VENC_MASK_DEBUG: u32 = 4194304;
pub const CVI_VENC_MASK_CURR: u32 = 1;
pub const CVI_H264_PROFILE_MIN: u32 = 0;
pub const CVI_H264_ENTROPY_DEFAULT: u32 = 1;
pub const CVI_H264_ENTROPY_MIN: u32 = 0;
pub const CVI_H264_ENTROPY_MAX: u32 = 1;
pub const CVI_INITIAL_DELAY_DEFAULT: u32 = 1000;
pub const CVI_INITIAL_DELAY_MIN: u32 = 10;
pub const CVI_INITIAL_DELAY_MAX: u32 = 3000;
pub const CVI_VARI_FPS_EN_DEFAULT: u32 = 0;
pub const CVI_VARI_FPS_EN_MIN: u32 = 0;
pub const CVI_VARI_FPS_EN_MAX: u32 = 1;
pub const CVI_H26X_GOP_DEFAULT: u32 = 60;
pub const CVI_H26X_GOP_MIN: u32 = 1;
pub const CVI_H26X_GOP_MAX: u32 = 3600;
pub const CVI_H26X_NORMALP_IP_QP_DELTA_DEFAULT: u32 = 2;
pub const CVI_H26X_NORMALP_IP_QP_DELTA_MIN: i32 = -10;
pub const CVI_H26X_NORMALP_IP_QP_DELTA_MAX: u32 = 30;
pub const CVI_H26X_SMARTP_BG_INTERVAL_DEFAULT: u32 = 120;
pub const CVI_H26X_SMARTP_BG_INTERVAL_MIN: u32 = 1;
pub const CVI_H26X_SMARTP_BG_INTERVAL_MAX: u32 = 65536;
pub const CVI_H26X_SMARTP_BG_QP_DELTA_DEFAULT: u32 = 2;
pub const CVI_H26X_SMARTP_BG_QP_DELTA_MIN: i32 = -10;
pub const CVI_H26X_SMARTP_BG_QP_DELTA_MAX: u32 = 30;
pub const CVI_H26X_SMARTP_VI_QP_DELTA_DEFAULT: u32 = 0;
pub const CVI_H26X_SMARTP_VI_QP_DELTA_MIN: i32 = -10;
pub const CVI_H26X_SMARTP_VI_QP_DELTA_MAX: u32 = 30;
pub const CVI_H26X_MAXIQP_DEFAULT: u32 = 51;
pub const CVI_H26X_MAXIQP_MIN: u32 = 1;
pub const CVI_H26X_MAXIQP_MAX: u32 = 51;
pub const CVI_H26X_MINIQP_DEFAULT: u32 = 1;
pub const CVI_H26X_MINIQP_MIN: u32 = 1;
pub const CVI_H26X_MINIQP_MAX: u32 = 51;
pub const CVI_H26X_MAXQP_DEFAULT: u32 = 51;
pub const CVI_H26X_MAXQP_MIN: u32 = 0;
pub const CVI_H26X_MAXQP_MAX: u32 = 51;
pub const CVI_H26X_MINQP_DEFAULT: u32 = 1;
pub const CVI_H26X_MINQP_MIN: u32 = 0;
pub const CVI_H26X_MINQP_MAX: u32 = 51;
pub const CVI_H26X_MAX_I_PROP_DEFAULT: u32 = 100;
pub const CVI_H26X_MAX_I_PROP_MIN: u32 = 1;
pub const CVI_H26X_MAX_I_PROP_MAX: u32 = 100;
pub const CVI_H26X_MIN_I_PROP_DEFAULT: u32 = 1;
pub const CVI_H26X_MIN_I_PROP_MIN: u32 = 1;
pub const CVI_H26X_MIN_I_PROP_MAX: u32 = 100;
pub const CVI_H26X_MAXBITRATE_DEFAULT: u32 = 5000;
pub const CVI_H26X_MAXBITRATE_MIN: u32 = 100;
pub const CVI_H26X_MAXBITRATE_MAX: u32 = 300000;
pub const CVI_H26X_CHANGE_POS_DEFAULT: u32 = 90;
pub const CVI_H26X_CHANGE_POS_MIN: u32 = 50;
pub const CVI_H26X_CHANGE_POS_MAX: u32 = 100;
pub const CVI_H26X_MIN_STILL_PERCENT_DEFAULT: u32 = 10;
pub const CVI_H26X_MIN_STILL_PERCENT_MIN: u32 = 1;
pub const CVI_H26X_MIN_STILL_PERCENT_MAX: u32 = 100;
pub const CVI_H26X_MAX_STILL_QP_DEFAULT: u32 = 1;
pub const CVI_H26X_MAX_STILL_QP_MIN: u32 = 0;
pub const CVI_H26X_MAX_STILL_QP_MAX: u32 = 51;
pub const CVI_H26X_MOTION_SENSITIVITY_DEFAULT: u32 = 100;
pub const CVI_H26X_MOTION_SENSITIVITY_MIN: u32 = 1;
pub const CVI_H26X_MOTION_SENSITIVITY_MAX: u32 = 1024;
pub const CVI_H26X_AVBR_FRM_LOST_OPEN_DEFAULT: u32 = 1;
pub const CVI_H26X_AVBR_FRM_LOST_OPEN_MIN: u32 = 0;
pub const CVI_H26X_AVBR_FRM_LOST_OPEN_MAX: u32 = 1;
pub const CVI_H26X_AVBR_FRM_GAP_DEFAULT: u32 = 1;
pub const CVI_H26X_AVBR_FRM_GAP_MIN: u32 = 0;
pub const CVI_H26X_AVBR_FRM_GAP_MAX: u32 = 100;
pub const CVI_H26X_AVBR_PURE_STILL_THR_DEFAULT: u32 = 4;
pub const CVI_H26X_AVBR_PURE_STILL_THR_MIN: u32 = 0;
pub const CVI_H26X_AVBR_PURE_STILL_THR_MAX: u32 = 500;
pub const CVI_H26X_INTRACOST_DEFAULT: u32 = 0;
pub const CVI_H26X_INTRACOST_MIN: u32 = 0;
pub const CVI_H26X_INTRACOST_MAX: u32 = 16383;
pub const CVI_H26X_THRDLV_DEFAULT: u32 = 2;
pub const CVI_H26X_THRDLV_MIN: u32 = 0;
pub const CVI_H26X_THRDLV_MAX: u32 = 4;
pub const CVI_H26X_BG_ENHANCE_EN_DEFAULT: u32 = 0;
pub const CVI_H26X_BG_ENHANCE_EN_MIN: u32 = 0;
pub const CVI_H26X_BG_ENHANCE_EN_MAX: u32 = 1;
pub const CVI_H26X_BG_DELTA_QP_DEFAULT: u32 = 0;
pub const CVI_H26X_BG_DELTA_QP_MIN: i32 = -8;
pub const CVI_H26X_BG_DELTA_QP_MAX: u32 = 8;
pub const CVI_H26X_ROW_QP_DELTA_DEFAULT: u32 = 1;
pub const CVI_H26X_ROW_QP_DELTA_MIN: u32 = 0;
pub const CVI_H26X_ROW_QP_DELTA_MAX: u32 = 10;
pub const CVI_H26X_SUPER_FRM_MODE_DEFAULT: u32 = 0;
pub const CVI_H26X_SUPER_FRM_MODE_MIN: u32 = 0;
pub const CVI_H26X_SUPER_FRM_MODE_MAX: u32 = 3;
pub const CVI_H26X_SUPER_I_BITS_THR_DEFAULT: u32 = 33554432;
pub const CVI_H26X_SUPER_I_BITS_THR_MIN: u32 = 1000;
pub const CVI_H26X_SUPER_I_BITS_THR_MAX: u32 = 83886080;
pub const CVI_H26X_SUPER_P_BITS_THR_DEFAULT: u32 = 33554432;
pub const CVI_H26X_SUPER_P_BITS_THR_MIN: u32 = 1000;
pub const CVI_H26X_SUPER_P_BITS_THR_MAX: u32 = 83886080;
pub const CVI_H26X_MAX_RE_ENCODE_DEFAULT: u32 = 0;
pub const CVI_H26X_MAX_RE_ENCODE_MIN: u32 = 0;
pub const CVI_H26X_MAX_RE_ENCODE_MAX: u32 = 4;
pub const CVI_H26X_ASPECT_RATIO_INFO_PRESENT_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_ASPECT_RATIO_INFO_PRESENT_FLAG_MIN: u32 = 0;
pub const CVI_H26X_ASPECT_RATIO_INFO_PRESENT_FLAG_MAX: u32 = 1;
pub const CVI_H26X_ASPECT_RATIO_IDC_DEFAULT: u32 = 1;
pub const CVI_H26X_ASPECT_RATIO_IDC_MIN: u32 = 0;
pub const CVI_H26X_ASPECT_RATIO_IDC_MAX: u32 = 255;
pub const CVI_H26X_OVERSCAN_INFO_PRESENT_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_OVERSCAN_INFO_PRESENT_FLAG_MIN: u32 = 0;
pub const CVI_H26X_OVERSCAN_INFO_PRESENT_FLAG_MAX: u32 = 1;
pub const CVI_H26X_OVERSCAN_APPROPRIATE_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_OVERSCAN_APPROPRIATE_FLAG_MIN: u32 = 0;
pub const CVI_H26X_OVERSCAN_APPROPRIATE_FLAG_MAX: u32 = 1;
pub const CVI_H26X_SAR_WIDTH_DEFAULT: u32 = 1;
pub const CVI_H26X_SAR_WIDTH_MIN: u32 = 1;
pub const CVI_H26X_SAR_WIDTH_MAX: u32 = 65535;
pub const CVI_H26X_SAR_HEIGHT_DEFAULT: u32 = 1;
pub const CVI_H26X_SAR_HEIGHT_MIN: u32 = 1;
pub const CVI_H26X_SAR_HEIGHT_MAX: u32 = 65535;
pub const CVI_H26X_TIMING_INFO_PRESENT_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_TIMING_INFO_PRESENT_FLAG_MIN: u32 = 0;
pub const CVI_H26X_TIMING_INFO_PRESENT_FLAG_MAX: u32 = 1;
pub const CVI_H264_FIXED_FRAME_RATE_FLAG_DEFAULT: u32 = 0;
pub const CVI_H264_FIXED_FRAME_RATE_FLAG_MIN: u32 = 0;
pub const CVI_H264_FIXED_FRAME_RATE_FLAG_MAX: u32 = 1;
pub const CVI_H26X_NUM_UNITS_IN_TICK_DEFAULT: u32 = 1;
pub const CVI_H26X_NUM_UNITS_IN_TICK_MIN: u32 = 1;
pub const CVI_H26X_NUM_UNITS_IN_TICK_MAX: u32 = 4294967295;
pub const CVI_H26X_TIME_SCALE_DEFAULT: u32 = 60;
pub const CVI_H26X_TIME_SCALE_MIN: u32 = 1;
pub const CVI_H26X_TIME_SCALE_MAX: u32 = 4294967295;
pub const CVI_H265_NUM_TICKS_POC_DIFF_ONE_MINUS1_DEFAULT: u32 = 1;
pub const CVI_H265_NUM_TICKS_POC_DIFF_ONE_MINUS1_MIN: u32 = 0;
pub const CVI_H265_NUM_TICKS_POC_DIFF_ONE_MINUS1_MAX: u32 = 4294967294;
pub const CVI_H26X_VIDEO_SIGNAL_TYPE_PRESENT_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_VIDEO_SIGNAL_TYPE_PRESENT_FLAG_MIN: u32 = 0;
pub const CVI_H26X_VIDEO_SIGNAL_TYPE_PRESENT_FLAG_MAX: u32 = 1;
pub const CVI_H26X_VIDEO_FORMAT_DEFAULT: u32 = 5;
pub const CVI_H26X_VIDEO_FORMAT_MIN: u32 = 0;
pub const CVI_H264_VIDEO_FORMAT_MAX: u32 = 7;
pub const CVI_H265_VIDEO_FORMAT_MAX: u32 = 5;
pub const CVI_H26X_VIDEO_FULL_RANGE_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_VIDEO_FULL_RANGE_FLAG_MIN: u32 = 0;
pub const CVI_H26X_VIDEO_FULL_RANGE_FLAG_MAX: u32 = 1;
pub const CVI_H26X_COLOUR_DESCRIPTION_PRESENT_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_COLOUR_DESCRIPTION_PRESENT_FLAG_MIN: u32 = 0;
pub const CVI_H26X_COLOUR_DESCRIPTION_PRESENT_FLAG_MAX: u32 = 1;
pub const CVI_H26X_COLOUR_PRIMARIES_DEFAULT: u32 = 2;
pub const CVI_H26X_COLOUR_PRIMARIES_MIN: u32 = 0;
pub const CVI_H26X_COLOUR_PRIMARIES_MAX: u32 = 255;
pub const CVI_H26X_TRANSFER_CHARACTERISTICS_DEFAULT: u32 = 2;
pub const CVI_H26X_TRANSFER_CHARACTERISTICS_MIN: u32 = 0;
pub const CVI_H26X_TRANSFER_CHARACTERISTICS_MAX: u32 = 255;
pub const CVI_H26X_MATRIX_COEFFICIENTS_DEFAULT: u32 = 2;
pub const CVI_H26X_MATRIX_COEFFICIENTS_MIN: u32 = 0;
pub const CVI_H26X_MATRIX_COEFFICIENTS_MAX: u32 = 255;
pub const CVI_H26X_BITSTREAM_RESTRICTION_FLAG_DEFAULT: u32 = 0;
pub const CVI_H26X_BITSTREAM_RESTRICTION_FLAG_MIN: u32 = 0;
pub const CVI_H26X_BITSTREAM_RESTRICTION_FLAG_MAX: u32 = 1;
pub const CVI_H26X_TEST_UBR_EN_DEFAULT: u32 = 0;
pub const CVI_H26X_TEST_UBR_EN_MIN: u32 = 0;
pub const CVI_H26X_TEST_UBR_EN_MAX: u32 = 1;
pub const CVI_H26X_FRAME_QP_DEFAULT: u32 = 38;
pub const CVI_H26X_FRAME_QP_MIN: u32 = 0;
pub const CVI_H26X_FRAME_QP_MAX: u32 = 51;
pub const CVI_H26X_FRAME_BITS_DEFAULT: u32 = 200000;
pub const CVI_H26X_FRAME_BITS_MIN: u32 = 1000;
pub const CVI_H26X_FRAME_BITS_MAX: u32 = 10000000;
pub const CVI_H26X_ES_BUFFER_QUEUE_DEFAULT: u32 = 1;
pub const CVI_H26X_ES_BUFFER_QUEUE_MIN: u32 = 0;
pub const CVI_H26X_ES_BUFFER_QUEUE_MAX: u32 = 1;
pub const CVI_H26X_ISO_SEND_FRAME_DEFAUL: u32 = 1;
pub const CVI_H26X_ISO_SEND_FRAME_MIN: u32 = 0;
pub const CVI_H26X_ISO_SEND_FRAME_MAX: u32 = 1;
pub const CVI_H26X_SENSOR_EN_DEFAULT: u32 = 0;
pub const CVI_H26X_SENSOR_EN_MIN: u32 = 0;
pub const CVI_H26X_SENSOR_EN_MAX: u32 = 1;
pub const DEF_STAT_TIME: i32 = -1;
pub const DEF_GOP: u32 = 30;
pub const DEF_IQP: u32 = 32;
pub const DEF_PQP: u32 = 32;
pub const DEF_VARI_FPS_EN: u32 = 0;
pub const DEF_264_GOP: u32 = 60;
pub const DEF_264_MAXIQP: u32 = 51;
pub const DEF_264_MINIQP: u32 = 1;
pub const DEF_264_MAXQP: u32 = 51;
pub const DEF_264_MINQP: u32 = 1;
pub const DEF_264_MAXBITRATE: u32 = 5000;
pub const DEF_26X_CHANGE_POS: u32 = 90;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type CVI_UCHAR = ::std::os::raw::c_uchar;
pub type CVI_U8 = ::std::os::raw::c_uchar;
pub type CVI_U16 = ::std::os::raw::c_ushort;
pub type CVI_U32 = ::std::os::raw::c_uint;
pub type CVI_HANDLE = ::std::os::raw::c_uint;
pub type CVI_S8 = ::std::os::raw::c_schar;
pub type CVI_CHAR = ::std::os::raw::c_char;
pub type CVI_S16 = ::std::os::raw::c_short;
pub type CVI_S32 = ::std::os::raw::c_int;
pub type CVI_UL = ::std::os::raw::c_ulong;
pub type CVI_SL = ::std::os::raw::c_long;
pub type CVI_FLOAT = f32;
pub type CVI_DOUBLE = f64;
pub type CVI_VOID = ::std::os::raw::c_void;
pub type CVI_BOOL = ::std::os::raw::c_uchar;
pub type CVI_U64 = u64;
pub type CVI_S64 = i64;
pub type CVI_SIZE_T = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal32 {
    pub signr: ::std::os::raw::c_uint,
    pub context: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal32"][::std::mem::size_of::<base_statesignal32>() - 8usize];
    ["Alignment of base_statesignal32"][::std::mem::align_of::<base_statesignal32>() - 4usize];
    ["Offset of field: base_statesignal32::signr"]
        [::std::mem::offset_of!(base_statesignal32, signr) - 0usize];
    ["Offset of field: base_statesignal32::context"]
        [::std::mem::offset_of!(base_statesignal32, context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal"][::std::mem::size_of::<base_statesignal>() - 16usize];
    ["Alignment of base_statesignal"][::std::mem::align_of::<base_statesignal>() - 8usize];
    ["Offset of field: base_statesignal::signr"]
        [::std::mem::offset_of!(base_statesignal, signr) - 0usize];
    ["Offset of field: base_statesignal::context"]
        [::std::mem::offset_of!(base_statesignal, context) - 8usize];
};
pub const base_state_e_BASE_STATE_NORMAL: base_state_e = 0;
pub const base_state_e_BASE_STATE_SUSPEND_PREPARE: base_state_e = 1;
pub const base_state_e_BASE_STATE_SUSPEND: base_state_e = 2;
pub const base_state_e_BASE_STATE_RESUME: base_state_e = 3;
pub const base_state_e_BASE_STATE_NUM: base_state_e = 4;
pub type base_state_e = ::std::os::raw::c_uint;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822: ENUM_CHIP_ID = 0;
pub const ENUM_CHIP_ID_E_CHIPID_CV1832: ENUM_CHIP_ID = 1;
pub const ENUM_CHIP_ID_E_CHIPID_CV1835: ENUM_CHIP_ID = 2;
pub const ENUM_CHIP_ID_E_CHIPID_CV1838: ENUM_CHIP_ID = 3;
pub const ENUM_CHIP_ID_E_CHIPID_CV1829: ENUM_CHIP_ID = 4;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826: ENUM_CHIP_ID = 5;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821: ENUM_CHIP_ID = 6;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820: ENUM_CHIP_ID = 7;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823: ENUM_CHIP_ID = 8;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825: ENUM_CHIP_ID = 9;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820A: ENUM_CHIP_ID = 10;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821A: ENUM_CHIP_ID = 11;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822A: ENUM_CHIP_ID = 12;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823A: ENUM_CHIP_ID = 13;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825A: ENUM_CHIP_ID = 14;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826A: ENUM_CHIP_ID = 15;
pub const ENUM_CHIP_ID_E_CHIPID_CV1810C: ENUM_CHIP_ID = 16;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811C: ENUM_CHIP_ID = 17;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812C: ENUM_CHIP_ID = 18;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811H: ENUM_CHIP_ID = 19;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812H: ENUM_CHIP_ID = 20;
pub const ENUM_CHIP_ID_E_CHIPID_CV1813H: ENUM_CHIP_ID = 21;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800B: ENUM_CHIP_ID = 22;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801B: ENUM_CHIP_ID = 23;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800C: ENUM_CHIP_ID = 24;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801C: ENUM_CHIP_ID = 25;
pub type ENUM_CHIP_ID = ::std::os::raw::c_uint;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U01: ENUM_CHIP_VERSION = 1;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U02: ENUM_CHIP_VERSION = 2;
pub type ENUM_CHIP_VERSION = ::std::os::raw::c_uint;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_COLDBOOT: ENUM_CHIP_PWR_ON_REASON = 1;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WDT: ENUM_CHIP_PWR_ON_REASON = 2;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_SUSPEND: ENUM_CHIP_PWR_ON_REASON = 3;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WARM_RST: ENUM_CHIP_PWR_ON_REASON = 4;
pub type ENUM_CHIP_PWR_ON_REASON = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct vb_ext_control {
    pub id: __u32,
    pub reserved: [__u32; 1usize],
    pub __bindgen_anon_1: vb_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vb_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control__bindgen_ty_1"]
        [::std::mem::size_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Alignment of vb_ext_control__bindgen_ty_1"]
        [::std::mem::align_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value64"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value64) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control"][::std::mem::size_of::<vb_ext_control>() - 16usize];
    ["Alignment of vb_ext_control"][::std::mem::align_of::<vb_ext_control>() - 1usize];
    ["Offset of field: vb_ext_control::id"][::std::mem::offset_of!(vb_ext_control, id) - 0usize];
    ["Offset of field: vb_ext_control::reserved"]
        [::std::mem::offset_of!(vb_ext_control, reserved) - 4usize];
};
pub type AI_CHN = CVI_S32;
pub type AO_CHN = CVI_S32;
pub type AENC_CHN = CVI_S32;
pub type ADEC_CHN = CVI_S32;
pub type AUDIO_DEV = CVI_S32;
pub type VI_DEV = CVI_S32;
pub type VI_PIPE = CVI_S32;
pub type VI_CHN = CVI_S32;
pub type VO_DEV = CVI_S32;
pub type VO_LAYER = CVI_S32;
pub type VO_CHN = CVI_S32;
pub type GRAPHIC_LAYER = CVI_S32;
pub type VENC_CHN = CVI_S32;
pub type VDEC_CHN = CVI_S32;
pub type ISP_DEV = CVI_S32;
pub type SENSOR_ID = CVI_S32;
pub type MIPI_DEV = CVI_S32;
pub type SLAVE_DEV = CVI_S32;
pub type VPSS_GRP = CVI_S32;
pub type VPSS_CHN = CVI_S32;
pub const _MOD_ID_E_CVI_ID_BASE: _MOD_ID_E = 0;
pub const _MOD_ID_E_CVI_ID_VB: _MOD_ID_E = 1;
pub const _MOD_ID_E_CVI_ID_SYS: _MOD_ID_E = 2;
pub const _MOD_ID_E_CVI_ID_RGN: _MOD_ID_E = 3;
pub const _MOD_ID_E_CVI_ID_CHNL: _MOD_ID_E = 4;
pub const _MOD_ID_E_CVI_ID_VDEC: _MOD_ID_E = 5;
pub const _MOD_ID_E_CVI_ID_VPSS: _MOD_ID_E = 6;
pub const _MOD_ID_E_CVI_ID_VENC: _MOD_ID_E = 7;
pub const _MOD_ID_E_CVI_ID_H264E: _MOD_ID_E = 8;
pub const _MOD_ID_E_CVI_ID_JPEGE: _MOD_ID_E = 9;
pub const _MOD_ID_E_CVI_ID_MPEG4E: _MOD_ID_E = 10;
pub const _MOD_ID_E_CVI_ID_H265E: _MOD_ID_E = 11;
pub const _MOD_ID_E_CVI_ID_JPEGD: _MOD_ID_E = 12;
pub const _MOD_ID_E_CVI_ID_VO: _MOD_ID_E = 13;
pub const _MOD_ID_E_CVI_ID_VI: _MOD_ID_E = 14;
pub const _MOD_ID_E_CVI_ID_DIS: _MOD_ID_E = 15;
pub const _MOD_ID_E_CVI_ID_RC: _MOD_ID_E = 16;
pub const _MOD_ID_E_CVI_ID_AIO: _MOD_ID_E = 17;
pub const _MOD_ID_E_CVI_ID_AI: _MOD_ID_E = 18;
pub const _MOD_ID_E_CVI_ID_AO: _MOD_ID_E = 19;
pub const _MOD_ID_E_CVI_ID_AENC: _MOD_ID_E = 20;
pub const _MOD_ID_E_CVI_ID_ADEC: _MOD_ID_E = 21;
pub const _MOD_ID_E_CVI_ID_AUD: _MOD_ID_E = 22;
pub const _MOD_ID_E_CVI_ID_VPU: _MOD_ID_E = 23;
pub const _MOD_ID_E_CVI_ID_ISP: _MOD_ID_E = 24;
pub const _MOD_ID_E_CVI_ID_IVE: _MOD_ID_E = 25;
pub const _MOD_ID_E_CVI_ID_USER: _MOD_ID_E = 26;
pub const _MOD_ID_E_CVI_ID_PROC: _MOD_ID_E = 27;
pub const _MOD_ID_E_CVI_ID_LOG: _MOD_ID_E = 28;
pub const _MOD_ID_E_CVI_ID_H264D: _MOD_ID_E = 29;
pub const _MOD_ID_E_CVI_ID_GDC: _MOD_ID_E = 30;
pub const _MOD_ID_E_CVI_ID_PHOTO: _MOD_ID_E = 31;
pub const _MOD_ID_E_CVI_ID_FB: _MOD_ID_E = 32;
pub const _MOD_ID_E_CVI_ID_BUTT: _MOD_ID_E = 33;
pub type _MOD_ID_E = ::std::os::raw::c_uint;
pub use self::_MOD_ID_E as MOD_ID_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_CHN_S {
    pub enModId: MOD_ID_E,
    pub s32DevId: CVI_S32,
    pub s32ChnId: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_CHN_S"][::std::mem::size_of::<_MMF_CHN_S>() - 12usize];
    ["Alignment of _MMF_CHN_S"][::std::mem::align_of::<_MMF_CHN_S>() - 4usize];
    ["Offset of field: _MMF_CHN_S::enModId"][::std::mem::offset_of!(_MMF_CHN_S, enModId) - 0usize];
    ["Offset of field: _MMF_CHN_S::s32DevId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32DevId) - 4usize];
    ["Offset of field: _MMF_CHN_S::s32ChnId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32ChnId) - 8usize];
};
pub type MMF_CHN_S = _MMF_CHN_S;
pub const PAYLOAD_TYPE_E_PT_PCMU: PAYLOAD_TYPE_E = 0;
pub const PAYLOAD_TYPE_E_PT_1016: PAYLOAD_TYPE_E = 1;
pub const PAYLOAD_TYPE_E_PT_G721: PAYLOAD_TYPE_E = 2;
pub const PAYLOAD_TYPE_E_PT_GSM: PAYLOAD_TYPE_E = 3;
pub const PAYLOAD_TYPE_E_PT_G723: PAYLOAD_TYPE_E = 4;
pub const PAYLOAD_TYPE_E_PT_DVI4_8K: PAYLOAD_TYPE_E = 5;
pub const PAYLOAD_TYPE_E_PT_DVI4_16K: PAYLOAD_TYPE_E = 6;
pub const PAYLOAD_TYPE_E_PT_LPC: PAYLOAD_TYPE_E = 7;
pub const PAYLOAD_TYPE_E_PT_PCMA: PAYLOAD_TYPE_E = 8;
pub const PAYLOAD_TYPE_E_PT_G722: PAYLOAD_TYPE_E = 9;
pub const PAYLOAD_TYPE_E_PT_S16BE_STEREO: PAYLOAD_TYPE_E = 10;
pub const PAYLOAD_TYPE_E_PT_S16BE_MONO: PAYLOAD_TYPE_E = 11;
pub const PAYLOAD_TYPE_E_PT_QCELP: PAYLOAD_TYPE_E = 12;
pub const PAYLOAD_TYPE_E_PT_CN: PAYLOAD_TYPE_E = 13;
pub const PAYLOAD_TYPE_E_PT_MPEGAUDIO: PAYLOAD_TYPE_E = 14;
pub const PAYLOAD_TYPE_E_PT_G728: PAYLOAD_TYPE_E = 15;
pub const PAYLOAD_TYPE_E_PT_DVI4_3: PAYLOAD_TYPE_E = 16;
pub const PAYLOAD_TYPE_E_PT_DVI4_4: PAYLOAD_TYPE_E = 17;
pub const PAYLOAD_TYPE_E_PT_G729: PAYLOAD_TYPE_E = 18;
pub const PAYLOAD_TYPE_E_PT_G711A: PAYLOAD_TYPE_E = 19;
pub const PAYLOAD_TYPE_E_PT_G711U: PAYLOAD_TYPE_E = 20;
pub const PAYLOAD_TYPE_E_PT_G726: PAYLOAD_TYPE_E = 21;
pub const PAYLOAD_TYPE_E_PT_G729A: PAYLOAD_TYPE_E = 22;
pub const PAYLOAD_TYPE_E_PT_LPCM: PAYLOAD_TYPE_E = 23;
pub const PAYLOAD_TYPE_E_PT_CelB: PAYLOAD_TYPE_E = 25;
pub const PAYLOAD_TYPE_E_PT_JPEG: PAYLOAD_TYPE_E = 26;
pub const PAYLOAD_TYPE_E_PT_CUSM: PAYLOAD_TYPE_E = 27;
pub const PAYLOAD_TYPE_E_PT_NV: PAYLOAD_TYPE_E = 28;
pub const PAYLOAD_TYPE_E_PT_PICW: PAYLOAD_TYPE_E = 29;
pub const PAYLOAD_TYPE_E_PT_CPV: PAYLOAD_TYPE_E = 30;
pub const PAYLOAD_TYPE_E_PT_H261: PAYLOAD_TYPE_E = 31;
pub const PAYLOAD_TYPE_E_PT_MPEGVIDEO: PAYLOAD_TYPE_E = 32;
pub const PAYLOAD_TYPE_E_PT_MPEG2TS: PAYLOAD_TYPE_E = 33;
pub const PAYLOAD_TYPE_E_PT_H263: PAYLOAD_TYPE_E = 34;
pub const PAYLOAD_TYPE_E_PT_SPEG: PAYLOAD_TYPE_E = 35;
pub const PAYLOAD_TYPE_E_PT_MPEG2VIDEO: PAYLOAD_TYPE_E = 36;
pub const PAYLOAD_TYPE_E_PT_AAC: PAYLOAD_TYPE_E = 37;
pub const PAYLOAD_TYPE_E_PT_WMA9STD: PAYLOAD_TYPE_E = 38;
pub const PAYLOAD_TYPE_E_PT_HEAAC: PAYLOAD_TYPE_E = 39;
pub const PAYLOAD_TYPE_E_PT_PCM_VOICE: PAYLOAD_TYPE_E = 40;
pub const PAYLOAD_TYPE_E_PT_PCM_AUDIO: PAYLOAD_TYPE_E = 41;
pub const PAYLOAD_TYPE_E_PT_MP3: PAYLOAD_TYPE_E = 43;
pub const PAYLOAD_TYPE_E_PT_ADPCMA: PAYLOAD_TYPE_E = 49;
pub const PAYLOAD_TYPE_E_PT_AEC: PAYLOAD_TYPE_E = 50;
pub const PAYLOAD_TYPE_E_PT_X_LD: PAYLOAD_TYPE_E = 95;
pub const PAYLOAD_TYPE_E_PT_H264: PAYLOAD_TYPE_E = 96;
pub const PAYLOAD_TYPE_E_PT_D_GSM_HR: PAYLOAD_TYPE_E = 200;
pub const PAYLOAD_TYPE_E_PT_D_GSM_EFR: PAYLOAD_TYPE_E = 201;
pub const PAYLOAD_TYPE_E_PT_D_L8: PAYLOAD_TYPE_E = 202;
pub const PAYLOAD_TYPE_E_PT_D_RED: PAYLOAD_TYPE_E = 203;
pub const PAYLOAD_TYPE_E_PT_D_VDVI: PAYLOAD_TYPE_E = 204;
pub const PAYLOAD_TYPE_E_PT_D_BT656: PAYLOAD_TYPE_E = 220;
pub const PAYLOAD_TYPE_E_PT_D_H263_1998: PAYLOAD_TYPE_E = 221;
pub const PAYLOAD_TYPE_E_PT_D_MP1S: PAYLOAD_TYPE_E = 222;
pub const PAYLOAD_TYPE_E_PT_D_MP2P: PAYLOAD_TYPE_E = 223;
pub const PAYLOAD_TYPE_E_PT_D_BMPEG: PAYLOAD_TYPE_E = 224;
pub const PAYLOAD_TYPE_E_PT_MP4VIDEO: PAYLOAD_TYPE_E = 230;
pub const PAYLOAD_TYPE_E_PT_MP4AUDIO: PAYLOAD_TYPE_E = 237;
pub const PAYLOAD_TYPE_E_PT_VC1: PAYLOAD_TYPE_E = 238;
pub const PAYLOAD_TYPE_E_PT_JVC_ASF: PAYLOAD_TYPE_E = 255;
pub const PAYLOAD_TYPE_E_PT_D_AVI: PAYLOAD_TYPE_E = 256;
pub const PAYLOAD_TYPE_E_PT_DIVX3: PAYLOAD_TYPE_E = 257;
pub const PAYLOAD_TYPE_E_PT_AVS: PAYLOAD_TYPE_E = 258;
pub const PAYLOAD_TYPE_E_PT_REAL8: PAYLOAD_TYPE_E = 259;
pub const PAYLOAD_TYPE_E_PT_REAL9: PAYLOAD_TYPE_E = 260;
pub const PAYLOAD_TYPE_E_PT_VP6: PAYLOAD_TYPE_E = 261;
pub const PAYLOAD_TYPE_E_PT_VP6F: PAYLOAD_TYPE_E = 262;
pub const PAYLOAD_TYPE_E_PT_VP6A: PAYLOAD_TYPE_E = 263;
pub const PAYLOAD_TYPE_E_PT_SORENSON: PAYLOAD_TYPE_E = 264;
pub const PAYLOAD_TYPE_E_PT_H265: PAYLOAD_TYPE_E = 265;
pub const PAYLOAD_TYPE_E_PT_VP8: PAYLOAD_TYPE_E = 266;
pub const PAYLOAD_TYPE_E_PT_MVC: PAYLOAD_TYPE_E = 267;
pub const PAYLOAD_TYPE_E_PT_PNG: PAYLOAD_TYPE_E = 268;
pub const PAYLOAD_TYPE_E_PT_AMR: PAYLOAD_TYPE_E = 1001;
pub const PAYLOAD_TYPE_E_PT_MJPEG: PAYLOAD_TYPE_E = 1002;
pub const PAYLOAD_TYPE_E_PT_BUTT: PAYLOAD_TYPE_E = 1003;
pub type PAYLOAD_TYPE_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_VERSION_S {
    pub version: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_VERSION_S"][::std::mem::size_of::<_MMF_VERSION_S>() - 128usize];
    ["Alignment of _MMF_VERSION_S"][::std::mem::align_of::<_MMF_VERSION_S>() - 1usize];
    ["Offset of field: _MMF_VERSION_S::version"]
        [::std::mem::offset_of!(_MMF_VERSION_S, version) - 0usize];
};
pub type MMF_VERSION_S = _MMF_VERSION_S;
pub const _OPERATION_MODE_E_OPERATION_MODE_AUTO: _OPERATION_MODE_E = 0;
pub const _OPERATION_MODE_E_OPERATION_MODE_MANUAL: _OPERATION_MODE_E = 1;
pub const _OPERATION_MODE_E_OPERATION_MODE_BUTT: _OPERATION_MODE_E = 2;
pub type _OPERATION_MODE_E = ::std::os::raw::c_uint;
pub use self::_OPERATION_MODE_E as OPERATION_MODE_E;
pub const _ROTATION_E_ROTATION_0: _ROTATION_E = 0;
pub const _ROTATION_E_ROTATION_90: _ROTATION_E = 1;
pub const _ROTATION_E_ROTATION_180: _ROTATION_E = 2;
pub const _ROTATION_E_ROTATION_270: _ROTATION_E = 3;
pub const _ROTATION_E_ROTATION_XY_FLIP: _ROTATION_E = 4;
pub const _ROTATION_E_ROTATION_MAX: _ROTATION_E = 5;
pub type _ROTATION_E = ::std::os::raw::c_uint;
pub use self::_ROTATION_E as ROTATION_E;
pub const _VB_SOURCE_E_VB_SOURCE_COMMON: _VB_SOURCE_E = 0;
pub const _VB_SOURCE_E_VB_SOURCE_MODULE: _VB_SOURCE_E = 1;
pub const _VB_SOURCE_E_VB_SOURCE_PRIVATE: _VB_SOURCE_E = 2;
pub const _VB_SOURCE_E_VB_SOURCE_USER: _VB_SOURCE_E = 3;
pub const _VB_SOURCE_E_VB_SOURCE_BUTT: _VB_SOURCE_E = 4;
pub type _VB_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VB_SOURCE_E as VB_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BORDER_S {
    pub u32TopWidth: CVI_U32,
    pub u32BottomWidth: CVI_U32,
    pub u32LeftWidth: CVI_U32,
    pub u32RightWidth: CVI_U32,
    pub u32Color: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BORDER_S"][::std::mem::size_of::<_BORDER_S>() - 20usize];
    ["Alignment of _BORDER_S"][::std::mem::align_of::<_BORDER_S>() - 4usize];
    ["Offset of field: _BORDER_S::u32TopWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32TopWidth) - 0usize];
    ["Offset of field: _BORDER_S::u32BottomWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32BottomWidth) - 4usize];
    ["Offset of field: _BORDER_S::u32LeftWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32LeftWidth) - 8usize];
    ["Offset of field: _BORDER_S::u32RightWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32RightWidth) - 12usize];
    ["Offset of field: _BORDER_S::u32Color"][::std::mem::offset_of!(_BORDER_S, u32Color) - 16usize];
};
pub type BORDER_S = _BORDER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINT_S"][::std::mem::size_of::<_POINT_S>() - 8usize];
    ["Alignment of _POINT_S"][::std::mem::align_of::<_POINT_S>() - 4usize];
    ["Offset of field: _POINT_S::s32X"][::std::mem::offset_of!(_POINT_S, s32X) - 0usize];
    ["Offset of field: _POINT_S::s32Y"][::std::mem::offset_of!(_POINT_S, s32Y) - 4usize];
};
pub type POINT_S = _POINT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SIZE_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SIZE_S"][::std::mem::size_of::<_SIZE_S>() - 8usize];
    ["Alignment of _SIZE_S"][::std::mem::align_of::<_SIZE_S>() - 4usize];
    ["Offset of field: _SIZE_S::u32Width"][::std::mem::offset_of!(_SIZE_S, u32Width) - 0usize];
    ["Offset of field: _SIZE_S::u32Height"][::std::mem::offset_of!(_SIZE_S, u32Height) - 4usize];
};
pub type SIZE_S = _SIZE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RECT_S"][::std::mem::size_of::<_RECT_S>() - 16usize];
    ["Alignment of _RECT_S"][::std::mem::align_of::<_RECT_S>() - 4usize];
    ["Offset of field: _RECT_S::s32X"][::std::mem::offset_of!(_RECT_S, s32X) - 0usize];
    ["Offset of field: _RECT_S::s32Y"][::std::mem::offset_of!(_RECT_S, s32Y) - 4usize];
    ["Offset of field: _RECT_S::u32Width"][::std::mem::offset_of!(_RECT_S, u32Width) - 8usize];
    ["Offset of field: _RECT_S::u32Height"][::std::mem::offset_of!(_RECT_S, u32Height) - 12usize];
};
pub type RECT_S = _RECT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_REGION_INFO_S {
    pub u32RegionNum: CVI_U32,
    pub pstRegion: *mut RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_REGION_INFO_S"][::std::mem::size_of::<_VIDEO_REGION_INFO_S>() - 16usize];
    ["Alignment of _VIDEO_REGION_INFO_S"][::std::mem::align_of::<_VIDEO_REGION_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::u32RegionNum"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, u32RegionNum) - 0usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::pstRegion"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, pstRegion) - 8usize];
};
pub type VIDEO_REGION_INFO_S = _VIDEO_REGION_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CROP_INFO_S"][::std::mem::size_of::<_CROP_INFO_S>() - 20usize];
    ["Alignment of _CROP_INFO_S"][::std::mem::align_of::<_CROP_INFO_S>() - 4usize];
    ["Offset of field: _CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _CROP_INFO_S::stRect"]
        [::std::mem::offset_of!(_CROP_INFO_S, stRect) - 4usize];
};
pub type CROP_INFO_S = _CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAME_RATE_CTRL_S {
    pub s32SrcFrameRate: CVI_S32,
    pub s32DstFrameRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FRAME_RATE_CTRL_S"][::std::mem::size_of::<_FRAME_RATE_CTRL_S>() - 8usize];
    ["Alignment of _FRAME_RATE_CTRL_S"][::std::mem::align_of::<_FRAME_RATE_CTRL_S>() - 4usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32SrcFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32SrcFrameRate) - 0usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32DstFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32DstFrameRate) - 4usize];
};
pub type FRAME_RATE_CTRL_S = _FRAME_RATE_CTRL_S;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_NONE: _ASPECT_RATIO_E = 0;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_AUTO: _ASPECT_RATIO_E = 1;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MANUAL: _ASPECT_RATIO_E = 2;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MAX: _ASPECT_RATIO_E = 3;
pub type _ASPECT_RATIO_E = ::std::os::raw::c_uint;
pub use self::_ASPECT_RATIO_E as ASPECT_RATIO_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASPECT_RATIO_S {
    pub enMode: ASPECT_RATIO_E,
    pub bEnableBgColor: CVI_BOOL,
    pub u32BgColor: CVI_U32,
    pub stVideoRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ASPECT_RATIO_S"][::std::mem::size_of::<_ASPECT_RATIO_S>() - 28usize];
    ["Alignment of _ASPECT_RATIO_S"][::std::mem::align_of::<_ASPECT_RATIO_S>() - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::enMode"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, enMode) - 0usize];
    ["Offset of field: _ASPECT_RATIO_S::bEnableBgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, bEnableBgColor) - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::u32BgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, u32BgColor) - 8usize];
    ["Offset of field: _ASPECT_RATIO_S::stVideoRect"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, stVideoRect) - 12usize];
};
pub type ASPECT_RATIO_S = _ASPECT_RATIO_S;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888: _PIXEL_FORMAT_E = 0;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888: _PIXEL_FORMAT_E = 1;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888_PLANAR: _PIXEL_FORMAT_E = 2;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888_PLANAR: _PIXEL_FORMAT_E = 3;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_1555: _PIXEL_FORMAT_E = 4;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_4444: _PIXEL_FORMAT_E = 5;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_8888: _PIXEL_FORMAT_E = 6;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_8BPP: _PIXEL_FORMAT_E = 7;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_10BPP: _PIXEL_FORMAT_E = 8;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_12BPP: _PIXEL_FORMAT_E = 9;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_14BPP: _PIXEL_FORMAT_E = 10;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_16BPP: _PIXEL_FORMAT_E = 11;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_422: _PIXEL_FORMAT_E = 12;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_420: _PIXEL_FORMAT_E = 13;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_444: _PIXEL_FORMAT_E = 14;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_400: _PIXEL_FORMAT_E = 15;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888: _PIXEL_FORMAT_E = 16;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888_PLANAR: _PIXEL_FORMAT_E = 17;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV12: _PIXEL_FORMAT_E = 18;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV21: _PIXEL_FORMAT_E = 19;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV16: _PIXEL_FORMAT_E = 20;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV61: _PIXEL_FORMAT_E = 21;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUYV: _PIXEL_FORMAT_E = 22;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UYVY: _PIXEL_FORMAT_E = 23;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YVYU: _PIXEL_FORMAT_E = 24;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_VYUY: _PIXEL_FORMAT_E = 25;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C1: _PIXEL_FORMAT_E = 32;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C3_PLANAR: _PIXEL_FORMAT_E = 33;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C1: _PIXEL_FORMAT_E = 34;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C3_PLANAR: _PIXEL_FORMAT_E = 35;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C1: _PIXEL_FORMAT_E = 36;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C3_PLANAR: _PIXEL_FORMAT_E = 37;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C1: _PIXEL_FORMAT_E = 38;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C3_PLANAR: _PIXEL_FORMAT_E = 39;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C1: _PIXEL_FORMAT_E = 40;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C3_PLANAR: _PIXEL_FORMAT_E = 41;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C1: _PIXEL_FORMAT_E = 42;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C3_PLANAR: _PIXEL_FORMAT_E = 43;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C1: _PIXEL_FORMAT_E = 44;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C3_PLANAR: _PIXEL_FORMAT_E = 45;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C1: _PIXEL_FORMAT_E = 46;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C3_PLANAR: _PIXEL_FORMAT_E = 47;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_8BIT_MODE: _PIXEL_FORMAT_E = 48;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_MAX: _PIXEL_FORMAT_E = 49;
pub type _PIXEL_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_PIXEL_FORMAT_E as PIXEL_FORMAT_E;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR: _VIDEO_FORMAT_E = 0;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_MAX: _VIDEO_FORMAT_E = 1;
pub type _VIDEO_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_FORMAT_E as VIDEO_FORMAT_E;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_NONE: _COMPRESS_MODE_E = 0;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_TILE: _COMPRESS_MODE_E = 1;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_LINE: _COMPRESS_MODE_E = 2;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_FRAME: _COMPRESS_MODE_E = 3;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_BUTT: _COMPRESS_MODE_E = 4;
pub type _COMPRESS_MODE_E = ::std::os::raw::c_uint;
pub use self::_COMPRESS_MODE_E as COMPRESS_MODE_E;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_BG: _BAYER_FORMAT_E = 0;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GB: _BAYER_FORMAT_E = 1;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GR: _BAYER_FORMAT_E = 2;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_RG: _BAYER_FORMAT_E = 3;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_MAX: _BAYER_FORMAT_E = 4;
pub type _BAYER_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_BAYER_FORMAT_E as BAYER_FORMAT_E;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PREVIEW: _VIDEO_DISPLAY_MODE_E = 0;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PLAYBACK: _VIDEO_DISPLAY_MODE_E = 1;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_MAX: _VIDEO_DISPLAY_MODE_E = 2;
pub type _VIDEO_DISPLAY_MODE_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_DISPLAY_MODE_E as VIDEO_DISPLAY_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FRAME_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub au32Ratio: [CVI_U32; 3usize],
    pub u32IspNrStrength: CVI_U32,
    pub u32FNumber: CVI_U32,
    pub u32SensorID: CVI_U32,
    pub u32SensorMode: CVI_U32,
    pub u32HmaxTimes: CVI_U32,
    pub u32VcNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FRAME_INFO_S"][::std::mem::size_of::<_ISP_FRAME_INFO_S>() - 56usize];
    ["Alignment of _ISP_FRAME_INFO_S"][::std::mem::align_of::<_ISP_FRAME_INFO_S>() - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ExposureTime) - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspDgain) - 8usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Again"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Again) - 12usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Dgain) - 16usize];
    ["Offset of field: _ISP_FRAME_INFO_S::au32Ratio"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, au32Ratio) - 20usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspNrStrength"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspNrStrength) - 32usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32FNumber"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32FNumber) - 36usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorID"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorID) - 40usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorMode"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorMode) - 44usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32HmaxTimes) - 48usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32VcNum"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32VcNum) - 52usize];
};
pub type ISP_FRAME_INFO_S = _ISP_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_HDR_INFO_S {
    pub u32ColorTemp: CVI_U32,
    pub au16CCM: [CVI_U16; 9usize],
    pub u8Saturation: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_HDR_INFO_S"][::std::mem::size_of::<_ISP_HDR_INFO_S>() - 24usize];
    ["Alignment of _ISP_HDR_INFO_S"][::std::mem::align_of::<_ISP_HDR_INFO_S>() - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u32ColorTemp"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u32ColorTemp) - 0usize];
    ["Offset of field: _ISP_HDR_INFO_S::au16CCM"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, au16CCM) - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u8Saturation) - 22usize];
};
pub type ISP_HDR_INFO_S = _ISP_HDR_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ATTACH_INFO_S {
    pub stIspHdr: ISP_HDR_INFO_S,
    pub u32ISO: CVI_U32,
    pub u8SnsWDRMode: *mut CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ATTACH_INFO_S"][::std::mem::size_of::<_ISP_ATTACH_INFO_S>() - 40usize];
    ["Alignment of _ISP_ATTACH_INFO_S"][::std::mem::align_of::<_ISP_ATTACH_INFO_S>() - 8usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::stIspHdr"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, stIspHdr) - 0usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u32ISO) - 24usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u8SnsWDRMode"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u8SnsWDRMode) - 32usize];
};
pub type ISP_ATTACH_INFO_S = _ISP_ATTACH_INFO_S;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_FLASH: _FRAME_FLAG_E = 1;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_CUR: _FRAME_FLAG_E = 2;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_REF: _FRAME_FLAG_E = 4;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_END: _FRAME_FLAG_E = -2147483648;
pub const _FRAME_FLAG_E_FRAME_FLAG_MAX: _FRAME_FLAG_E = -2147483647;
pub type _FRAME_FLAG_E = ::std::os::raw::c_int;
pub use self::_FRAME_FLAG_E as FRAME_FLAG_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CONFIG_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub au32WhiteBalanceGain: [CVI_U32; 4usize],
    pub u32ColorTemperature: CVI_U32,
    pub au16CapCCM: [CVI_U16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CONFIG_INFO_S"][::std::mem::size_of::<_ISP_CONFIG_INFO_S>() - 52usize];
    ["Alignment of _ISP_CONFIG_INFO_S"][::std::mem::align_of::<_ISP_CONFIG_INFO_S>() - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32IspDgain) - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ExposureTime) - 8usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au32WhiteBalanceGain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au32WhiteBalanceGain) - 12usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ColorTemperature"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ColorTemperature) - 28usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au16CapCCM"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au16CapCCM) - 32usize];
};
pub type ISP_CONFIG_INFO_S = _ISP_CONFIG_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_SUPPLEMENT_S {
    pub u64JpegDCFPhyAddr: CVI_U64,
    pub u64IspInfoPhyAddr: CVI_U64,
    pub u64LowDelayPhyAddr: CVI_U64,
    pub u64FrameDNGPhyAddr: CVI_U64,
    pub pJpegDCFVirAddr: *mut CVI_VOID,
    pub pIspInfoVirAddr: *mut CVI_VOID,
    pub pLowDelayVirAddr: *mut CVI_VOID,
    pub pFrameDNGVirAddr: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_SUPPLEMENT_S"][::std::mem::size_of::<_VIDEO_SUPPLEMENT_S>() - 64usize];
    ["Alignment of _VIDEO_SUPPLEMENT_S"][::std::mem::align_of::<_VIDEO_SUPPLEMENT_S>() - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64JpegDCFPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64JpegDCFPhyAddr) - 0usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64IspInfoPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64IspInfoPhyAddr) - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64LowDelayPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64LowDelayPhyAddr) - 16usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64FrameDNGPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64FrameDNGPhyAddr) - 24usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pJpegDCFVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pJpegDCFVirAddr) - 32usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pIspInfoVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pIspInfoVirAddr) - 40usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pLowDelayVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pLowDelayVirAddr) - 48usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pFrameDNGVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pFrameDNGVirAddr) - 56usize];
};
pub type VIDEO_SUPPLEMENT_S = _VIDEO_SUPPLEMENT_S;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT601: _COLOR_GAMUT_E = 0;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT709: _COLOR_GAMUT_E = 1;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT2020: _COLOR_GAMUT_E = 2;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_USER: _COLOR_GAMUT_E = 3;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_MAX: _COLOR_GAMUT_E = 4;
pub type _COLOR_GAMUT_E = ::std::os::raw::c_uint;
pub use self::_COLOR_GAMUT_E as COLOR_GAMUT_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLORGAMMUT_INFO_S {
    pub enColorGamut: COLOR_GAMUT_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLORGAMMUT_INFO_S"][::std::mem::size_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Alignment of _ISP_COLORGAMMUT_INFO_S"]
        [::std::mem::align_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Offset of field: _ISP_COLORGAMMUT_INFO_S::enColorGamut"]
        [::std::mem::offset_of!(_ISP_COLORGAMMUT_INFO_S, enColorGamut) - 0usize];
};
pub type ISP_COLORGAMMUT_INFO_S = _ISP_COLORGAMMUT_INFO_S;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR8: _DYNAMIC_RANGE_E = 0;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR10: _DYNAMIC_RANGE_E = 1;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HDR10: _DYNAMIC_RANGE_E = 2;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HLG: _DYNAMIC_RANGE_E = 3;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SLF: _DYNAMIC_RANGE_E = 4;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_XDR: _DYNAMIC_RANGE_E = 5;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_MAX: _DYNAMIC_RANGE_E = 6;
pub type _DYNAMIC_RANGE_E = ::std::os::raw::c_uint;
pub use self::_DYNAMIC_RANGE_E as DYNAMIC_RANGE_E;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_8: _DATA_BITWIDTH_E = 0;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_10: _DATA_BITWIDTH_E = 1;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_12: _DATA_BITWIDTH_E = 2;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_14: _DATA_BITWIDTH_E = 3;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_16: _DATA_BITWIDTH_E = 4;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_MAX: _DATA_BITWIDTH_E = 5;
pub type _DATA_BITWIDTH_E = ::std::os::raw::c_uint;
pub use self::_DATA_BITWIDTH_E as DATA_BITWIDTH_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enColorGamut: COLOR_GAMUT_E,
    pub u32Stride: [CVI_U32; 3usize],
    pub u64PhyAddr: [CVI_U64; 3usize],
    pub pu8VirAddr: [*mut CVI_U8; 3usize],
    pub u32Length: [CVI_U32; 3usize],
    pub s16OffsetTop: CVI_S16,
    pub s16OffsetBottom: CVI_S16,
    pub s16OffsetLeft: CVI_S16,
    pub s16OffsetRight: CVI_S16,
    pub u32TimeRef: CVI_U32,
    pub u64PTS: CVI_U64,
    pub pPrivateData: *mut ::std::os::raw::c_void,
    pub u32FrameFlag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_S"][::std::mem::size_of::<_VIDEO_FRAME_S>() - 144usize];
    ["Alignment of _VIDEO_FRAME_S"][::std::mem::align_of::<_VIDEO_FRAME_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Width"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Width) - 0usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Height"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Height) - 4usize];
    ["Offset of field: _VIDEO_FRAME_S::enPixelFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enPixelFormat) - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::enBayerFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enBayerFormat) - 12usize];
    ["Offset of field: _VIDEO_FRAME_S::enVideoFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enVideoFormat) - 16usize];
    ["Offset of field: _VIDEO_FRAME_S::enCompressMode"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enCompressMode) - 20usize];
    ["Offset of field: _VIDEO_FRAME_S::enDynamicRange"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enDynamicRange) - 24usize];
    ["Offset of field: _VIDEO_FRAME_S::enColorGamut"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enColorGamut) - 28usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Stride"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Stride) - 32usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PhyAddr) - 48usize];
    ["Offset of field: _VIDEO_FRAME_S::pu8VirAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pu8VirAddr) - 72usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Length"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Length) - 96usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetTop"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetTop) - 108usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetBottom"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetBottom) - 110usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetLeft"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetLeft) - 112usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetRight"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetRight) - 114usize];
    ["Offset of field: _VIDEO_FRAME_S::u32TimeRef"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32TimeRef) - 116usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PTS"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PTS) - 120usize];
    ["Offset of field: _VIDEO_FRAME_S::pPrivateData"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pPrivateData) - 128usize];
    ["Offset of field: _VIDEO_FRAME_S::u32FrameFlag"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32FrameFlag) - 136usize];
};
pub type VIDEO_FRAME_S = _VIDEO_FRAME_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_INFO_S {
    pub stVFrame: VIDEO_FRAME_S,
    pub u32PoolId: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_INFO_S"][::std::mem::size_of::<_VIDEO_FRAME_INFO_S>() - 152usize];
    ["Alignment of _VIDEO_FRAME_INFO_S"][::std::mem::align_of::<_VIDEO_FRAME_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::stVFrame"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, stVFrame) - 0usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::u32PoolId"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, u32PoolId) - 144usize];
};
pub type VIDEO_FRAME_INFO_S = _VIDEO_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CAL_CONFIG_S {
    pub u32VBSize: CVI_U32,
    pub u32MainStride: CVI_U32,
    pub u32CStride: CVI_U32,
    pub u32MainSize: CVI_U32,
    pub u32MainYSize: CVI_U32,
    pub u32MainCSize: CVI_U32,
    pub u16AddrAlign: CVI_U16,
    pub plane_num: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CAL_CONFIG_S"][::std::mem::size_of::<_VB_CAL_CONFIG_S>() - 28usize];
    ["Alignment of _VB_CAL_CONFIG_S"][::std::mem::align_of::<_VB_CAL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32VBSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32VBSize) - 0usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainStride) - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32CStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32CStride) - 8usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainSize) - 12usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainYSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainYSize) - 16usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainCSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainCSize) - 20usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u16AddrAlign"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u16AddrAlign) - 24usize];
    ["Offset of field: _VB_CAL_CONFIG_S::plane_num"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, plane_num) - 26usize];
};
pub type VB_CAL_CONFIG_S = _VB_CAL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub pData: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BITMAP_S"][::std::mem::size_of::<_BITMAP_S>() - 24usize];
    ["Alignment of _BITMAP_S"][::std::mem::align_of::<_BITMAP_S>() - 8usize];
    ["Offset of field: _BITMAP_S::enPixelFormat"]
        [::std::mem::offset_of!(_BITMAP_S, enPixelFormat) - 0usize];
    ["Offset of field: _BITMAP_S::u32Width"][::std::mem::offset_of!(_BITMAP_S, u32Width) - 4usize];
    ["Offset of field: _BITMAP_S::u32Height"]
        [::std::mem::offset_of!(_BITMAP_S, u32Height) - 8usize];
    ["Offset of field: _BITMAP_S::pData"][::std::mem::offset_of!(_BITMAP_S, pData) - 16usize];
};
pub type BITMAP_S = _BITMAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDC_ATTR_S {
    pub bAspect: CVI_BOOL,
    pub s32XRatio: CVI_S32,
    pub s32YRatio: CVI_S32,
    pub s32XYRatio: CVI_S32,
    pub s32CenterXOffset: CVI_S32,
    pub s32CenterYOffset: CVI_S32,
    pub s32DistortionRatio: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDC_ATTR_S"][::std::mem::size_of::<_LDC_ATTR_S>() - 28usize];
    ["Alignment of _LDC_ATTR_S"][::std::mem::align_of::<_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _LDC_ATTR_S::bAspect"]
        [::std::mem::offset_of!(_LDC_ATTR_S, bAspect) - 0usize];
    ["Offset of field: _LDC_ATTR_S::s32XRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XRatio) - 4usize];
    ["Offset of field: _LDC_ATTR_S::s32YRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32YRatio) - 8usize];
    ["Offset of field: _LDC_ATTR_S::s32XYRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XYRatio) - 12usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterXOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterXOffset) - 16usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterYOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterYOffset) - 20usize];
    ["Offset of field: _LDC_ATTR_S::s32DistortionRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32DistortionRatio) - 24usize];
};
pub type LDC_ATTR_S = _LDC_ATTR_S;
pub const _WDR_MODE_E_WDR_MODE_NONE: _WDR_MODE_E = 0;
pub const _WDR_MODE_E_WDR_MODE_BUILT_IN: _WDR_MODE_E = 1;
pub const _WDR_MODE_E_WDR_MODE_QUDRA: _WDR_MODE_E = 2;
pub const _WDR_MODE_E_WDR_MODE_2To1_LINE: _WDR_MODE_E = 3;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME: _WDR_MODE_E = 4;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME_FULL_RATE: _WDR_MODE_E = 5;
pub const _WDR_MODE_E_WDR_MODE_3To1_LINE: _WDR_MODE_E = 6;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME: _WDR_MODE_E = 7;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME_FULL_RATE: _WDR_MODE_E = 8;
pub const _WDR_MODE_E_WDR_MODE_4To1_LINE: _WDR_MODE_E = 9;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME: _WDR_MODE_E = 10;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME_FULL_RATE: _WDR_MODE_E = 11;
pub const _WDR_MODE_E_WDR_MODE_MAX: _WDR_MODE_E = 12;
pub type _WDR_MODE_E = ::std::os::raw::c_uint;
pub use self::_WDR_MODE_E as WDR_MODE_E;
pub const _PROC_AMP_E_PROC_AMP_BRIGHTNESS: _PROC_AMP_E = 0;
pub const _PROC_AMP_E_PROC_AMP_CONTRAST: _PROC_AMP_E = 1;
pub const _PROC_AMP_E_PROC_AMP_SATURATION: _PROC_AMP_E = 2;
pub const _PROC_AMP_E_PROC_AMP_HUE: _PROC_AMP_E = 3;
pub const _PROC_AMP_E_PROC_AMP_MAX: _PROC_AMP_E = 4;
pub type _PROC_AMP_E = ::std::os::raw::c_uint;
pub use self::_PROC_AMP_E as PROC_AMP_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROC_AMP_CTRL_S {
    pub minimum: CVI_S32,
    pub maximum: CVI_S32,
    pub step: CVI_S32,
    pub default_value: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROC_AMP_CTRL_S"][::std::mem::size_of::<_PROC_AMP_CTRL_S>() - 16usize];
    ["Alignment of _PROC_AMP_CTRL_S"][::std::mem::align_of::<_PROC_AMP_CTRL_S>() - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::minimum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, minimum) - 0usize];
    ["Offset of field: _PROC_AMP_CTRL_S::maximum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, maximum) - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::step"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, step) - 8usize];
    ["Offset of field: _PROC_AMP_CTRL_S::default_value"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, default_value) - 12usize];
};
pub type PROC_AMP_CTRL_S = _PROC_AMP_CTRL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VCODEC_PERF_FPS_S {
    pub u32InFPS: CVI_U32,
    pub u32OutFPS: CVI_U32,
    pub u64HwTime: CVI_U64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VCODEC_PERF_FPS_S"][::std::mem::size_of::<_VCODEC_PERF_FPS_S>() - 16usize];
    ["Alignment of _VCODEC_PERF_FPS_S"][::std::mem::align_of::<_VCODEC_PERF_FPS_S>() - 8usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32InFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32InFPS) - 0usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32OutFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32OutFPS) - 4usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u64HwTime"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u64HwTime) - 8usize];
};
pub type VCODEC_PERF_FPS_S = _VCODEC_PERF_FPS_S;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_DEBUG: _ERR_LEVEL_E = 0;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_INFO: _ERR_LEVEL_E = 1;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_NOTICE: _ERR_LEVEL_E = 2;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_WARNING: _ERR_LEVEL_E = 3;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ERROR: _ERR_LEVEL_E = 4;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_CRIT: _ERR_LEVEL_E = 5;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ALERT: _ERR_LEVEL_E = 6;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_FATAL: _ERR_LEVEL_E = 7;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_BUTT: _ERR_LEVEL_E = 8;
pub type _ERR_LEVEL_E = ::std::os::raw::c_uint;
pub use self::_ERR_LEVEL_E as ERR_LEVEL_E;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_DEVID: _EN_ERR_CODE_E = 1;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_CHNID: _EN_ERR_CODE_E = 2;
pub const _EN_ERR_CODE_E_EN_ERR_ILLEGAL_PARAM: _EN_ERR_CODE_E = 3;
pub const _EN_ERR_CODE_E_EN_ERR_EXIST: _EN_ERR_CODE_E = 4;
pub const _EN_ERR_CODE_E_EN_ERR_UNEXIST: _EN_ERR_CODE_E = 5;
pub const _EN_ERR_CODE_E_EN_ERR_NULL_PTR: _EN_ERR_CODE_E = 6;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_CONFIG: _EN_ERR_CODE_E = 7;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_SUPPORT: _EN_ERR_CODE_E = 8;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_PERM: _EN_ERR_CODE_E = 9;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_PIPEID: _EN_ERR_CODE_E = 10;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_GRPID: _EN_ERR_CODE_E = 11;
pub const _EN_ERR_CODE_E_EN_ERR_NOMEM: _EN_ERR_CODE_E = 12;
pub const _EN_ERR_CODE_E_EN_ERR_NOBUF: _EN_ERR_CODE_E = 13;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_EMPTY: _EN_ERR_CODE_E = 14;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_FULL: _EN_ERR_CODE_E = 15;
pub const _EN_ERR_CODE_E_EN_ERR_SYS_NOTREADY: _EN_ERR_CODE_E = 16;
pub const _EN_ERR_CODE_E_EN_ERR_BADADDR: _EN_ERR_CODE_E = 17;
pub const _EN_ERR_CODE_E_EN_ERR_BUSY: _EN_ERR_CODE_E = 18;
pub const _EN_ERR_CODE_E_EN_ERR_SIZE_NOT_ENOUGH: _EN_ERR_CODE_E = 19;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_VB: _EN_ERR_CODE_E = 20;
pub const _EN_ERR_CODE_E_EN_ERR_BUTT: _EN_ERR_CODE_E = 63;
pub type _EN_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_ERR_CODE_E as EN_ERR_CODE_E;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_ENABLED: _EN_VI_ERR_CODE_E = 64;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_DISABLED: _EN_VI_ERR_CODE_E = 65;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_CHN_NOT_DISABLED: _EN_VI_ERR_CODE_E = 66;
pub const _EN_VI_ERR_CODE_E_ERR_VI_CFG_TIMEOUT: _EN_VI_ERR_CODE_E = 67;
pub const _EN_VI_ERR_CODE_E_ERR_VI_NORM_UNMATCH: _EN_VI_ERR_CODE_E = 68;
pub const _EN_VI_ERR_CODE_E_ERR_VI_INVALID_PHYCHNID: _EN_VI_ERR_CODE_E = 69;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOTBIND: _EN_VI_ERR_CODE_E = 70;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_BINDED: _EN_VI_ERR_CODE_E = 71;
pub const _EN_VI_ERR_CODE_E_ERR_VI_DIS_PROCESS_FAIL: _EN_VI_ERR_CODE_E = 72;
pub type _EN_VI_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VI_ERR_CODE_E as EN_VI_ERR_CODE_E;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 64;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 65;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_HAS_ENABLED: _EN_VOU_ERR_CODE_E = 66;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 69;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 70;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 71;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 72;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 73;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 74;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_WAIT_TIMEOUT: _EN_VOU_ERR_CODE_E = 78;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_VFRAME: _EN_VOU_ERR_CODE_E = 79;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_RECT_PARA: _EN_VOU_ERR_CODE_E = 80;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_AREA_OVERLAP: _EN_VOU_ERR_CODE_E = 101;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_LAYERID: _EN_VOU_ERR_CODE_E = 102;
pub const _EN_VOU_ERR_CODE_E_ERR_VO_BUTT: _EN_VOU_ERR_CODE_E = 103;
pub type _EN_VOU_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VOU_ERR_CODE_E as EN_VOU_ERR_CODE_E;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LOG_LEVEL_CONF_S {
    pub enModId: MOD_ID_E,
    pub s32Level: CVI_S32,
    pub cModName: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LOG_LEVEL_CONF_S"][::std::mem::size_of::<_LOG_LEVEL_CONF_S>() - 24usize];
    ["Alignment of _LOG_LEVEL_CONF_S"][::std::mem::align_of::<_LOG_LEVEL_CONF_S>() - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::enModId"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, enModId) - 0usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::s32Level"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, s32Level) - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::cModName"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, cModName) - 8usize];
};
pub type LOG_LEVEL_CONF_S = _LOG_LEVEL_CONF_S;
extern "C" {
    pub static mut log_levels: *mut CVI_S32;
}
extern "C" {
    pub static mut log_name: [*const CVI_CHAR; 8usize];
}
extern "C" {
    pub static MOD_STRING: [*const ::std::os::raw::c_char; 34usize];
}
pub const _VB_UID_E_VB_UID_VI: _VB_UID_E = 0;
pub const _VB_UID_E_VB_UID_VO: _VB_UID_E = 1;
pub const _VB_UID_E_VB_UID_VPSS: _VB_UID_E = 2;
pub const _VB_UID_E_VB_UID_VENC: _VB_UID_E = 3;
pub const _VB_UID_E_VB_UID_VDEC: _VB_UID_E = 4;
pub const _VB_UID_E_VB_UID_H265E: _VB_UID_E = 5;
pub const _VB_UID_E_VB_UID_H264E: _VB_UID_E = 6;
pub const _VB_UID_E_VB_UID_JPEGE: _VB_UID_E = 7;
pub const _VB_UID_E_VB_UID_H264D: _VB_UID_E = 8;
pub const _VB_UID_E_VB_UID_JPEGD: _VB_UID_E = 9;
pub const _VB_UID_E_VB_UID_DIS: _VB_UID_E = 10;
pub const _VB_UID_E_VB_UID_USER: _VB_UID_E = 11;
pub const _VB_UID_E_VB_UID_AI: _VB_UID_E = 12;
pub const _VB_UID_E_VB_UID_AENC: _VB_UID_E = 13;
pub const _VB_UID_E_VB_UID_RC: _VB_UID_E = 14;
pub const _VB_UID_E_VB_UID_VFMW: _VB_UID_E = 15;
pub const _VB_UID_E_VB_UID_GDC: _VB_UID_E = 16;
pub const _VB_UID_E_VB_UID_BUTT: _VB_UID_E = 17;
pub type _VB_UID_E = ::std::os::raw::c_uint;
pub use self::_VB_UID_E as VB_UID_E;
pub type VB_POOL = CVI_U32;
pub type VB_BLK = CVI_U64;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_NONE: _VB_REMAP_MODE_E = 0;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_NOCACHE: _VB_REMAP_MODE_E = 1;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_CACHED: _VB_REMAP_MODE_E = 2;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_BUTT: _VB_REMAP_MODE_E = 3;
pub type _VB_REMAP_MODE_E = ::std::os::raw::c_uint;
pub use self::_VB_REMAP_MODE_E as VB_REMAP_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_POOL_CONFIG_S {
    pub u32BlkSize: CVI_U32,
    pub u32BlkCnt: CVI_U32,
    pub enRemapMode: VB_REMAP_MODE_E,
    pub acName: [CVI_CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_POOL_CONFIG_S"][::std::mem::size_of::<_VB_POOL_CONFIG_S>() - 44usize];
    ["Alignment of _VB_POOL_CONFIG_S"][::std::mem::align_of::<_VB_POOL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_POOL_CONFIG_S::u32BlkSize"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, u32BlkSize) - 0usize];
    ["Offset of field: _VB_POOL_CONFIG_S::u32BlkCnt"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, u32BlkCnt) - 4usize];
    ["Offset of field: _VB_POOL_CONFIG_S::enRemapMode"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, enRemapMode) - 8usize];
    ["Offset of field: _VB_POOL_CONFIG_S::acName"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, acName) - 12usize];
};
pub type VB_POOL_CONFIG_S = _VB_POOL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CONFIG_S {
    pub u32MaxPoolCnt: CVI_U32,
    pub astCommPool: [VB_POOL_CONFIG_S; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CONFIG_S"][::std::mem::size_of::<_VB_CONFIG_S>() - 708usize];
    ["Alignment of _VB_CONFIG_S"][::std::mem::align_of::<_VB_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CONFIG_S::u32MaxPoolCnt"]
        [::std::mem::offset_of!(_VB_CONFIG_S, u32MaxPoolCnt) - 0usize];
    ["Offset of field: _VB_CONFIG_S::astCommPool"]
        [::std::mem::offset_of!(_VB_CONFIG_S, astCommPool) - 4usize];
};
pub type VB_CONFIG_S = _VB_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_SUPPLEMENT_CONFIG_S {
    pub u32SupplementConfig: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_SUPPLEMENT_CONFIG_S"][::std::mem::size_of::<_VB_SUPPLEMENT_CONFIG_S>() - 4usize];
    ["Alignment of _VB_SUPPLEMENT_CONFIG_S"]
        [::std::mem::align_of::<_VB_SUPPLEMENT_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_SUPPLEMENT_CONFIG_S::u32SupplementConfig"]
        [::std::mem::offset_of!(_VB_SUPPLEMENT_CONFIG_S, u32SupplementConfig) - 0usize];
};
pub type VB_SUPPLEMENT_CONFIG_S = _VB_SUPPLEMENT_CONFIG_S;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type CVI_FR32 = ::std::os::raw::c_uint;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264CBR: _VENC_RC_MODE_E = 1;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264VBR: _VENC_RC_MODE_E = 2;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264AVBR: _VENC_RC_MODE_E = 3;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264QVBR: _VENC_RC_MODE_E = 4;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264FIXQP: _VENC_RC_MODE_E = 5;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264QPMAP: _VENC_RC_MODE_E = 6;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H264UBR: _VENC_RC_MODE_E = 7;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_MJPEGCBR: _VENC_RC_MODE_E = 8;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_MJPEGVBR: _VENC_RC_MODE_E = 9;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_MJPEGFIXQP: _VENC_RC_MODE_E = 10;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265CBR: _VENC_RC_MODE_E = 11;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265VBR: _VENC_RC_MODE_E = 12;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265AVBR: _VENC_RC_MODE_E = 13;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265QVBR: _VENC_RC_MODE_E = 14;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265FIXQP: _VENC_RC_MODE_E = 15;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265QPMAP: _VENC_RC_MODE_E = 16;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_H265UBR: _VENC_RC_MODE_E = 17;
pub const _VENC_RC_MODE_E_VENC_RC_MODE_BUTT: _VENC_RC_MODE_E = 18;
pub type _VENC_RC_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_RC_MODE_E as VENC_RC_MODE_E;
pub const _VENC_RC_QPMAP_MODE_E_VENC_RC_QPMAP_MODE_MEANQP: _VENC_RC_QPMAP_MODE_E = 0;
pub const _VENC_RC_QPMAP_MODE_E_VENC_RC_QPMAP_MODE_MINQP: _VENC_RC_QPMAP_MODE_E = 1;
pub const _VENC_RC_QPMAP_MODE_E_VENC_RC_QPMAP_MODE_MAXQP: _VENC_RC_QPMAP_MODE_E = 2;
pub const _VENC_RC_QPMAP_MODE_E_VENC_RC_QPMAP_MODE_BUTT: _VENC_RC_QPMAP_MODE_E = 3;
pub type _VENC_RC_QPMAP_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_RC_QPMAP_MODE_E as VENC_RC_QPMAP_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_FIXQP_S {
    pub u32Gop: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32IQp: CVI_U32,
    pub u32PQp: CVI_U32,
    pub u32BQp: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_FIXQP_S"][::std::mem::size_of::<_VENC_H264_FIXQP_S>() - 28usize];
    ["Alignment of _VENC_H264_FIXQP_S"][::std::mem::align_of::<_VENC_H264_FIXQP_S>() - 4usize];
    ["Offset of field: _VENC_H264_FIXQP_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_FIXQP_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, u32SrcFrameRate) - 4usize];
    ["Offset of field: _VENC_H264_FIXQP_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, fr32DstFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_FIXQP_S::u32IQp"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, u32IQp) - 12usize];
    ["Offset of field: _VENC_H264_FIXQP_S::u32PQp"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, u32PQp) - 16usize];
    ["Offset of field: _VENC_H264_FIXQP_S::u32BQp"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, u32BQp) - 20usize];
    ["Offset of field: _VENC_H264_FIXQP_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_FIXQP_S, bVariFpsEn) - 24usize];
};
pub type VENC_H264_FIXQP_S = _VENC_H264_FIXQP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_CBR_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32BitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_CBR_S"][::std::mem::size_of::<_VENC_H264_CBR_S>() - 24usize];
    ["Alignment of _VENC_H264_CBR_S"][::std::mem::align_of::<_VENC_H264_CBR_S>() - 4usize];
    ["Offset of field: _VENC_H264_CBR_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_CBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_CBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_CBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_CBR_S::u32BitRate"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, u32BitRate) - 16usize];
    ["Offset of field: _VENC_H264_CBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_CBR_S, bVariFpsEn) - 20usize];
};
pub type VENC_H264_CBR_S = _VENC_H264_CBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_VBR_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32MaxBitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_VBR_S"][::std::mem::size_of::<_VENC_H264_VBR_S>() - 24usize];
    ["Alignment of _VENC_H264_VBR_S"][::std::mem::align_of::<_VENC_H264_VBR_S>() - 4usize];
    ["Offset of field: _VENC_H264_VBR_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_VBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_VBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_VBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_VBR_S::u32MaxBitRate"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, u32MaxBitRate) - 16usize];
    ["Offset of field: _VENC_H264_VBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_VBR_S, bVariFpsEn) - 20usize];
};
pub type VENC_H264_VBR_S = _VENC_H264_VBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_AVBR_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32MaxBitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_AVBR_S"][::std::mem::size_of::<_VENC_H264_AVBR_S>() - 24usize];
    ["Alignment of _VENC_H264_AVBR_S"][::std::mem::align_of::<_VENC_H264_AVBR_S>() - 4usize];
    ["Offset of field: _VENC_H264_AVBR_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_AVBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_AVBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_AVBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_AVBR_S::u32MaxBitRate"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, u32MaxBitRate) - 16usize];
    ["Offset of field: _VENC_H264_AVBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_AVBR_S, bVariFpsEn) - 20usize];
};
pub type VENC_H264_AVBR_S = _VENC_H264_AVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_QPMAP_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_QPMAP_S"][::std::mem::size_of::<_VENC_H264_QPMAP_S>() - 20usize];
    ["Alignment of _VENC_H264_QPMAP_S"][::std::mem::align_of::<_VENC_H264_QPMAP_S>() - 4usize];
    ["Offset of field: _VENC_H264_QPMAP_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_QPMAP_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_QPMAP_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_QPMAP_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_QPMAP_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_QPMAP_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_QPMAP_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_QPMAP_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_QPMAP_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_QPMAP_S, bVariFpsEn) - 16usize];
};
pub type VENC_H264_QPMAP_S = _VENC_H264_QPMAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_QVBR_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32TargetBitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_QVBR_S"][::std::mem::size_of::<_VENC_H264_QVBR_S>() - 24usize];
    ["Alignment of _VENC_H264_QVBR_S"][::std::mem::align_of::<_VENC_H264_QVBR_S>() - 4usize];
    ["Offset of field: _VENC_H264_QVBR_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_QVBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_QVBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_QVBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_QVBR_S::u32TargetBitRate"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, u32TargetBitRate) - 16usize];
    ["Offset of field: _VENC_H264_QVBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_QVBR_S, bVariFpsEn) - 20usize];
};
pub type VENC_H264_QVBR_S = _VENC_H264_QVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_UBR_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32BitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_UBR_S"][::std::mem::size_of::<_VENC_H264_UBR_S>() - 24usize];
    ["Alignment of _VENC_H264_UBR_S"][::std::mem::align_of::<_VENC_H264_UBR_S>() - 4usize];
    ["Offset of field: _VENC_H264_UBR_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H264_UBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H264_UBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H264_UBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H264_UBR_S::u32BitRate"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, u32BitRate) - 16usize];
    ["Offset of field: _VENC_H264_UBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H264_UBR_S, bVariFpsEn) - 20usize];
};
pub type VENC_H264_UBR_S = _VENC_H264_UBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_QPMAP_S {
    pub u32Gop: CVI_U32,
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_QPMAP_S"][::std::mem::size_of::<_VENC_H265_QPMAP_S>() - 24usize];
    ["Alignment of _VENC_H265_QPMAP_S"][::std::mem::align_of::<_VENC_H265_QPMAP_S>() - 4usize];
    ["Offset of field: _VENC_H265_QPMAP_S::u32Gop"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, u32Gop) - 0usize];
    ["Offset of field: _VENC_H265_QPMAP_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, u32StatTime) - 4usize];
    ["Offset of field: _VENC_H265_QPMAP_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, u32SrcFrameRate) - 8usize];
    ["Offset of field: _VENC_H265_QPMAP_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, fr32DstFrameRate) - 12usize];
    ["Offset of field: _VENC_H265_QPMAP_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, enQpMapMode) - 16usize];
    ["Offset of field: _VENC_H265_QPMAP_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_H265_QPMAP_S, bVariFpsEn) - 20usize];
};
pub type VENC_H265_QPMAP_S = _VENC_H265_QPMAP_S;
pub type VENC_H265_CBR_S = _VENC_H264_CBR_S;
pub type VENC_H265_VBR_S = _VENC_H264_VBR_S;
pub type VENC_H265_AVBR_S = _VENC_H264_AVBR_S;
pub type VENC_H265_FIXQP_S = _VENC_H264_FIXQP_S;
pub type VENC_H265_QVBR_S = _VENC_H264_QVBR_S;
pub type VENC_H265_UBR_S = _VENC_H264_UBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MJPEG_FIXQP_S {
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32Qfactor: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MJPEG_FIXQP_S"][::std::mem::size_of::<_VENC_MJPEG_FIXQP_S>() - 16usize];
    ["Alignment of _VENC_MJPEG_FIXQP_S"][::std::mem::align_of::<_VENC_MJPEG_FIXQP_S>() - 4usize];
    ["Offset of field: _VENC_MJPEG_FIXQP_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_FIXQP_S, u32SrcFrameRate) - 0usize];
    ["Offset of field: _VENC_MJPEG_FIXQP_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_FIXQP_S, fr32DstFrameRate) - 4usize];
    ["Offset of field: _VENC_MJPEG_FIXQP_S::u32Qfactor"]
        [::std::mem::offset_of!(_VENC_MJPEG_FIXQP_S, u32Qfactor) - 8usize];
    ["Offset of field: _VENC_MJPEG_FIXQP_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_MJPEG_FIXQP_S, bVariFpsEn) - 12usize];
};
pub type VENC_MJPEG_FIXQP_S = _VENC_MJPEG_FIXQP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MJPEG_CBR_S {
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32BitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MJPEG_CBR_S"][::std::mem::size_of::<_VENC_MJPEG_CBR_S>() - 20usize];
    ["Alignment of _VENC_MJPEG_CBR_S"][::std::mem::align_of::<_VENC_MJPEG_CBR_S>() - 4usize];
    ["Offset of field: _VENC_MJPEG_CBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_MJPEG_CBR_S, u32StatTime) - 0usize];
    ["Offset of field: _VENC_MJPEG_CBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_CBR_S, u32SrcFrameRate) - 4usize];
    ["Offset of field: _VENC_MJPEG_CBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_CBR_S, fr32DstFrameRate) - 8usize];
    ["Offset of field: _VENC_MJPEG_CBR_S::u32BitRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_CBR_S, u32BitRate) - 12usize];
    ["Offset of field: _VENC_MJPEG_CBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_MJPEG_CBR_S, bVariFpsEn) - 16usize];
};
pub type VENC_MJPEG_CBR_S = _VENC_MJPEG_CBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MJPEG_VBR_S {
    pub u32StatTime: CVI_U32,
    pub u32SrcFrameRate: CVI_U32,
    pub fr32DstFrameRate: CVI_FR32,
    pub u32MaxBitRate: CVI_U32,
    pub bVariFpsEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MJPEG_VBR_S"][::std::mem::size_of::<_VENC_MJPEG_VBR_S>() - 20usize];
    ["Alignment of _VENC_MJPEG_VBR_S"][::std::mem::align_of::<_VENC_MJPEG_VBR_S>() - 4usize];
    ["Offset of field: _VENC_MJPEG_VBR_S::u32StatTime"]
        [::std::mem::offset_of!(_VENC_MJPEG_VBR_S, u32StatTime) - 0usize];
    ["Offset of field: _VENC_MJPEG_VBR_S::u32SrcFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_VBR_S, u32SrcFrameRate) - 4usize];
    ["Offset of field: _VENC_MJPEG_VBR_S::fr32DstFrameRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_VBR_S, fr32DstFrameRate) - 8usize];
    ["Offset of field: _VENC_MJPEG_VBR_S::u32MaxBitRate"]
        [::std::mem::offset_of!(_VENC_MJPEG_VBR_S, u32MaxBitRate) - 12usize];
    ["Offset of field: _VENC_MJPEG_VBR_S::bVariFpsEn"]
        [::std::mem::offset_of!(_VENC_MJPEG_VBR_S, bVariFpsEn) - 16usize];
};
pub type VENC_MJPEG_VBR_S = _VENC_MJPEG_VBR_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_RC_ATTR_S {
    pub enRcMode: VENC_RC_MODE_E,
    pub __bindgen_anon_1: _VENC_RC_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_RC_ATTR_S__bindgen_ty_1 {
    pub stH264Cbr: VENC_H264_CBR_S,
    pub stH264Vbr: VENC_H264_VBR_S,
    pub stH264AVbr: VENC_H264_AVBR_S,
    pub stH264QVbr: VENC_H264_QVBR_S,
    pub stH264FixQp: VENC_H264_FIXQP_S,
    pub stH264QpMap: VENC_H264_QPMAP_S,
    pub stH264Ubr: VENC_H264_UBR_S,
    pub stMjpegCbr: VENC_MJPEG_CBR_S,
    pub stMjpegVbr: VENC_MJPEG_VBR_S,
    pub stMjpegFixQp: VENC_MJPEG_FIXQP_S,
    pub stH265Cbr: VENC_H265_CBR_S,
    pub stH265Vbr: VENC_H265_VBR_S,
    pub stH265AVbr: VENC_H265_AVBR_S,
    pub stH265QVbr: VENC_H265_QVBR_S,
    pub stH265FixQp: VENC_H265_FIXQP_S,
    pub stH265QpMap: VENC_H265_QPMAP_S,
    pub stH265Ubr: VENC_H265_UBR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RC_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_RC_ATTR_S__bindgen_ty_1>() - 28usize];
    ["Alignment of _VENC_RC_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_RC_ATTR_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264Cbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264Cbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264Vbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264Vbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264AVbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264AVbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264QVbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264QVbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264FixQp"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264FixQp) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264QpMap"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264QpMap) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH264Ubr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH264Ubr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stMjpegCbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stMjpegCbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stMjpegVbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stMjpegVbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stMjpegFixQp"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stMjpegFixQp) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265Cbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265Cbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265Vbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265Vbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265AVbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265AVbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265QVbr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265QVbr) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265FixQp"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265FixQp) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265QpMap"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265QpMap) - 0usize];
    ["Offset of field: _VENC_RC_ATTR_S__bindgen_ty_1::stH265Ubr"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S__bindgen_ty_1, stH265Ubr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RC_ATTR_S"][::std::mem::size_of::<_VENC_RC_ATTR_S>() - 32usize];
    ["Alignment of _VENC_RC_ATTR_S"][::std::mem::align_of::<_VENC_RC_ATTR_S>() - 4usize];
    ["Offset of field: _VENC_RC_ATTR_S::enRcMode"]
        [::std::mem::offset_of!(_VENC_RC_ATTR_S, enRcMode) - 0usize];
};
pub type VENC_RC_ATTR_S = _VENC_RC_ATTR_S;
pub const _VENC_SUPERFRM_MODE_E_SUPERFRM_NONE: _VENC_SUPERFRM_MODE_E = 0;
pub const _VENC_SUPERFRM_MODE_E_SUPERFRM_DISCARD: _VENC_SUPERFRM_MODE_E = 1;
pub const _VENC_SUPERFRM_MODE_E_SUPERFRM_REENCODE: _VENC_SUPERFRM_MODE_E = 2;
pub const _VENC_SUPERFRM_MODE_E_SUPERFRM_REENCODE_IDR: _VENC_SUPERFRM_MODE_E = 3;
pub const _VENC_SUPERFRM_MODE_E_SUPERFRM_BUTT: _VENC_SUPERFRM_MODE_E = 4;
pub type _VENC_SUPERFRM_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_SUPERFRM_MODE_E as VENC_SUPERFRM_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H264_CBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H264_CBR_S"][::std::mem::size_of::<_VENC_PARAM_H264_CBR_S>() - 32usize];
    ["Alignment of _VENC_PARAM_H264_CBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H264_CBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MaxQp) - 8usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MinQp) - 12usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MaxIQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, u32MinIQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, s32MaxReEncodeTimes) - 24usize];
    ["Offset of field: _VENC_PARAM_H264_CBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_CBR_S, bQpMapEn) - 28usize];
};
pub type VENC_PARAM_H264_CBR_S = _VENC_PARAM_H264_CBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H264_VBR_S {
    pub s32ChangePos: CVI_S32,
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H264_VBR_S"][::std::mem::size_of::<_VENC_PARAM_H264_VBR_S>() - 36usize];
    ["Alignment of _VENC_PARAM_H264_VBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H264_VBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::s32ChangePos"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, s32ChangePos) - 0usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MinIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MaxIprop) - 8usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, s32MaxReEncodeTimes) - 12usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, bQpMapEn) - 16usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MaxQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MinQp) - 24usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MaxIQp) - 28usize];
    ["Offset of field: _VENC_PARAM_H264_VBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_VBR_S, u32MinIQp) - 32usize];
};
pub type VENC_PARAM_H264_VBR_S = _VENC_PARAM_H264_VBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H264_AVBR_S {
    pub s32ChangePos: CVI_S32,
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub s32MinStillPercent: CVI_S32,
    pub u32MaxStillQP: CVI_U32,
    pub u32MinStillPSNR: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub u32MinQpDelta: CVI_U32,
    pub u32MotionSensitivity: CVI_U32,
    pub s32AvbrFrmLostOpen: CVI_S32,
    pub s32AvbrFrmGap: CVI_S32,
    pub s32AvbrPureStillThr: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H264_AVBR_S"][::std::mem::size_of::<_VENC_PARAM_H264_AVBR_S>() - 68usize];
    ["Alignment of _VENC_PARAM_H264_AVBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H264_AVBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32ChangePos"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32ChangePos) - 0usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MinIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MaxIprop) - 8usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32MaxReEncodeTimes) - 12usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, bQpMapEn) - 16usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32MinStillPercent"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32MinStillPercent) - 20usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MaxStillQP"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MaxStillQP) - 24usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MinStillPSNR"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MinStillPSNR) - 28usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MaxQp) - 32usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MinQp) - 36usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MaxIQp) - 40usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MinIQp) - 44usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MinQpDelta"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MinQpDelta) - 48usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::u32MotionSensitivity"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, u32MotionSensitivity) - 52usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32AvbrFrmLostOpen"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32AvbrFrmLostOpen) - 56usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32AvbrFrmGap"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32AvbrFrmGap) - 60usize];
    ["Offset of field: _VENC_PARAM_H264_AVBR_S::s32AvbrPureStillThr"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_AVBR_S, s32AvbrPureStillThr) - 64usize];
};
pub type VENC_PARAM_H264_AVBR_S = _VENC_PARAM_H264_AVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H264_QVBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32BitPercentUL: CVI_S32,
    pub s32BitPercentLL: CVI_S32,
    pub s32PsnrFluctuateUL: CVI_S32,
    pub s32PsnrFluctuateLL: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H264_QVBR_S"][::std::mem::size_of::<_VENC_PARAM_H264_QVBR_S>() - 48usize];
    ["Alignment of _VENC_PARAM_H264_QVBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H264_QVBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, s32MaxReEncodeTimes) - 8usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, bQpMapEn) - 12usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MaxQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MinQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MaxIQp) - 24usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, u32MinIQp) - 28usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::s32BitPercentUL"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, s32BitPercentUL) - 32usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::s32BitPercentLL"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, s32BitPercentLL) - 36usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::s32PsnrFluctuateUL"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, s32PsnrFluctuateUL) - 40usize];
    ["Offset of field: _VENC_PARAM_H264_QVBR_S::s32PsnrFluctuateLL"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_QVBR_S, s32PsnrFluctuateLL) - 44usize];
};
pub type VENC_PARAM_H264_QVBR_S = _VENC_PARAM_H264_QVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H264_UBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H264_UBR_S"][::std::mem::size_of::<_VENC_PARAM_H264_UBR_S>() - 32usize];
    ["Alignment of _VENC_PARAM_H264_UBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H264_UBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MaxQp) - 8usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MinQp) - 12usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MaxIQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, u32MinIQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, s32MaxReEncodeTimes) - 24usize];
    ["Offset of field: _VENC_PARAM_H264_UBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H264_UBR_S, bQpMapEn) - 28usize];
};
pub type VENC_PARAM_H264_UBR_S = _VENC_PARAM_H264_UBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_MJPEG_CBR_S {
    pub u32MaxQfactor: CVI_U32,
    pub u32MinQfactor: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_MJPEG_CBR_S"][::std::mem::size_of::<_VENC_PARAM_MJPEG_CBR_S>() - 8usize];
    ["Alignment of _VENC_PARAM_MJPEG_CBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_MJPEG_CBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_MJPEG_CBR_S::u32MaxQfactor"]
        [::std::mem::offset_of!(_VENC_PARAM_MJPEG_CBR_S, u32MaxQfactor) - 0usize];
    ["Offset of field: _VENC_PARAM_MJPEG_CBR_S::u32MinQfactor"]
        [::std::mem::offset_of!(_VENC_PARAM_MJPEG_CBR_S, u32MinQfactor) - 4usize];
};
pub type VENC_PARAM_MJPEG_CBR_S = _VENC_PARAM_MJPEG_CBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_MJPEG_VBR_S {
    pub s32ChangePos: CVI_S32,
    pub u32MaxQfactor: CVI_U32,
    pub u32MinQfactor: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_MJPEG_VBR_S"][::std::mem::size_of::<_VENC_PARAM_MJPEG_VBR_S>() - 12usize];
    ["Alignment of _VENC_PARAM_MJPEG_VBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_MJPEG_VBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_MJPEG_VBR_S::s32ChangePos"]
        [::std::mem::offset_of!(_VENC_PARAM_MJPEG_VBR_S, s32ChangePos) - 0usize];
    ["Offset of field: _VENC_PARAM_MJPEG_VBR_S::u32MaxQfactor"]
        [::std::mem::offset_of!(_VENC_PARAM_MJPEG_VBR_S, u32MaxQfactor) - 4usize];
    ["Offset of field: _VENC_PARAM_MJPEG_VBR_S::u32MinQfactor"]
        [::std::mem::offset_of!(_VENC_PARAM_MJPEG_VBR_S, u32MinQfactor) - 8usize];
};
pub type VENC_PARAM_MJPEG_VBR_S = _VENC_PARAM_MJPEG_VBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H265_CBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H265_CBR_S"][::std::mem::size_of::<_VENC_PARAM_H265_CBR_S>() - 36usize];
    ["Alignment of _VENC_PARAM_H265_CBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H265_CBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MaxQp) - 8usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MinQp) - 12usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MaxIQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, u32MinIQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, s32MaxReEncodeTimes) - 24usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, bQpMapEn) - 28usize];
    ["Offset of field: _VENC_PARAM_H265_CBR_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_CBR_S, enQpMapMode) - 32usize];
};
pub type VENC_PARAM_H265_CBR_S = _VENC_PARAM_H265_CBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H265_VBR_S {
    pub s32ChangePos: CVI_S32,
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub bQpMapEn: CVI_BOOL,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H265_VBR_S"][::std::mem::size_of::<_VENC_PARAM_H265_VBR_S>() - 40usize];
    ["Alignment of _VENC_PARAM_H265_VBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H265_VBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::s32ChangePos"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, s32ChangePos) - 0usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MinIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MaxIprop) - 8usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, s32MaxReEncodeTimes) - 12usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MaxQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MinQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MaxIQp) - 24usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, u32MinIQp) - 28usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, bQpMapEn) - 32usize];
    ["Offset of field: _VENC_PARAM_H265_VBR_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_VBR_S, enQpMapMode) - 36usize];
};
pub type VENC_PARAM_H265_VBR_S = _VENC_PARAM_H265_VBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H265_AVBR_S {
    pub s32ChangePos: CVI_S32,
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub s32MinStillPercent: CVI_S32,
    pub u32MaxStillQP: CVI_U32,
    pub u32MinStillPSNR: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub u32MinQpDelta: CVI_U32,
    pub u32MotionSensitivity: CVI_U32,
    pub s32AvbrFrmLostOpen: CVI_S32,
    pub s32AvbrFrmGap: CVI_S32,
    pub s32AvbrPureStillThr: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H265_AVBR_S"][::std::mem::size_of::<_VENC_PARAM_H265_AVBR_S>() - 72usize];
    ["Alignment of _VENC_PARAM_H265_AVBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H265_AVBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32ChangePos"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32ChangePos) - 0usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MinIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MaxIprop) - 8usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32MaxReEncodeTimes) - 12usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32MinStillPercent"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32MinStillPercent) - 16usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MaxStillQP"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MaxStillQP) - 20usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MinStillPSNR"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MinStillPSNR) - 24usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MaxQp) - 28usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MinQp) - 32usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MaxIQp) - 36usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MinIQp) - 40usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MinQpDelta"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MinQpDelta) - 44usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::u32MotionSensitivity"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, u32MotionSensitivity) - 48usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32AvbrFrmLostOpen"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32AvbrFrmLostOpen) - 52usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32AvbrFrmGap"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32AvbrFrmGap) - 56usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::s32AvbrPureStillThr"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, s32AvbrPureStillThr) - 60usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, bQpMapEn) - 64usize];
    ["Offset of field: _VENC_PARAM_H265_AVBR_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_AVBR_S, enQpMapMode) - 68usize];
};
pub type VENC_PARAM_H265_AVBR_S = _VENC_PARAM_H265_AVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H265_QVBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32BitPercentUL: CVI_S32,
    pub s32BitPercentLL: CVI_S32,
    pub s32PsnrFluctuateUL: CVI_S32,
    pub s32PsnrFluctuateLL: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H265_QVBR_S"][::std::mem::size_of::<_VENC_PARAM_H265_QVBR_S>() - 52usize];
    ["Alignment of _VENC_PARAM_H265_QVBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H265_QVBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, s32MaxReEncodeTimes) - 8usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, bQpMapEn) - 12usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, enQpMapMode) - 16usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MaxQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MinQp) - 24usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MaxIQp) - 28usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, u32MinIQp) - 32usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::s32BitPercentUL"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, s32BitPercentUL) - 36usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::s32BitPercentLL"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, s32BitPercentLL) - 40usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::s32PsnrFluctuateUL"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, s32PsnrFluctuateUL) - 44usize];
    ["Offset of field: _VENC_PARAM_H265_QVBR_S::s32PsnrFluctuateLL"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_QVBR_S, s32PsnrFluctuateLL) - 48usize];
};
pub type VENC_PARAM_H265_QVBR_S = _VENC_PARAM_H265_QVBR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PARAM_H265_UBR_S {
    pub u32MinIprop: CVI_U32,
    pub u32MaxIprop: CVI_U32,
    pub u32MaxQp: CVI_U32,
    pub u32MinQp: CVI_U32,
    pub u32MaxIQp: CVI_U32,
    pub u32MinIQp: CVI_U32,
    pub s32MaxReEncodeTimes: CVI_S32,
    pub bQpMapEn: CVI_BOOL,
    pub enQpMapMode: VENC_RC_QPMAP_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PARAM_H265_UBR_S"][::std::mem::size_of::<_VENC_PARAM_H265_UBR_S>() - 36usize];
    ["Alignment of _VENC_PARAM_H265_UBR_S"]
        [::std::mem::align_of::<_VENC_PARAM_H265_UBR_S>() - 4usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MinIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MinIprop) - 0usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MaxIprop"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MaxIprop) - 4usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MaxQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MaxQp) - 8usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MinQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MinQp) - 12usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MaxIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MaxIQp) - 16usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::u32MinIQp"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, u32MinIQp) - 20usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::s32MaxReEncodeTimes"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, s32MaxReEncodeTimes) - 24usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::bQpMapEn"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, bQpMapEn) - 28usize];
    ["Offset of field: _VENC_PARAM_H265_UBR_S::enQpMapMode"]
        [::std::mem::offset_of!(_VENC_PARAM_H265_UBR_S, enQpMapMode) - 32usize];
};
pub type VENC_PARAM_H265_UBR_S = _VENC_PARAM_H265_UBR_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_RC_PARAM_S {
    pub u32ThrdI: [CVI_U32; 16usize],
    pub u32ThrdP: [CVI_U32; 16usize],
    pub u32ThrdB: [CVI_U32; 16usize],
    pub u32DirectionThrd: CVI_U32,
    pub u32RowQpDelta: CVI_U32,
    pub s32FirstFrameStartQp: CVI_S32,
    pub s32InitialDelay: CVI_S32,
    pub u32ThrdLv: CVI_U32,
    pub bBgEnhanceEn: CVI_BOOL,
    pub s32BgDeltaQp: CVI_S32,
    pub __bindgen_anon_1: _VENC_RC_PARAM_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_RC_PARAM_S__bindgen_ty_1 {
    pub stParamH264Cbr: VENC_PARAM_H264_CBR_S,
    pub stParamH264Vbr: VENC_PARAM_H264_VBR_S,
    pub stParamH264AVbr: VENC_PARAM_H264_AVBR_S,
    pub stParamH264QVbr: VENC_PARAM_H264_QVBR_S,
    pub stParamH264Ubr: VENC_PARAM_H264_UBR_S,
    pub stParamH265Cbr: VENC_PARAM_H265_CBR_S,
    pub stParamH265Vbr: VENC_PARAM_H265_VBR_S,
    pub stParamH265AVbr: VENC_PARAM_H265_AVBR_S,
    pub stParamH265QVbr: VENC_PARAM_H265_QVBR_S,
    pub stParamH265Ubr: VENC_PARAM_H265_UBR_S,
    pub stParamMjpegCbr: VENC_PARAM_MJPEG_CBR_S,
    pub stParamMjpegVbr: VENC_PARAM_MJPEG_VBR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RC_PARAM_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_RC_PARAM_S__bindgen_ty_1>() - 72usize];
    ["Alignment of _VENC_RC_PARAM_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_RC_PARAM_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH264Cbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH264Cbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH264Vbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH264Vbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH264AVbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH264AVbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH264QVbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH264QVbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH264Ubr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH264Ubr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH265Cbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH265Cbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH265Vbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH265Vbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH265AVbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH265AVbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH265QVbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH265QVbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamH265Ubr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamH265Ubr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamMjpegCbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamMjpegCbr) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S__bindgen_ty_1::stParamMjpegVbr"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S__bindgen_ty_1, stParamMjpegVbr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RC_PARAM_S"][::std::mem::size_of::<_VENC_RC_PARAM_S>() - 292usize];
    ["Alignment of _VENC_RC_PARAM_S"][::std::mem::align_of::<_VENC_RC_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32ThrdI"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32ThrdI) - 0usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32ThrdP"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32ThrdP) - 64usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32ThrdB"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32ThrdB) - 128usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32DirectionThrd"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32DirectionThrd) - 192usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32RowQpDelta"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32RowQpDelta) - 196usize];
    ["Offset of field: _VENC_RC_PARAM_S::s32FirstFrameStartQp"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, s32FirstFrameStartQp) - 200usize];
    ["Offset of field: _VENC_RC_PARAM_S::s32InitialDelay"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, s32InitialDelay) - 204usize];
    ["Offset of field: _VENC_RC_PARAM_S::u32ThrdLv"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, u32ThrdLv) - 208usize];
    ["Offset of field: _VENC_RC_PARAM_S::bBgEnhanceEn"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, bBgEnhanceEn) - 212usize];
    ["Offset of field: _VENC_RC_PARAM_S::s32BgDeltaQp"]
        [::std::mem::offset_of!(_VENC_RC_PARAM_S, s32BgDeltaQp) - 216usize];
};
pub type VENC_RC_PARAM_S = _VENC_RC_PARAM_S;
pub const _VENC_FRAMELOST_MODE_E_FRMLOST_NORMAL: _VENC_FRAMELOST_MODE_E = 0;
pub const _VENC_FRAMELOST_MODE_E_FRMLOST_PSKIP: _VENC_FRAMELOST_MODE_E = 1;
pub const _VENC_FRAMELOST_MODE_E_FRMLOST_BUTT: _VENC_FRAMELOST_MODE_E = 2;
pub type _VENC_FRAMELOST_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_FRAMELOST_MODE_E as VENC_FRAMELOST_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_FRAMELOST_S {
    pub bFrmLostOpen: CVI_BOOL,
    pub u32FrmLostBpsThr: CVI_U32,
    pub enFrmLostMode: VENC_FRAMELOST_MODE_E,
    pub u32EncFrmGaps: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_FRAMELOST_S"][::std::mem::size_of::<_VENC_FRAMELOST_S>() - 16usize];
    ["Alignment of _VENC_FRAMELOST_S"][::std::mem::align_of::<_VENC_FRAMELOST_S>() - 4usize];
    ["Offset of field: _VENC_FRAMELOST_S::bFrmLostOpen"]
        [::std::mem::offset_of!(_VENC_FRAMELOST_S, bFrmLostOpen) - 0usize];
    ["Offset of field: _VENC_FRAMELOST_S::u32FrmLostBpsThr"]
        [::std::mem::offset_of!(_VENC_FRAMELOST_S, u32FrmLostBpsThr) - 4usize];
    ["Offset of field: _VENC_FRAMELOST_S::enFrmLostMode"]
        [::std::mem::offset_of!(_VENC_FRAMELOST_S, enFrmLostMode) - 8usize];
    ["Offset of field: _VENC_FRAMELOST_S::u32EncFrmGaps"]
        [::std::mem::offset_of!(_VENC_FRAMELOST_S, u32EncFrmGaps) - 12usize];
};
pub type VENC_FRAMELOST_S = _VENC_FRAMELOST_S;
pub const _VENC_RC_PRIORITY_E_VENC_RC_PRIORITY_BITRATE_FIRST: _VENC_RC_PRIORITY_E = 1;
pub const _VENC_RC_PRIORITY_E_VENC_RC_PRIORITY_FRAMEBITS_FIRST: _VENC_RC_PRIORITY_E = 2;
pub const _VENC_RC_PRIORITY_E_VENC_RC_PRIORITY_BUTT: _VENC_RC_PRIORITY_E = 3;
pub type _VENC_RC_PRIORITY_E = ::std::os::raw::c_uint;
pub use self::_VENC_RC_PRIORITY_E as VENC_RC_PRIORITY_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_SUPERFRAME_CFG_S {
    pub enSuperFrmMode: VENC_SUPERFRM_MODE_E,
    pub u32SuperIFrmBitsThr: CVI_U32,
    pub u32SuperPFrmBitsThr: CVI_U32,
    pub u32SuperBFrmBitsThr: CVI_U32,
    pub enRcPriority: VENC_RC_PRIORITY_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_SUPERFRAME_CFG_S"][::std::mem::size_of::<_VENC_SUPERFRAME_CFG_S>() - 20usize];
    ["Alignment of _VENC_SUPERFRAME_CFG_S"]
        [::std::mem::align_of::<_VENC_SUPERFRAME_CFG_S>() - 4usize];
    ["Offset of field: _VENC_SUPERFRAME_CFG_S::enSuperFrmMode"]
        [::std::mem::offset_of!(_VENC_SUPERFRAME_CFG_S, enSuperFrmMode) - 0usize];
    ["Offset of field: _VENC_SUPERFRAME_CFG_S::u32SuperIFrmBitsThr"]
        [::std::mem::offset_of!(_VENC_SUPERFRAME_CFG_S, u32SuperIFrmBitsThr) - 4usize];
    ["Offset of field: _VENC_SUPERFRAME_CFG_S::u32SuperPFrmBitsThr"]
        [::std::mem::offset_of!(_VENC_SUPERFRAME_CFG_S, u32SuperPFrmBitsThr) - 8usize];
    ["Offset of field: _VENC_SUPERFRAME_CFG_S::u32SuperBFrmBitsThr"]
        [::std::mem::offset_of!(_VENC_SUPERFRAME_CFG_S, u32SuperBFrmBitsThr) - 12usize];
    ["Offset of field: _VENC_SUPERFRAME_CFG_S::enRcPriority"]
        [::std::mem::offset_of!(_VENC_SUPERFRAME_CFG_S, enRcPriority) - 16usize];
};
pub type VENC_SUPERFRAME_CFG_S = _VENC_SUPERFRAME_CFG_S;
pub const VENC_BIND_MODE_E_VENC_BIND_DISABLE: VENC_BIND_MODE_E = 0;
pub const VENC_BIND_MODE_E_VENC_BIND_VI: VENC_BIND_MODE_E = 1;
pub const VENC_BIND_MODE_E_VENC_BIND_VPSS: VENC_BIND_MODE_E = 2;
pub type VENC_BIND_MODE_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _venc_dbg_ {
    pub startFn: CVI_S32,
    pub endFn: CVI_S32,
    pub dbgMask: CVI_S32,
    pub currMask: CVI_S32,
    pub dbgDir: [CVI_CHAR; 255usize],
    pub dumpYuv: *mut FILE,
    pub dumpBs: *mut FILE,
    pub noDataTimeout: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _venc_dbg_"][::std::mem::size_of::<_venc_dbg_>() - 296usize];
    ["Alignment of _venc_dbg_"][::std::mem::align_of::<_venc_dbg_>() - 8usize];
    ["Offset of field: _venc_dbg_::startFn"][::std::mem::offset_of!(_venc_dbg_, startFn) - 0usize];
    ["Offset of field: _venc_dbg_::endFn"][::std::mem::offset_of!(_venc_dbg_, endFn) - 4usize];
    ["Offset of field: _venc_dbg_::dbgMask"][::std::mem::offset_of!(_venc_dbg_, dbgMask) - 8usize];
    ["Offset of field: _venc_dbg_::currMask"]
        [::std::mem::offset_of!(_venc_dbg_, currMask) - 12usize];
    ["Offset of field: _venc_dbg_::dbgDir"][::std::mem::offset_of!(_venc_dbg_, dbgDir) - 16usize];
    ["Offset of field: _venc_dbg_::dumpYuv"]
        [::std::mem::offset_of!(_venc_dbg_, dumpYuv) - 272usize];
    ["Offset of field: _venc_dbg_::dumpBs"][::std::mem::offset_of!(_venc_dbg_, dumpBs) - 280usize];
    ["Offset of field: _venc_dbg_::noDataTimeout"]
        [::std::mem::offset_of!(_venc_dbg_, noDataTimeout) - 288usize];
};
pub type venc_dbg = _venc_dbg_;
extern "C" {
    pub static mut vencDbg: venc_dbg;
}
extern "C" {
    pub static mut gs_VencTask: [pthread_t; 16usize];
}
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INVALID_CHNID: VENC_RECODE_E_ERRTYPE = -1073250302;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_ILLEGAL_PARAM: VENC_RECODE_E_ERRTYPE = -1073250301;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_EXIST: VENC_RECODE_E_ERRTYPE = -1073250300;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_UNEXIST: VENC_RECODE_E_ERRTYPE = -1073250299;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NULL_PTR: VENC_RECODE_E_ERRTYPE = -1073250298;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NOT_CONFIG: VENC_RECODE_E_ERRTYPE = -1073250297;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NOT_SUPPORT: VENC_RECODE_E_ERRTYPE = -1073250296;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NOT_PERM: VENC_RECODE_E_ERRTYPE = -1073250295;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INVALID_PIPEID: VENC_RECODE_E_ERRTYPE = -1073250294;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INVALID_GRPID: VENC_RECODE_E_ERRTYPE = -1073250293;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NOMEM: VENC_RECODE_E_ERRTYPE = -1073250292;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_NOBUF: VENC_RECODE_E_ERRTYPE = -1073250291;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_BUF_EMPTY: VENC_RECODE_E_ERRTYPE = -1073250290;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_BUF_FULL: VENC_RECODE_E_ERRTYPE = -1073250289;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_SYS_NOTREADY: VENC_RECODE_E_ERRTYPE = -1073250288;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_BADADDR: VENC_RECODE_E_ERRTYPE = -1073250287;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_BUSY: VENC_RECODE_E_ERRTYPE = -1073250286;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_SIZE_NOT_ENOUGH: VENC_RECODE_E_ERRTYPE = -1073250285;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INVALID_VB: VENC_RECODE_E_ERRTYPE = -1073250284;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INIT: VENC_RECODE_E_ERRTYPE = -1073250240;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_FRC_NO_ENC: VENC_RECODE_E_ERRTYPE = -1073250239;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_STAT_VFPS_CHANGE: VENC_RECODE_E_ERRTYPE = -1073250238;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_EMPTY_STREAM_FRAME: VENC_RECODE_E_ERRTYPE =
    -1073250237;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_EMPTY_PACK: VENC_RECODE_E_ERRTYPE = -1073250236;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_JPEG_MARKER_ORDER: VENC_RECODE_E_ERRTYPE = -1073250235;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_CU_PREDICTION: VENC_RECODE_E_ERRTYPE = -1073250234;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_RC_PARAM: VENC_RECODE_E_ERRTYPE = -1073250233;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H264_ENTROPY: VENC_RECODE_E_ERRTYPE = -1073250232;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H264_TRANS: VENC_RECODE_E_ERRTYPE = -1073250231;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H265_TRANS: VENC_RECODE_E_ERRTYPE = -1073250230;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_MUTEX_ERROR: VENC_RECODE_E_ERRTYPE = -1073250229;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_INVALILD_RET: VENC_RECODE_E_ERRTYPE = -1073250228;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H264_VUI: VENC_RECODE_E_ERRTYPE = -1073250227;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H265_VUI: VENC_RECODE_E_ERRTYPE = -1073250226;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_GOP_ATTR: VENC_RECODE_E_ERRTYPE = -1073250225;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_FRAME_PARAM: VENC_RECODE_E_ERRTYPE = -1073250224;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H264_SPLIT: VENC_RECODE_E_ERRTYPE = -1073250223;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H265_SPLIT: VENC_RECODE_E_ERRTYPE = -1073250222;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_H264_INTRA_PRED: VENC_RECODE_E_ERRTYPE = -1073250221;
pub const VENC_RECODE_E_ERRTYPE_CVI_ERR_VENC_BUTT: VENC_RECODE_E_ERRTYPE = -1073250220;
pub type VENC_RECODE_E_ERRTYPE = ::std::os::raw::c_int;
pub const _H264E_NALU_TYPE_E_H264E_NALU_BSLICE: _H264E_NALU_TYPE_E = 0;
pub const _H264E_NALU_TYPE_E_H264E_NALU_PSLICE: _H264E_NALU_TYPE_E = 1;
pub const _H264E_NALU_TYPE_E_H264E_NALU_ISLICE: _H264E_NALU_TYPE_E = 2;
pub const _H264E_NALU_TYPE_E_H264E_NALU_IDRSLICE: _H264E_NALU_TYPE_E = 5;
pub const _H264E_NALU_TYPE_E_H264E_NALU_SEI: _H264E_NALU_TYPE_E = 6;
pub const _H264E_NALU_TYPE_E_H264E_NALU_SPS: _H264E_NALU_TYPE_E = 7;
pub const _H264E_NALU_TYPE_E_H264E_NALU_PPS: _H264E_NALU_TYPE_E = 8;
pub const _H264E_NALU_TYPE_E_H264E_NALU_BUTT: _H264E_NALU_TYPE_E = 9;
pub type _H264E_NALU_TYPE_E = ::std::os::raw::c_uint;
pub use self::_H264E_NALU_TYPE_E as H264E_NALU_TYPE_E;
pub const _H265E_NALU_TYPE_E_H265E_NALU_BSLICE: _H265E_NALU_TYPE_E = 0;
pub const _H265E_NALU_TYPE_E_H265E_NALU_PSLICE: _H265E_NALU_TYPE_E = 1;
pub const _H265E_NALU_TYPE_E_H265E_NALU_ISLICE: _H265E_NALU_TYPE_E = 2;
pub const _H265E_NALU_TYPE_E_H265E_NALU_IDRSLICE: _H265E_NALU_TYPE_E = 19;
pub const _H265E_NALU_TYPE_E_H265E_NALU_VPS: _H265E_NALU_TYPE_E = 32;
pub const _H265E_NALU_TYPE_E_H265E_NALU_SPS: _H265E_NALU_TYPE_E = 33;
pub const _H265E_NALU_TYPE_E_H265E_NALU_PPS: _H265E_NALU_TYPE_E = 34;
pub const _H265E_NALU_TYPE_E_H265E_NALU_SEI: _H265E_NALU_TYPE_E = 39;
pub const _H265E_NALU_TYPE_E_H265E_NALU_BUTT: _H265E_NALU_TYPE_E = 40;
pub type _H265E_NALU_TYPE_E = ::std::os::raw::c_uint;
pub use self::_H265E_NALU_TYPE_E as H265E_NALU_TYPE_E;
pub const _H265E_REFERSH_TYPE_E_H265E_REFRESH_IDR: _H265E_REFERSH_TYPE_E = 0;
pub const _H265E_REFERSH_TYPE_E_H265E_REFRESH_CRA: _H265E_REFERSH_TYPE_E = 1;
pub const _H265E_REFERSH_TYPE_E_H265E_REFRESH_BUTT: _H265E_REFERSH_TYPE_E = 2;
pub type _H265E_REFERSH_TYPE_E = ::std::os::raw::c_uint;
pub use self::_H265E_REFERSH_TYPE_E as H265E_REFRESH_TYPE_E;
pub const _H264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_1X: _H264E_REFSLICE_TYPE_E = 1;
pub const _H264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_2X: _H264E_REFSLICE_TYPE_E = 2;
pub const _H264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_4X: _H264E_REFSLICE_TYPE_E = 5;
pub const _H264E_REFSLICE_TYPE_E_H264E_REFSLICE_FOR_BUTT: _H264E_REFSLICE_TYPE_E = 6;
pub type _H264E_REFSLICE_TYPE_E = ::std::os::raw::c_uint;
pub use self::_H264E_REFSLICE_TYPE_E as H264E_REFSLICE_TYPE_E;
pub const _H264E_ENTROPY_H264E_ENTROPY_CAVLC: _H264E_ENTROPY = 0;
pub const _H264E_ENTROPY_H264E_ENTROPY_CABAC: _H264E_ENTROPY = 1;
pub type _H264E_ENTROPY = ::std::os::raw::c_uint;
pub use self::_H264E_ENTROPY as H264E_ENTROPY;
pub const _H264E_PROFILE_H264E_PROFILE_BASELINE: _H264E_PROFILE = 0;
pub const _H264E_PROFILE_H264E_PROFILE_MAIN: _H264E_PROFILE = 1;
pub const _H264E_PROFILE_H264E_PROFILE_HIGH: _H264E_PROFILE = 2;
pub const _H264E_PROFILE_H264E_PROFILE_BUTT: _H264E_PROFILE = 3;
pub type _H264E_PROFILE = ::std::os::raw::c_uint;
pub use self::_H264E_PROFILE as H264E_PROFILE;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_ECS: _JPEGE_PACK_TYPE_E = 5;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_APP: _JPEGE_PACK_TYPE_E = 6;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_VDO: _JPEGE_PACK_TYPE_E = 7;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_PIC: _JPEGE_PACK_TYPE_E = 8;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_DCF: _JPEGE_PACK_TYPE_E = 9;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_DCF_PIC: _JPEGE_PACK_TYPE_E = 10;
pub const _JPEGE_PACK_TYPE_E_JPEGE_PACK_BUTT: _JPEGE_PACK_TYPE_E = 11;
pub type _JPEGE_PACK_TYPE_E = ::std::os::raw::c_uint;
pub use self::_JPEGE_PACK_TYPE_E as JPEGE_PACK_TYPE_E;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_SOI: _JPEGE_MARKER_TYPE_E = 1;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DQT: _JPEGE_MARKER_TYPE_E = 2;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DQT_MERGE: _JPEGE_MARKER_TYPE_E = 3;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DHT: _JPEGE_MARKER_TYPE_E = 4;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DHT_MERGE: _JPEGE_MARKER_TYPE_E = 5;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DRI: _JPEGE_MARKER_TYPE_E = 6;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_DRI_OPT: _JPEGE_MARKER_TYPE_E = 7;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_SOF0: _JPEGE_MARKER_TYPE_E = 8;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_JFIF: _JPEGE_MARKER_TYPE_E = 9;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_FRAME_INDEX: _JPEGE_MARKER_TYPE_E = 10;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_ADOBE: _JPEGE_MARKER_TYPE_E = 11;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_USER_DATA: _JPEGE_MARKER_TYPE_E = 12;
pub const _JPEGE_MARKER_TYPE_E_JPEGE_MARKER_BUTT: _JPEGE_MARKER_TYPE_E = 13;
pub type _JPEGE_MARKER_TYPE_E = ::std::os::raw::c_uint;
pub use self::_JPEGE_MARKER_TYPE_E as JPEGE_MARKER_TYPE_E;
pub const _JPEGE_FORMAT_E_JPEGE_FORMAT_DEFAULT: _JPEGE_FORMAT_E = 0;
pub const _JPEGE_FORMAT_E_JPEGE_FORMAT_TYPE_1: _JPEGE_FORMAT_E = 1;
pub const _JPEGE_FORMAT_E_JPEGE_FORMAT_CUSTOM: _JPEGE_FORMAT_E = 255;
pub type _JPEGE_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_JPEGE_FORMAT_E as JPEGE_FORMAT_E;
pub const _PRORES_PACK_TYPE_E_PRORES_PACK_PIC: _PRORES_PACK_TYPE_E = 1;
pub const _PRORES_PACK_TYPE_E_PRORES_PACK_BUTT: _PRORES_PACK_TYPE_E = 2;
pub type _PRORES_PACK_TYPE_E = ::std::os::raw::c_uint;
pub use self::_PRORES_PACK_TYPE_E as PRORES_PACK_TYPE_E;
#[repr(C)]
#[derive(Copy, Clone)]
pub union cviVENC_DATA_TYPE_U {
    pub enH264EType: H264E_NALU_TYPE_E,
    pub enJPEGEType: JPEGE_PACK_TYPE_E,
    pub enH265EType: H265E_NALU_TYPE_E,
    pub enPRORESType: PRORES_PACK_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cviVENC_DATA_TYPE_U"][::std::mem::size_of::<cviVENC_DATA_TYPE_U>() - 4usize];
    ["Alignment of cviVENC_DATA_TYPE_U"][::std::mem::align_of::<cviVENC_DATA_TYPE_U>() - 4usize];
    ["Offset of field: cviVENC_DATA_TYPE_U::enH264EType"]
        [::std::mem::offset_of!(cviVENC_DATA_TYPE_U, enH264EType) - 0usize];
    ["Offset of field: cviVENC_DATA_TYPE_U::enJPEGEType"]
        [::std::mem::offset_of!(cviVENC_DATA_TYPE_U, enJPEGEType) - 0usize];
    ["Offset of field: cviVENC_DATA_TYPE_U::enH265EType"]
        [::std::mem::offset_of!(cviVENC_DATA_TYPE_U, enH265EType) - 0usize];
    ["Offset of field: cviVENC_DATA_TYPE_U::enPRORESType"]
        [::std::mem::offset_of!(cviVENC_DATA_TYPE_U, enPRORESType) - 0usize];
};
pub type VENC_DATA_TYPE_U = cviVENC_DATA_TYPE_U;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_PACK_INFO_S {
    pub u32PackType: VENC_DATA_TYPE_U,
    pub u32PackOffset: CVI_U32,
    pub u32PackLength: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PACK_INFO_S"][::std::mem::size_of::<_VENC_PACK_INFO_S>() - 12usize];
    ["Alignment of _VENC_PACK_INFO_S"][::std::mem::align_of::<_VENC_PACK_INFO_S>() - 4usize];
    ["Offset of field: _VENC_PACK_INFO_S::u32PackType"]
        [::std::mem::offset_of!(_VENC_PACK_INFO_S, u32PackType) - 0usize];
    ["Offset of field: _VENC_PACK_INFO_S::u32PackOffset"]
        [::std::mem::offset_of!(_VENC_PACK_INFO_S, u32PackOffset) - 4usize];
    ["Offset of field: _VENC_PACK_INFO_S::u32PackLength"]
        [::std::mem::offset_of!(_VENC_PACK_INFO_S, u32PackLength) - 8usize];
};
pub type VENC_PACK_INFO_S = _VENC_PACK_INFO_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_PACK_S {
    pub u64PhyAddr: CVI_U64,
    pub pu8Addr: *mut CVI_U8,
    pub u32Len: CVI_U32,
    pub u64PTS: CVI_U64,
    pub bFrameEnd: CVI_BOOL,
    pub DataType: VENC_DATA_TYPE_U,
    pub u32Offset: CVI_U32,
    pub u32DataNum: CVI_U32,
    pub stPackInfo: [VENC_PACK_INFO_S; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PACK_S"][::std::mem::size_of::<_VENC_PACK_S>() - 144usize];
    ["Alignment of _VENC_PACK_S"][::std::mem::align_of::<_VENC_PACK_S>() - 8usize];
    ["Offset of field: _VENC_PACK_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VENC_PACK_S, u64PhyAddr) - 0usize];
    ["Offset of field: _VENC_PACK_S::pu8Addr"]
        [::std::mem::offset_of!(_VENC_PACK_S, pu8Addr) - 8usize];
    ["Offset of field: _VENC_PACK_S::u32Len"]
        [::std::mem::offset_of!(_VENC_PACK_S, u32Len) - 16usize];
    ["Offset of field: _VENC_PACK_S::u64PTS"]
        [::std::mem::offset_of!(_VENC_PACK_S, u64PTS) - 24usize];
    ["Offset of field: _VENC_PACK_S::bFrameEnd"]
        [::std::mem::offset_of!(_VENC_PACK_S, bFrameEnd) - 32usize];
    ["Offset of field: _VENC_PACK_S::DataType"]
        [::std::mem::offset_of!(_VENC_PACK_S, DataType) - 36usize];
    ["Offset of field: _VENC_PACK_S::u32Offset"]
        [::std::mem::offset_of!(_VENC_PACK_S, u32Offset) - 40usize];
    ["Offset of field: _VENC_PACK_S::u32DataNum"]
        [::std::mem::offset_of!(_VENC_PACK_S, u32DataNum) - 44usize];
    ["Offset of field: _VENC_PACK_S::stPackInfo"]
        [::std::mem::offset_of!(_VENC_PACK_S, stPackInfo) - 48usize];
};
pub type VENC_PACK_S = _VENC_PACK_S;
pub const _H264E_REF_TYPE_E_BASE_IDRSLICE: _H264E_REF_TYPE_E = 0;
pub const _H264E_REF_TYPE_E_BASE_PSLICE_REFTOIDR: _H264E_REF_TYPE_E = 1;
pub const _H264E_REF_TYPE_E_BASE_PSLICE_REFBYBASE: _H264E_REF_TYPE_E = 2;
pub const _H264E_REF_TYPE_E_BASE_PSLICE_REFBYENHANCE: _H264E_REF_TYPE_E = 3;
pub const _H264E_REF_TYPE_E_ENHANCE_PSLICE_REFBYENHANCE: _H264E_REF_TYPE_E = 4;
pub const _H264E_REF_TYPE_E_ENHANCE_PSLICE_NOTFORREF: _H264E_REF_TYPE_E = 5;
pub const _H264E_REF_TYPE_E_ENHANCE_PSLICE_BUTT: _H264E_REF_TYPE_E = 6;
pub type _H264E_REF_TYPE_E = ::std::os::raw::c_uint;
pub use self::_H264E_REF_TYPE_E as H264E_REF_TYPE_E;
pub use self::_H264E_REF_TYPE_E as H265E_REF_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_INFO_H264_S {
    pub u32PicBytesNum: CVI_U32,
    pub u32Inter16x16MbNum: CVI_U32,
    pub u32Inter8x8MbNum: CVI_U32,
    pub u32Intra16MbNum: CVI_U32,
    pub u32Intra8MbNum: CVI_U32,
    pub u32Intra4MbNum: CVI_U32,
    pub enRefType: H264E_REF_TYPE_E,
    pub u32UpdateAttrCnt: CVI_U32,
    pub u32StartQp: CVI_U32,
    pub u32MeanQp: CVI_U32,
    pub bPSkip: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_INFO_H264_S"]
        [::std::mem::size_of::<_VENC_STREAM_INFO_H264_S>() - 44usize];
    ["Alignment of _VENC_STREAM_INFO_H264_S"]
        [::std::mem::align_of::<_VENC_STREAM_INFO_H264_S>() - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32PicBytesNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32PicBytesNum) - 0usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32Inter16x16MbNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32Inter16x16MbNum) - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32Inter8x8MbNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32Inter8x8MbNum) - 8usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32Intra16MbNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32Intra16MbNum) - 12usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32Intra8MbNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32Intra8MbNum) - 16usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32Intra4MbNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32Intra4MbNum) - 20usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::enRefType"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, enRefType) - 24usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32UpdateAttrCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32UpdateAttrCnt) - 28usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32StartQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32StartQp) - 32usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::u32MeanQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, u32MeanQp) - 36usize];
    ["Offset of field: _VENC_STREAM_INFO_H264_S::bPSkip"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H264_S, bPSkip) - 40usize];
};
pub type VENC_STREAM_INFO_H264_S = _VENC_STREAM_INFO_H264_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_INFO_H265_S {
    pub u32PicBytesNum: CVI_U32,
    pub u32Inter64x64CuNum: CVI_U32,
    pub u32Inter32x32CuNum: CVI_U32,
    pub u32Inter16x16CuNum: CVI_U32,
    pub u32Inter8x8CuNum: CVI_U32,
    pub u32Intra32x32CuNum: CVI_U32,
    pub u32Intra16x16CuNum: CVI_U32,
    pub u32Intra8x8CuNum: CVI_U32,
    pub u32Intra4x4CuNum: CVI_U32,
    pub enRefType: H265E_REF_TYPE_E,
    pub u32UpdateAttrCnt: CVI_U32,
    pub u32StartQp: CVI_U32,
    pub u32MeanQp: CVI_U32,
    pub bPSkip: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_INFO_H265_S"]
        [::std::mem::size_of::<_VENC_STREAM_INFO_H265_S>() - 56usize];
    ["Alignment of _VENC_STREAM_INFO_H265_S"]
        [::std::mem::align_of::<_VENC_STREAM_INFO_H265_S>() - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32PicBytesNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32PicBytesNum) - 0usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Inter64x64CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Inter64x64CuNum) - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Inter32x32CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Inter32x32CuNum) - 8usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Inter16x16CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Inter16x16CuNum) - 12usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Inter8x8CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Inter8x8CuNum) - 16usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Intra32x32CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Intra32x32CuNum) - 20usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Intra16x16CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Intra16x16CuNum) - 24usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Intra8x8CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Intra8x8CuNum) - 28usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32Intra4x4CuNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32Intra4x4CuNum) - 32usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::enRefType"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, enRefType) - 36usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32UpdateAttrCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32UpdateAttrCnt) - 40usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32StartQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32StartQp) - 44usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::u32MeanQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, u32MeanQp) - 48usize];
    ["Offset of field: _VENC_STREAM_INFO_H265_S::bPSkip"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_H265_S, bPSkip) - 52usize];
};
pub type VENC_STREAM_INFO_H265_S = _VENC_STREAM_INFO_H265_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_SSE_INFO_S {
    pub bSSEEn: CVI_BOOL,
    pub u32SSEVal: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_SSE_INFO_S"][::std::mem::size_of::<_VENC_SSE_INFO_S>() - 8usize];
    ["Alignment of _VENC_SSE_INFO_S"][::std::mem::align_of::<_VENC_SSE_INFO_S>() - 4usize];
    ["Offset of field: _VENC_SSE_INFO_S::bSSEEn"]
        [::std::mem::offset_of!(_VENC_SSE_INFO_S, bSSEEn) - 0usize];
    ["Offset of field: _VENC_SSE_INFO_S::u32SSEVal"]
        [::std::mem::offset_of!(_VENC_SSE_INFO_S, u32SSEVal) - 4usize];
};
pub type VENC_SSE_INFO_S = _VENC_SSE_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_ADVANCE_INFO_H264_S {
    pub u32ResidualBitNum: CVI_U32,
    pub u32HeadBitNum: CVI_U32,
    pub u32MadiVal: CVI_U32,
    pub u32MadpVal: CVI_U32,
    pub dPSNRVal: f64,
    pub u32MseLcuCnt: CVI_U32,
    pub u32MseSum: CVI_U32,
    pub stSSEInfo: [VENC_SSE_INFO_S; 8usize],
    pub u32QpHstgrm: [CVI_U32; 52usize],
    pub u32MoveScene16x16Num: CVI_U32,
    pub u32MoveSceneBits: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_ADVANCE_INFO_H264_S"]
        [::std::mem::size_of::<_VENC_STREAM_ADVANCE_INFO_H264_S>() - 312usize];
    ["Alignment of _VENC_STREAM_ADVANCE_INFO_H264_S"]
        [::std::mem::align_of::<_VENC_STREAM_ADVANCE_INFO_H264_S>() - 8usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32ResidualBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32ResidualBitNum) - 0usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32HeadBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32HeadBitNum) - 4usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MadiVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MadiVal) - 8usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MadpVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MadpVal) - 12usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::dPSNRVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, dPSNRVal) - 16usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MseLcuCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MseLcuCnt) - 24usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MseSum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MseSum) - 28usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::stSSEInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, stSSEInfo) - 32usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32QpHstgrm"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32QpHstgrm) - 96usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MoveScene16x16Num"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MoveScene16x16Num) - 304usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H264_S::u32MoveSceneBits"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H264_S, u32MoveSceneBits) - 308usize];
};
pub type VENC_STREAM_ADVANCE_INFO_H264_S = _VENC_STREAM_ADVANCE_INFO_H264_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_ADVANCE_INFO_JPEG_S {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_ADVANCE_INFO_JPEG_S"]
        [::std::mem::size_of::<_VENC_STREAM_ADVANCE_INFO_JPEG_S>() - 0usize];
    ["Alignment of _VENC_STREAM_ADVANCE_INFO_JPEG_S"]
        [::std::mem::align_of::<_VENC_STREAM_ADVANCE_INFO_JPEG_S>() - 1usize];
};
pub type VENC_STREAM_ADVANCE_INFO_JPEG_S = _VENC_STREAM_ADVANCE_INFO_JPEG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_ADVANCE_INFO_PRORES_S {}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_ADVANCE_INFO_PRORES_S"]
        [::std::mem::size_of::<_VENC_STREAM_ADVANCE_INFO_PRORES_S>() - 0usize];
    ["Alignment of _VENC_STREAM_ADVANCE_INFO_PRORES_S"]
        [::std::mem::align_of::<_VENC_STREAM_ADVANCE_INFO_PRORES_S>() - 1usize];
};
pub type VENC_STREAM_ADVANCE_INFO_PRORES_S = _VENC_STREAM_ADVANCE_INFO_PRORES_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_ADVANCE_INFO_H265_S {
    pub u32ResidualBitNum: CVI_U32,
    pub u32HeadBitNum: CVI_U32,
    pub u32MadiVal: CVI_U32,
    pub u32MadpVal: CVI_U32,
    pub dPSNRVal: f64,
    pub u32MseLcuCnt: CVI_U32,
    pub u32MseSum: CVI_U32,
    pub stSSEInfo: [VENC_SSE_INFO_S; 8usize],
    pub u32QpHstgrm: [CVI_U32; 52usize],
    pub u32MoveScene32x32Num: CVI_U32,
    pub u32MoveSceneBits: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_ADVANCE_INFO_H265_S"]
        [::std::mem::size_of::<_VENC_STREAM_ADVANCE_INFO_H265_S>() - 312usize];
    ["Alignment of _VENC_STREAM_ADVANCE_INFO_H265_S"]
        [::std::mem::align_of::<_VENC_STREAM_ADVANCE_INFO_H265_S>() - 8usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32ResidualBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32ResidualBitNum) - 0usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32HeadBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32HeadBitNum) - 4usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MadiVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MadiVal) - 8usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MadpVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MadpVal) - 12usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::dPSNRVal"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, dPSNRVal) - 16usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MseLcuCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MseLcuCnt) - 24usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MseSum"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MseSum) - 28usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::stSSEInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, stSSEInfo) - 32usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32QpHstgrm"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32QpHstgrm) - 96usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MoveScene32x32Num"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MoveScene32x32Num) - 304usize];
    ["Offset of field: _VENC_STREAM_ADVANCE_INFO_H265_S::u32MoveSceneBits"]
        [::std::mem::offset_of!(_VENC_STREAM_ADVANCE_INFO_H265_S, u32MoveSceneBits) - 308usize];
};
pub type VENC_STREAM_ADVANCE_INFO_H265_S = _VENC_STREAM_ADVANCE_INFO_H265_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_INFO_PRORES_S {
    pub u32PicBytesNum: CVI_U32,
    pub u32UpdateAttrCnt: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_INFO_PRORES_S"]
        [::std::mem::size_of::<_VENC_STREAM_INFO_PRORES_S>() - 8usize];
    ["Alignment of _VENC_STREAM_INFO_PRORES_S"]
        [::std::mem::align_of::<_VENC_STREAM_INFO_PRORES_S>() - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_PRORES_S::u32PicBytesNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_PRORES_S, u32PicBytesNum) - 0usize];
    ["Offset of field: _VENC_STREAM_INFO_PRORES_S::u32UpdateAttrCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_PRORES_S, u32UpdateAttrCnt) - 4usize];
};
pub type VENC_STREAM_INFO_PRORES_S = _VENC_STREAM_INFO_PRORES_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_INFO_JPEG_S {
    pub u32PicBytesNum: CVI_U32,
    pub u32UpdateAttrCnt: CVI_U32,
    pub u32Qfactor: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_INFO_JPEG_S"]
        [::std::mem::size_of::<_VENC_STREAM_INFO_JPEG_S>() - 12usize];
    ["Alignment of _VENC_STREAM_INFO_JPEG_S"]
        [::std::mem::align_of::<_VENC_STREAM_INFO_JPEG_S>() - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_JPEG_S::u32PicBytesNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_JPEG_S, u32PicBytesNum) - 0usize];
    ["Offset of field: _VENC_STREAM_INFO_JPEG_S::u32UpdateAttrCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_JPEG_S, u32UpdateAttrCnt) - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_JPEG_S::u32Qfactor"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_JPEG_S, u32Qfactor) - 8usize];
};
pub type VENC_STREAM_INFO_JPEG_S = _VENC_STREAM_INFO_JPEG_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_STREAM_S {
    pub pstPack: *mut VENC_PACK_S,
    pub u32PackCount: CVI_U32,
    pub u32Seq: CVI_U32,
    pub __bindgen_anon_1: _VENC_STREAM_S__bindgen_ty_1,
    pub __bindgen_anon_2: _VENC_STREAM_S__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_STREAM_S__bindgen_ty_1 {
    pub stH264Info: VENC_STREAM_INFO_H264_S,
    pub stJpegInfo: VENC_STREAM_INFO_JPEG_S,
    pub stH265Info: VENC_STREAM_INFO_H265_S,
    pub stProresInfo: VENC_STREAM_INFO_PRORES_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_STREAM_S__bindgen_ty_1>() - 56usize];
    ["Alignment of _VENC_STREAM_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_STREAM_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_1::stH264Info"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_1, stH264Info) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_1::stJpegInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_1, stJpegInfo) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_1::stH265Info"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_1, stH265Info) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_1::stProresInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_1, stProresInfo) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_STREAM_S__bindgen_ty_2 {
    pub stAdvanceH264Info: VENC_STREAM_ADVANCE_INFO_H264_S,
    pub stAdvanceJpegInfo: VENC_STREAM_ADVANCE_INFO_JPEG_S,
    pub stAdvanceH265Info: VENC_STREAM_ADVANCE_INFO_H265_S,
    pub stAdvanceProresInfo: VENC_STREAM_ADVANCE_INFO_PRORES_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_S__bindgen_ty_2"]
        [::std::mem::size_of::<_VENC_STREAM_S__bindgen_ty_2>() - 312usize];
    ["Alignment of _VENC_STREAM_S__bindgen_ty_2"]
        [::std::mem::align_of::<_VENC_STREAM_S__bindgen_ty_2>() - 8usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_2::stAdvanceH264Info"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_2, stAdvanceH264Info) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_2::stAdvanceJpegInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_2, stAdvanceJpegInfo) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_2::stAdvanceH265Info"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_2, stAdvanceH265Info) - 0usize];
    ["Offset of field: _VENC_STREAM_S__bindgen_ty_2::stAdvanceProresInfo"]
        [::std::mem::offset_of!(_VENC_STREAM_S__bindgen_ty_2, stAdvanceProresInfo) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_S"][::std::mem::size_of::<_VENC_STREAM_S>() - 384usize];
    ["Alignment of _VENC_STREAM_S"][::std::mem::align_of::<_VENC_STREAM_S>() - 8usize];
    ["Offset of field: _VENC_STREAM_S::pstPack"]
        [::std::mem::offset_of!(_VENC_STREAM_S, pstPack) - 0usize];
    ["Offset of field: _VENC_STREAM_S::u32PackCount"]
        [::std::mem::offset_of!(_VENC_STREAM_S, u32PackCount) - 8usize];
    ["Offset of field: _VENC_STREAM_S::u32Seq"]
        [::std::mem::offset_of!(_VENC_STREAM_S, u32Seq) - 12usize];
};
pub type VENC_STREAM_S = _VENC_STREAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_INFO_S {
    pub enRefType: H265E_REF_TYPE_E,
    pub u32PicBytesNum: CVI_U32,
    pub u32PicCnt: CVI_U32,
    pub u32StartQp: CVI_U32,
    pub u32MeanQp: CVI_U32,
    pub bPSkip: CVI_BOOL,
    pub u32ResidualBitNum: CVI_U32,
    pub u32HeadBitNum: CVI_U32,
    pub u32MadiVal: CVI_U32,
    pub u32MadpVal: CVI_U32,
    pub u32MseSum: CVI_U32,
    pub u32MseLcuCnt: CVI_U32,
    pub dPSNRVal: f64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_INFO_S"][::std::mem::size_of::<_VENC_STREAM_INFO_S>() - 56usize];
    ["Alignment of _VENC_STREAM_INFO_S"][::std::mem::align_of::<_VENC_STREAM_INFO_S>() - 8usize];
    ["Offset of field: _VENC_STREAM_INFO_S::enRefType"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, enRefType) - 0usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32PicBytesNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32PicBytesNum) - 4usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32PicCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32PicCnt) - 8usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32StartQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32StartQp) - 12usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32MeanQp"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32MeanQp) - 16usize];
    ["Offset of field: _VENC_STREAM_INFO_S::bPSkip"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, bPSkip) - 20usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32ResidualBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32ResidualBitNum) - 24usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32HeadBitNum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32HeadBitNum) - 28usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32MadiVal"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32MadiVal) - 32usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32MadpVal"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32MadpVal) - 36usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32MseSum"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32MseSum) - 40usize];
    ["Offset of field: _VENC_STREAM_INFO_S::u32MseLcuCnt"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, u32MseLcuCnt) - 44usize];
    ["Offset of field: _VENC_STREAM_INFO_S::dPSNRVal"]
        [::std::mem::offset_of!(_VENC_STREAM_INFO_S, dPSNRVal) - 48usize];
};
pub type VENC_STREAM_INFO_S = _VENC_STREAM_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MPF_CFG_S {
    pub u8LargeThumbNailNum: CVI_U8,
    pub astLargeThumbNailSize: [SIZE_S; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MPF_CFG_S"][::std::mem::size_of::<_VENC_MPF_CFG_S>() - 20usize];
    ["Alignment of _VENC_MPF_CFG_S"][::std::mem::align_of::<_VENC_MPF_CFG_S>() - 4usize];
    ["Offset of field: _VENC_MPF_CFG_S::u8LargeThumbNailNum"]
        [::std::mem::offset_of!(_VENC_MPF_CFG_S, u8LargeThumbNailNum) - 0usize];
    ["Offset of field: _VENC_MPF_CFG_S::astLargeThumbNailSize"]
        [::std::mem::offset_of!(_VENC_MPF_CFG_S, astLargeThumbNailSize) - 4usize];
};
pub type VENC_MPF_CFG_S = _VENC_MPF_CFG_S;
pub const _VENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_SINGLE: _VENC_PIC_RECEIVE_MODE_E = 0;
pub const _VENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_MULTI: _VENC_PIC_RECEIVE_MODE_E = 1;
pub const _VENC_PIC_RECEIVE_MODE_E_VENC_PIC_RECEIVE_BUTT: _VENC_PIC_RECEIVE_MODE_E = 2;
pub type _VENC_PIC_RECEIVE_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_PIC_RECEIVE_MODE_E as VENC_PIC_RECEIVE_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ATTR_JPEG_S {
    pub bSupportDCF: CVI_BOOL,
    pub stMPFCfg: VENC_MPF_CFG_S,
    pub enReceiveMode: VENC_PIC_RECEIVE_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_JPEG_S"][::std::mem::size_of::<_VENC_ATTR_JPEG_S>() - 28usize];
    ["Alignment of _VENC_ATTR_JPEG_S"][::std::mem::align_of::<_VENC_ATTR_JPEG_S>() - 4usize];
    ["Offset of field: _VENC_ATTR_JPEG_S::bSupportDCF"]
        [::std::mem::offset_of!(_VENC_ATTR_JPEG_S, bSupportDCF) - 0usize];
    ["Offset of field: _VENC_ATTR_JPEG_S::stMPFCfg"]
        [::std::mem::offset_of!(_VENC_ATTR_JPEG_S, stMPFCfg) - 4usize];
    ["Offset of field: _VENC_ATTR_JPEG_S::enReceiveMode"]
        [::std::mem::offset_of!(_VENC_ATTR_JPEG_S, enReceiveMode) - 24usize];
};
pub type VENC_ATTR_JPEG_S = _VENC_ATTR_JPEG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ATTR_H264_S {
    pub bRcnRefShareBuf: CVI_BOOL,
    pub bSingleLumaBuf: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_H264_S"][::std::mem::size_of::<_VENC_ATTR_H264_S>() - 2usize];
    ["Alignment of _VENC_ATTR_H264_S"][::std::mem::align_of::<_VENC_ATTR_H264_S>() - 1usize];
    ["Offset of field: _VENC_ATTR_H264_S::bRcnRefShareBuf"]
        [::std::mem::offset_of!(_VENC_ATTR_H264_S, bRcnRefShareBuf) - 0usize];
    ["Offset of field: _VENC_ATTR_H264_S::bSingleLumaBuf"]
        [::std::mem::offset_of!(_VENC_ATTR_H264_S, bSingleLumaBuf) - 1usize];
};
pub type VENC_ATTR_H264_S = _VENC_ATTR_H264_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ATTR_H265_S {
    pub bRcnRefShareBuf: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_H265_S"][::std::mem::size_of::<_VENC_ATTR_H265_S>() - 1usize];
    ["Alignment of _VENC_ATTR_H265_S"][::std::mem::align_of::<_VENC_ATTR_H265_S>() - 1usize];
    ["Offset of field: _VENC_ATTR_H265_S::bRcnRefShareBuf"]
        [::std::mem::offset_of!(_VENC_ATTR_H265_S, bRcnRefShareBuf) - 0usize];
};
pub type VENC_ATTR_H265_S = _VENC_ATTR_H265_S;
pub const _PRORES_FRAMERATE_PRORES_FR_UNKNOWN: _PRORES_FRAMERATE = 0;
pub const _PRORES_FRAMERATE_PRORES_FR_23_976: _PRORES_FRAMERATE = 1;
pub const _PRORES_FRAMERATE_PRORES_FR_24: _PRORES_FRAMERATE = 2;
pub const _PRORES_FRAMERATE_PRORES_FR_25: _PRORES_FRAMERATE = 3;
pub const _PRORES_FRAMERATE_PRORES_FR_29_97: _PRORES_FRAMERATE = 4;
pub const _PRORES_FRAMERATE_PRORES_FR_30: _PRORES_FRAMERATE = 5;
pub const _PRORES_FRAMERATE_PRORES_FR_50: _PRORES_FRAMERATE = 6;
pub const _PRORES_FRAMERATE_PRORES_FR_59_94: _PRORES_FRAMERATE = 7;
pub const _PRORES_FRAMERATE_PRORES_FR_60: _PRORES_FRAMERATE = 8;
pub const _PRORES_FRAMERATE_PRORES_FR_100: _PRORES_FRAMERATE = 9;
pub const _PRORES_FRAMERATE_PRORES_FR_119_88: _PRORES_FRAMERATE = 10;
pub const _PRORES_FRAMERATE_PRORES_FR_120: _PRORES_FRAMERATE = 11;
pub const _PRORES_FRAMERATE_PRORES_FR_BUTT: _PRORES_FRAMERATE = 12;
pub type _PRORES_FRAMERATE = ::std::os::raw::c_uint;
pub use self::_PRORES_FRAMERATE as PRORES_FRAMERATE;
pub const _PRORES_ASPECT_RATIO_PRORES_ASPECT_RATIO_UNKNOWN: _PRORES_ASPECT_RATIO = 0;
pub const _PRORES_ASPECT_RATIO_PRORES_ASPECT_RATIO_SQUARE: _PRORES_ASPECT_RATIO = 1;
pub const _PRORES_ASPECT_RATIO_PRORES_ASPECT_RATIO_4_3: _PRORES_ASPECT_RATIO = 2;
pub const _PRORES_ASPECT_RATIO_PRORES_ASPECT_RATIO_16_9: _PRORES_ASPECT_RATIO = 3;
pub const _PRORES_ASPECT_RATIO_PRORES_ASPECT_RATIO_BUTT: _PRORES_ASPECT_RATIO = 4;
pub type _PRORES_ASPECT_RATIO = ::std::os::raw::c_uint;
pub use self::_PRORES_ASPECT_RATIO as PRORES_ASPECT_RATIO;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ATTR_PRORES_S {
    pub cIdentifier: [::std::os::raw::c_char; 4usize],
    pub enFrameRateCode: PRORES_FRAMERATE,
    pub enAspectRatio: PRORES_ASPECT_RATIO,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_PRORES_S"][::std::mem::size_of::<_VENC_ATTR_PRORES_S>() - 12usize];
    ["Alignment of _VENC_ATTR_PRORES_S"][::std::mem::align_of::<_VENC_ATTR_PRORES_S>() - 4usize];
    ["Offset of field: _VENC_ATTR_PRORES_S::cIdentifier"]
        [::std::mem::offset_of!(_VENC_ATTR_PRORES_S, cIdentifier) - 0usize];
    ["Offset of field: _VENC_ATTR_PRORES_S::enFrameRateCode"]
        [::std::mem::offset_of!(_VENC_ATTR_PRORES_S, enFrameRateCode) - 4usize];
    ["Offset of field: _VENC_ATTR_PRORES_S::enAspectRatio"]
        [::std::mem::offset_of!(_VENC_ATTR_PRORES_S, enAspectRatio) - 8usize];
};
pub type VENC_ATTR_PRORES_S = _VENC_ATTR_PRORES_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_ATTR_S {
    pub enType: PAYLOAD_TYPE_E,
    pub u32MaxPicWidth: CVI_U32,
    pub u32MaxPicHeight: CVI_U32,
    pub u32BufSize: CVI_U32,
    pub u32Profile: CVI_U32,
    pub bByFrame: CVI_BOOL,
    pub u32PicWidth: CVI_U32,
    pub u32PicHeight: CVI_U32,
    pub bSingleCore: CVI_BOOL,
    pub bEsBufQueueEn: CVI_BOOL,
    pub bIsoSendFrmEn: CVI_BOOL,
    pub __bindgen_anon_1: _VENC_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_ATTR_S__bindgen_ty_1 {
    pub stAttrH264e: VENC_ATTR_H264_S,
    pub stAttrH265e: VENC_ATTR_H265_S,
    pub stAttrJpege: VENC_ATTR_JPEG_S,
    pub stAttrProres: VENC_ATTR_PRORES_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_ATTR_S__bindgen_ty_1>() - 28usize];
    ["Alignment of _VENC_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_ATTR_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_ATTR_S__bindgen_ty_1::stAttrH264e"]
        [::std::mem::offset_of!(_VENC_ATTR_S__bindgen_ty_1, stAttrH264e) - 0usize];
    ["Offset of field: _VENC_ATTR_S__bindgen_ty_1::stAttrH265e"]
        [::std::mem::offset_of!(_VENC_ATTR_S__bindgen_ty_1, stAttrH265e) - 0usize];
    ["Offset of field: _VENC_ATTR_S__bindgen_ty_1::stAttrJpege"]
        [::std::mem::offset_of!(_VENC_ATTR_S__bindgen_ty_1, stAttrJpege) - 0usize];
    ["Offset of field: _VENC_ATTR_S__bindgen_ty_1::stAttrProres"]
        [::std::mem::offset_of!(_VENC_ATTR_S__bindgen_ty_1, stAttrProres) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ATTR_S"][::std::mem::size_of::<_VENC_ATTR_S>() - 64usize];
    ["Alignment of _VENC_ATTR_S"][::std::mem::align_of::<_VENC_ATTR_S>() - 4usize];
    ["Offset of field: _VENC_ATTR_S::enType"]
        [::std::mem::offset_of!(_VENC_ATTR_S, enType) - 0usize];
    ["Offset of field: _VENC_ATTR_S::u32MaxPicWidth"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32MaxPicWidth) - 4usize];
    ["Offset of field: _VENC_ATTR_S::u32MaxPicHeight"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32MaxPicHeight) - 8usize];
    ["Offset of field: _VENC_ATTR_S::u32BufSize"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32BufSize) - 12usize];
    ["Offset of field: _VENC_ATTR_S::u32Profile"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32Profile) - 16usize];
    ["Offset of field: _VENC_ATTR_S::bByFrame"]
        [::std::mem::offset_of!(_VENC_ATTR_S, bByFrame) - 20usize];
    ["Offset of field: _VENC_ATTR_S::u32PicWidth"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32PicWidth) - 24usize];
    ["Offset of field: _VENC_ATTR_S::u32PicHeight"]
        [::std::mem::offset_of!(_VENC_ATTR_S, u32PicHeight) - 28usize];
    ["Offset of field: _VENC_ATTR_S::bSingleCore"]
        [::std::mem::offset_of!(_VENC_ATTR_S, bSingleCore) - 32usize];
    ["Offset of field: _VENC_ATTR_S::bEsBufQueueEn"]
        [::std::mem::offset_of!(_VENC_ATTR_S, bEsBufQueueEn) - 33usize];
    ["Offset of field: _VENC_ATTR_S::bIsoSendFrmEn"]
        [::std::mem::offset_of!(_VENC_ATTR_S, bIsoSendFrmEn) - 34usize];
};
pub type VENC_ATTR_S = _VENC_ATTR_S;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_NORMALP: _VENC_GOP_MODE_E = 0;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_DUALP: _VENC_GOP_MODE_E = 1;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_SMARTP: _VENC_GOP_MODE_E = 2;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_ADVSMARTP: _VENC_GOP_MODE_E = 3;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_BIPREDB: _VENC_GOP_MODE_E = 4;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_LOWDELAYB: _VENC_GOP_MODE_E = 5;
pub const _VENC_GOP_MODE_E_VENC_GOPMODE_BUTT: _VENC_GOP_MODE_E = 6;
pub type _VENC_GOP_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_GOP_MODE_E as VENC_GOP_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_GOP_NORMALP_S {
    pub s32IPQpDelta: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_NORMALP_S"][::std::mem::size_of::<_VENC_GOP_NORMALP_S>() - 4usize];
    ["Alignment of _VENC_GOP_NORMALP_S"][::std::mem::align_of::<_VENC_GOP_NORMALP_S>() - 4usize];
    ["Offset of field: _VENC_GOP_NORMALP_S::s32IPQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_NORMALP_S, s32IPQpDelta) - 0usize];
};
pub type VENC_GOP_NORMALP_S = _VENC_GOP_NORMALP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_GOP_DUALP_S {
    pub u32SPInterval: CVI_U32,
    pub s32SPQpDelta: CVI_S32,
    pub s32IPQpDelta: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_DUALP_S"][::std::mem::size_of::<_VENC_GOP_DUALP_S>() - 12usize];
    ["Alignment of _VENC_GOP_DUALP_S"][::std::mem::align_of::<_VENC_GOP_DUALP_S>() - 4usize];
    ["Offset of field: _VENC_GOP_DUALP_S::u32SPInterval"]
        [::std::mem::offset_of!(_VENC_GOP_DUALP_S, u32SPInterval) - 0usize];
    ["Offset of field: _VENC_GOP_DUALP_S::s32SPQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_DUALP_S, s32SPQpDelta) - 4usize];
    ["Offset of field: _VENC_GOP_DUALP_S::s32IPQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_DUALP_S, s32IPQpDelta) - 8usize];
};
pub type VENC_GOP_DUALP_S = _VENC_GOP_DUALP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_GOP_SMARTP_S {
    pub u32BgInterval: CVI_U32,
    pub s32BgQpDelta: CVI_S32,
    pub s32ViQpDelta: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_SMARTP_S"][::std::mem::size_of::<_VENC_GOP_SMARTP_S>() - 12usize];
    ["Alignment of _VENC_GOP_SMARTP_S"][::std::mem::align_of::<_VENC_GOP_SMARTP_S>() - 4usize];
    ["Offset of field: _VENC_GOP_SMARTP_S::u32BgInterval"]
        [::std::mem::offset_of!(_VENC_GOP_SMARTP_S, u32BgInterval) - 0usize];
    ["Offset of field: _VENC_GOP_SMARTP_S::s32BgQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_SMARTP_S, s32BgQpDelta) - 4usize];
    ["Offset of field: _VENC_GOP_SMARTP_S::s32ViQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_SMARTP_S, s32ViQpDelta) - 8usize];
};
pub type VENC_GOP_SMARTP_S = _VENC_GOP_SMARTP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_GOP_ADVSMARTP_S {
    pub u32BgInterval: CVI_U32,
    pub s32BgQpDelta: CVI_S32,
    pub s32ViQpDelta: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_ADVSMARTP_S"][::std::mem::size_of::<_VENC_GOP_ADVSMARTP_S>() - 12usize];
    ["Alignment of _VENC_GOP_ADVSMARTP_S"]
        [::std::mem::align_of::<_VENC_GOP_ADVSMARTP_S>() - 4usize];
    ["Offset of field: _VENC_GOP_ADVSMARTP_S::u32BgInterval"]
        [::std::mem::offset_of!(_VENC_GOP_ADVSMARTP_S, u32BgInterval) - 0usize];
    ["Offset of field: _VENC_GOP_ADVSMARTP_S::s32BgQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_ADVSMARTP_S, s32BgQpDelta) - 4usize];
    ["Offset of field: _VENC_GOP_ADVSMARTP_S::s32ViQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_ADVSMARTP_S, s32ViQpDelta) - 8usize];
};
pub type VENC_GOP_ADVSMARTP_S = _VENC_GOP_ADVSMARTP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_GOP_BIPREDB_S {
    pub u32BFrmNum: CVI_U32,
    pub s32BQpDelta: CVI_S32,
    pub s32IPQpDelta: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_BIPREDB_S"][::std::mem::size_of::<_VENC_GOP_BIPREDB_S>() - 12usize];
    ["Alignment of _VENC_GOP_BIPREDB_S"][::std::mem::align_of::<_VENC_GOP_BIPREDB_S>() - 4usize];
    ["Offset of field: _VENC_GOP_BIPREDB_S::u32BFrmNum"]
        [::std::mem::offset_of!(_VENC_GOP_BIPREDB_S, u32BFrmNum) - 0usize];
    ["Offset of field: _VENC_GOP_BIPREDB_S::s32BQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_BIPREDB_S, s32BQpDelta) - 4usize];
    ["Offset of field: _VENC_GOP_BIPREDB_S::s32IPQpDelta"]
        [::std::mem::offset_of!(_VENC_GOP_BIPREDB_S, s32IPQpDelta) - 8usize];
};
pub type VENC_GOP_BIPREDB_S = _VENC_GOP_BIPREDB_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_GOP_ATTR_S {
    pub enGopMode: VENC_GOP_MODE_E,
    pub __bindgen_anon_1: _VENC_GOP_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_GOP_ATTR_S__bindgen_ty_1 {
    pub stNormalP: VENC_GOP_NORMALP_S,
    pub stDualP: VENC_GOP_DUALP_S,
    pub stSmartP: VENC_GOP_SMARTP_S,
    pub stAdvSmartP: VENC_GOP_ADVSMARTP_S,
    pub stBipredB: VENC_GOP_BIPREDB_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_GOP_ATTR_S__bindgen_ty_1>() - 12usize];
    ["Alignment of _VENC_GOP_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_GOP_ATTR_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_GOP_ATTR_S__bindgen_ty_1::stNormalP"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S__bindgen_ty_1, stNormalP) - 0usize];
    ["Offset of field: _VENC_GOP_ATTR_S__bindgen_ty_1::stDualP"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S__bindgen_ty_1, stDualP) - 0usize];
    ["Offset of field: _VENC_GOP_ATTR_S__bindgen_ty_1::stSmartP"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S__bindgen_ty_1, stSmartP) - 0usize];
    ["Offset of field: _VENC_GOP_ATTR_S__bindgen_ty_1::stAdvSmartP"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S__bindgen_ty_1, stAdvSmartP) - 0usize];
    ["Offset of field: _VENC_GOP_ATTR_S__bindgen_ty_1::stBipredB"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S__bindgen_ty_1, stBipredB) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_GOP_ATTR_S"][::std::mem::size_of::<_VENC_GOP_ATTR_S>() - 16usize];
    ["Alignment of _VENC_GOP_ATTR_S"][::std::mem::align_of::<_VENC_GOP_ATTR_S>() - 4usize];
    ["Offset of field: _VENC_GOP_ATTR_S::enGopMode"]
        [::std::mem::offset_of!(_VENC_GOP_ATTR_S, enGopMode) - 0usize];
};
pub type VENC_GOP_ATTR_S = _VENC_GOP_ATTR_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_CHN_ATTR_S {
    pub stVencAttr: VENC_ATTR_S,
    pub stRcAttr: VENC_RC_ATTR_S,
    pub stGopAttr: VENC_GOP_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CHN_ATTR_S"][::std::mem::size_of::<_VENC_CHN_ATTR_S>() - 112usize];
    ["Alignment of _VENC_CHN_ATTR_S"][::std::mem::align_of::<_VENC_CHN_ATTR_S>() - 4usize];
    ["Offset of field: _VENC_CHN_ATTR_S::stVencAttr"]
        [::std::mem::offset_of!(_VENC_CHN_ATTR_S, stVencAttr) - 0usize];
    ["Offset of field: _VENC_CHN_ATTR_S::stRcAttr"]
        [::std::mem::offset_of!(_VENC_CHN_ATTR_S, stRcAttr) - 64usize];
    ["Offset of field: _VENC_CHN_ATTR_S::stGopAttr"]
        [::std::mem::offset_of!(_VENC_CHN_ATTR_S, stGopAttr) - 96usize];
};
pub type VENC_CHN_ATTR_S = _VENC_CHN_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_RECV_PIC_PARAM_S {
    pub s32RecvPicNum: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RECV_PIC_PARAM_S"][::std::mem::size_of::<_VENC_RECV_PIC_PARAM_S>() - 4usize];
    ["Alignment of _VENC_RECV_PIC_PARAM_S"]
        [::std::mem::align_of::<_VENC_RECV_PIC_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_RECV_PIC_PARAM_S::s32RecvPicNum"]
        [::std::mem::offset_of!(_VENC_RECV_PIC_PARAM_S, s32RecvPicNum) - 0usize];
};
pub type VENC_RECV_PIC_PARAM_S = _VENC_RECV_PIC_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_CHN_STATUS_S {
    pub u32LeftPics: CVI_U32,
    pub u32LeftStreamBytes: CVI_U32,
    pub u32LeftStreamFrames: CVI_U32,
    pub u32CurPacks: CVI_U32,
    pub u32LeftRecvPics: CVI_U32,
    pub u32LeftEncPics: CVI_U32,
    pub bJpegSnapEnd: CVI_BOOL,
    pub stVencStrmInfo: VENC_STREAM_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CHN_STATUS_S"][::std::mem::size_of::<_VENC_CHN_STATUS_S>() - 88usize];
    ["Alignment of _VENC_CHN_STATUS_S"][::std::mem::align_of::<_VENC_CHN_STATUS_S>() - 8usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32LeftPics"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32LeftPics) - 0usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32LeftStreamBytes"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32LeftStreamBytes) - 4usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32LeftStreamFrames"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32LeftStreamFrames) - 8usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32CurPacks"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32CurPacks) - 12usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32LeftRecvPics"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32LeftRecvPics) - 16usize];
    ["Offset of field: _VENC_CHN_STATUS_S::u32LeftEncPics"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, u32LeftEncPics) - 20usize];
    ["Offset of field: _VENC_CHN_STATUS_S::bJpegSnapEnd"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, bJpegSnapEnd) - 24usize];
    ["Offset of field: _VENC_CHN_STATUS_S::stVencStrmInfo"]
        [::std::mem::offset_of!(_VENC_CHN_STATUS_S, stVencStrmInfo) - 32usize];
};
pub type VENC_CHN_STATUS_S = _VENC_CHN_STATUS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_SLICE_SPLIT_S {
    pub bSplitEnable: CVI_BOOL,
    pub u32MbLineNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_SLICE_SPLIT_S"]
        [::std::mem::size_of::<_VENC_H264_SLICE_SPLIT_S>() - 8usize];
    ["Alignment of _VENC_H264_SLICE_SPLIT_S"]
        [::std::mem::align_of::<_VENC_H264_SLICE_SPLIT_S>() - 4usize];
    ["Offset of field: _VENC_H264_SLICE_SPLIT_S::bSplitEnable"]
        [::std::mem::offset_of!(_VENC_H264_SLICE_SPLIT_S, bSplitEnable) - 0usize];
    ["Offset of field: _VENC_H264_SLICE_SPLIT_S::u32MbLineNum"]
        [::std::mem::offset_of!(_VENC_H264_SLICE_SPLIT_S, u32MbLineNum) - 4usize];
};
pub type VENC_H264_SLICE_SPLIT_S = _VENC_H264_SLICE_SPLIT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_INTRA_PRED_S {
    pub constrained_intra_pred_flag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_INTRA_PRED_S"][::std::mem::size_of::<_VENC_H264_INTRA_PRED_S>() - 4usize];
    ["Alignment of _VENC_H264_INTRA_PRED_S"]
        [::std::mem::align_of::<_VENC_H264_INTRA_PRED_S>() - 4usize];
    ["Offset of field: _VENC_H264_INTRA_PRED_S::constrained_intra_pred_flag"]
        [::std::mem::offset_of!(_VENC_H264_INTRA_PRED_S, constrained_intra_pred_flag) - 0usize];
};
pub type VENC_H264_INTRA_PRED_S = _VENC_H264_INTRA_PRED_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_TRANS_S {
    pub u32IntraTransMode: CVI_U32,
    pub u32InterTransMode: CVI_U32,
    pub bScalingListValid: CVI_BOOL,
    pub InterScalingList8X8: [CVI_U8; 64usize],
    pub IntraScalingList8X8: [CVI_U8; 64usize],
    pub chroma_qp_index_offset: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_TRANS_S"][::std::mem::size_of::<_VENC_H264_TRANS_S>() - 144usize];
    ["Alignment of _VENC_H264_TRANS_S"][::std::mem::align_of::<_VENC_H264_TRANS_S>() - 4usize];
    ["Offset of field: _VENC_H264_TRANS_S::u32IntraTransMode"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, u32IntraTransMode) - 0usize];
    ["Offset of field: _VENC_H264_TRANS_S::u32InterTransMode"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, u32InterTransMode) - 4usize];
    ["Offset of field: _VENC_H264_TRANS_S::bScalingListValid"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, bScalingListValid) - 8usize];
    ["Offset of field: _VENC_H264_TRANS_S::InterScalingList8X8"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, InterScalingList8X8) - 9usize];
    ["Offset of field: _VENC_H264_TRANS_S::IntraScalingList8X8"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, IntraScalingList8X8) - 73usize];
    ["Offset of field: _VENC_H264_TRANS_S::chroma_qp_index_offset"]
        [::std::mem::offset_of!(_VENC_H264_TRANS_S, chroma_qp_index_offset) - 140usize];
};
pub type VENC_H264_TRANS_S = _VENC_H264_TRANS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_ENTROPY_S {
    pub u32EntropyEncModeI: CVI_U32,
    pub u32EntropyEncModeP: CVI_U32,
    pub u32EntropyEncModeB: CVI_U32,
    pub cabac_init_idc: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_ENTROPY_S"][::std::mem::size_of::<_VENC_H264_ENTROPY_S>() - 16usize];
    ["Alignment of _VENC_H264_ENTROPY_S"][::std::mem::align_of::<_VENC_H264_ENTROPY_S>() - 4usize];
    ["Offset of field: _VENC_H264_ENTROPY_S::u32EntropyEncModeI"]
        [::std::mem::offset_of!(_VENC_H264_ENTROPY_S, u32EntropyEncModeI) - 0usize];
    ["Offset of field: _VENC_H264_ENTROPY_S::u32EntropyEncModeP"]
        [::std::mem::offset_of!(_VENC_H264_ENTROPY_S, u32EntropyEncModeP) - 4usize];
    ["Offset of field: _VENC_H264_ENTROPY_S::u32EntropyEncModeB"]
        [::std::mem::offset_of!(_VENC_H264_ENTROPY_S, u32EntropyEncModeB) - 8usize];
    ["Offset of field: _VENC_H264_ENTROPY_S::cabac_init_idc"]
        [::std::mem::offset_of!(_VENC_H264_ENTROPY_S, cabac_init_idc) - 12usize];
};
pub type VENC_H264_ENTROPY_S = _VENC_H264_ENTROPY_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_POC_S {
    pub pic_order_cnt_type: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_POC_S"][::std::mem::size_of::<_VENC_H264_POC_S>() - 4usize];
    ["Alignment of _VENC_H264_POC_S"][::std::mem::align_of::<_VENC_H264_POC_S>() - 4usize];
    ["Offset of field: _VENC_H264_POC_S::pic_order_cnt_type"]
        [::std::mem::offset_of!(_VENC_H264_POC_S, pic_order_cnt_type) - 0usize];
};
pub type VENC_H264_POC_S = _VENC_H264_POC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_DBLK_S {
    pub disable_deblocking_filter_idc: CVI_U32,
    pub slice_alpha_c0_offset_div2: CVI_S32,
    pub slice_beta_offset_div2: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_DBLK_S"][::std::mem::size_of::<_VENC_H264_DBLK_S>() - 12usize];
    ["Alignment of _VENC_H264_DBLK_S"][::std::mem::align_of::<_VENC_H264_DBLK_S>() - 4usize];
    ["Offset of field: _VENC_H264_DBLK_S::disable_deblocking_filter_idc"]
        [::std::mem::offset_of!(_VENC_H264_DBLK_S, disable_deblocking_filter_idc) - 0usize];
    ["Offset of field: _VENC_H264_DBLK_S::slice_alpha_c0_offset_div2"]
        [::std::mem::offset_of!(_VENC_H264_DBLK_S, slice_alpha_c0_offset_div2) - 4usize];
    ["Offset of field: _VENC_H264_DBLK_S::slice_beta_offset_div2"]
        [::std::mem::offset_of!(_VENC_H264_DBLK_S, slice_beta_offset_div2) - 8usize];
};
pub type VENC_H264_DBLK_S = _VENC_H264_DBLK_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_VUI_TIME_INFO_S {
    pub timing_info_present_flag: CVI_U8,
    pub fixed_frame_rate_flag: CVI_U8,
    pub num_units_in_tick: CVI_U32,
    pub time_scale: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_VUI_TIME_INFO_S"]
        [::std::mem::size_of::<_VENC_H264_VUI_TIME_INFO_S>() - 12usize];
    ["Alignment of _VENC_H264_VUI_TIME_INFO_S"]
        [::std::mem::align_of::<_VENC_H264_VUI_TIME_INFO_S>() - 4usize];
    ["Offset of field: _VENC_H264_VUI_TIME_INFO_S::timing_info_present_flag"]
        [::std::mem::offset_of!(_VENC_H264_VUI_TIME_INFO_S, timing_info_present_flag) - 0usize];
    ["Offset of field: _VENC_H264_VUI_TIME_INFO_S::fixed_frame_rate_flag"]
        [::std::mem::offset_of!(_VENC_H264_VUI_TIME_INFO_S, fixed_frame_rate_flag) - 1usize];
    ["Offset of field: _VENC_H264_VUI_TIME_INFO_S::num_units_in_tick"]
        [::std::mem::offset_of!(_VENC_H264_VUI_TIME_INFO_S, num_units_in_tick) - 4usize];
    ["Offset of field: _VENC_H264_VUI_TIME_INFO_S::time_scale"]
        [::std::mem::offset_of!(_VENC_H264_VUI_TIME_INFO_S, time_scale) - 8usize];
};
pub type VENC_VUI_H264_TIME_INFO_S = _VENC_H264_VUI_TIME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_VUI_ASPECT_RATIO_S {
    pub aspect_ratio_info_present_flag: CVI_U8,
    pub aspect_ratio_idc: CVI_U8,
    pub overscan_info_present_flag: CVI_U8,
    pub overscan_appropriate_flag: CVI_U8,
    pub sar_width: CVI_U16,
    pub sar_height: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_VUI_ASPECT_RATIO_S"]
        [::std::mem::size_of::<_VENC_VUI_ASPECT_RATIO_S>() - 8usize];
    ["Alignment of _VENC_VUI_ASPECT_RATIO_S"]
        [::std::mem::align_of::<_VENC_VUI_ASPECT_RATIO_S>() - 2usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::aspect_ratio_info_present_flag"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, aspect_ratio_info_present_flag) - 0usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::aspect_ratio_idc"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, aspect_ratio_idc) - 1usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::overscan_info_present_flag"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, overscan_info_present_flag) - 2usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::overscan_appropriate_flag"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, overscan_appropriate_flag) - 3usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::sar_width"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, sar_width) - 4usize];
    ["Offset of field: _VENC_VUI_ASPECT_RATIO_S::sar_height"]
        [::std::mem::offset_of!(_VENC_VUI_ASPECT_RATIO_S, sar_height) - 6usize];
};
pub type VENC_VUI_ASPECT_RATIO_S = _VENC_VUI_ASPECT_RATIO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_VUI_VIDEO_SIGNAL_S {
    pub video_signal_type_present_flag: CVI_U8,
    pub video_format: CVI_U8,
    pub video_full_range_flag: CVI_U8,
    pub colour_description_present_flag: CVI_U8,
    pub colour_primaries: CVI_U8,
    pub transfer_characteristics: CVI_U8,
    pub matrix_coefficients: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_VUI_VIDEO_SIGNAL_S"]
        [::std::mem::size_of::<_VENC_VUI_VIDEO_SIGNAL_S>() - 7usize];
    ["Alignment of _VENC_VUI_VIDEO_SIGNAL_S"]
        [::std::mem::align_of::<_VENC_VUI_VIDEO_SIGNAL_S>() - 1usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::video_signal_type_present_flag"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, video_signal_type_present_flag) - 0usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::video_format"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, video_format) - 1usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::video_full_range_flag"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, video_full_range_flag) - 2usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::colour_description_present_flag"][::std::mem::offset_of!(
        _VENC_VUI_VIDEO_SIGNAL_S,
        colour_description_present_flag
    ) - 3usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::colour_primaries"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, colour_primaries) - 4usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::transfer_characteristics"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, transfer_characteristics) - 5usize];
    ["Offset of field: _VENC_VUI_VIDEO_SIGNAL_S::matrix_coefficients"]
        [::std::mem::offset_of!(_VENC_VUI_VIDEO_SIGNAL_S, matrix_coefficients) - 6usize];
};
pub type VENC_VUI_VIDEO_SIGNAL_S = _VENC_VUI_VIDEO_SIGNAL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_VUI_BITSTREAM_RESTRIC_S {
    pub bitstream_restriction_flag: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_VUI_BITSTREAM_RESTRIC_S"]
        [::std::mem::size_of::<_VENC_VUI_BITSTREAM_RESTRIC_S>() - 1usize];
    ["Alignment of _VENC_VUI_BITSTREAM_RESTRIC_S"]
        [::std::mem::align_of::<_VENC_VUI_BITSTREAM_RESTRIC_S>() - 1usize];
    ["Offset of field: _VENC_VUI_BITSTREAM_RESTRIC_S::bitstream_restriction_flag"][::std::mem::offset_of!(
        _VENC_VUI_BITSTREAM_RESTRIC_S,
        bitstream_restriction_flag
    ) - 0usize];
};
pub type VENC_VUI_BITSTREAM_RESTRIC_S = _VENC_VUI_BITSTREAM_RESTRIC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H264_VUI_S {
    pub stVuiAspectRatio: VENC_VUI_ASPECT_RATIO_S,
    pub stVuiTimeInfo: VENC_VUI_H264_TIME_INFO_S,
    pub stVuiVideoSignal: VENC_VUI_VIDEO_SIGNAL_S,
    pub stVuiBitstreamRestric: VENC_VUI_BITSTREAM_RESTRIC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H264_VUI_S"][::std::mem::size_of::<_VENC_H264_VUI_S>() - 28usize];
    ["Alignment of _VENC_H264_VUI_S"][::std::mem::align_of::<_VENC_H264_VUI_S>() - 4usize];
    ["Offset of field: _VENC_H264_VUI_S::stVuiAspectRatio"]
        [::std::mem::offset_of!(_VENC_H264_VUI_S, stVuiAspectRatio) - 0usize];
    ["Offset of field: _VENC_H264_VUI_S::stVuiTimeInfo"]
        [::std::mem::offset_of!(_VENC_H264_VUI_S, stVuiTimeInfo) - 8usize];
    ["Offset of field: _VENC_H264_VUI_S::stVuiVideoSignal"]
        [::std::mem::offset_of!(_VENC_H264_VUI_S, stVuiVideoSignal) - 20usize];
    ["Offset of field: _VENC_H264_VUI_S::stVuiBitstreamRestric"]
        [::std::mem::offset_of!(_VENC_H264_VUI_S, stVuiBitstreamRestric) - 27usize];
};
pub type VENC_H264_VUI_S = _VENC_H264_VUI_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_VUI_H265_TIME_INFO_S {
    pub timing_info_present_flag: CVI_U32,
    pub num_units_in_tick: CVI_U32,
    pub time_scale: CVI_U32,
    pub num_ticks_poc_diff_one_minus1: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_VUI_H265_TIME_INFO_S"]
        [::std::mem::size_of::<_VENC_VUI_H265_TIME_INFO_S>() - 16usize];
    ["Alignment of _VENC_VUI_H265_TIME_INFO_S"]
        [::std::mem::align_of::<_VENC_VUI_H265_TIME_INFO_S>() - 4usize];
    ["Offset of field: _VENC_VUI_H265_TIME_INFO_S::timing_info_present_flag"]
        [::std::mem::offset_of!(_VENC_VUI_H265_TIME_INFO_S, timing_info_present_flag) - 0usize];
    ["Offset of field: _VENC_VUI_H265_TIME_INFO_S::num_units_in_tick"]
        [::std::mem::offset_of!(_VENC_VUI_H265_TIME_INFO_S, num_units_in_tick) - 4usize];
    ["Offset of field: _VENC_VUI_H265_TIME_INFO_S::time_scale"]
        [::std::mem::offset_of!(_VENC_VUI_H265_TIME_INFO_S, time_scale) - 8usize];
    ["Offset of field: _VENC_VUI_H265_TIME_INFO_S::num_ticks_poc_diff_one_minus1"][::std::mem::offset_of!(
        _VENC_VUI_H265_TIME_INFO_S,
        num_ticks_poc_diff_one_minus1
    ) - 12usize];
};
pub type VENC_VUI_H265_TIME_INFO_S = _VENC_VUI_H265_TIME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_VUI_S {
    pub stVuiAspectRatio: VENC_VUI_ASPECT_RATIO_S,
    pub stVuiTimeInfo: VENC_VUI_H265_TIME_INFO_S,
    pub stVuiVideoSignal: VENC_VUI_VIDEO_SIGNAL_S,
    pub stVuiBitstreamRestric: VENC_VUI_BITSTREAM_RESTRIC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_VUI_S"][::std::mem::size_of::<_VENC_H265_VUI_S>() - 32usize];
    ["Alignment of _VENC_H265_VUI_S"][::std::mem::align_of::<_VENC_H265_VUI_S>() - 4usize];
    ["Offset of field: _VENC_H265_VUI_S::stVuiAspectRatio"]
        [::std::mem::offset_of!(_VENC_H265_VUI_S, stVuiAspectRatio) - 0usize];
    ["Offset of field: _VENC_H265_VUI_S::stVuiTimeInfo"]
        [::std::mem::offset_of!(_VENC_H265_VUI_S, stVuiTimeInfo) - 8usize];
    ["Offset of field: _VENC_H265_VUI_S::stVuiVideoSignal"]
        [::std::mem::offset_of!(_VENC_H265_VUI_S, stVuiVideoSignal) - 24usize];
    ["Offset of field: _VENC_H265_VUI_S::stVuiBitstreamRestric"]
        [::std::mem::offset_of!(_VENC_H265_VUI_S, stVuiBitstreamRestric) - 31usize];
};
pub type VENC_H265_VUI_S = _VENC_H265_VUI_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_JPEG_PARAM_S {
    pub u32Qfactor: CVI_U32,
    pub u8YQt: [CVI_U8; 64usize],
    pub u8CbQt: [CVI_U8; 64usize],
    pub u8CrQt: [CVI_U8; 64usize],
    pub u32MCUPerECS: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_JPEG_PARAM_S"][::std::mem::size_of::<_VENC_JPEG_PARAM_S>() - 200usize];
    ["Alignment of _VENC_JPEG_PARAM_S"][::std::mem::align_of::<_VENC_JPEG_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_JPEG_PARAM_S::u32Qfactor"]
        [::std::mem::offset_of!(_VENC_JPEG_PARAM_S, u32Qfactor) - 0usize];
    ["Offset of field: _VENC_JPEG_PARAM_S::u8YQt"]
        [::std::mem::offset_of!(_VENC_JPEG_PARAM_S, u8YQt) - 4usize];
    ["Offset of field: _VENC_JPEG_PARAM_S::u8CbQt"]
        [::std::mem::offset_of!(_VENC_JPEG_PARAM_S, u8CbQt) - 68usize];
    ["Offset of field: _VENC_JPEG_PARAM_S::u8CrQt"]
        [::std::mem::offset_of!(_VENC_JPEG_PARAM_S, u8CrQt) - 132usize];
    ["Offset of field: _VENC_JPEG_PARAM_S::u32MCUPerECS"]
        [::std::mem::offset_of!(_VENC_JPEG_PARAM_S, u32MCUPerECS) - 196usize];
};
pub type VENC_JPEG_PARAM_S = _VENC_JPEG_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MJPEG_PARAM_S {
    pub u8YQt: [CVI_U8; 64usize],
    pub u8CbQt: [CVI_U8; 64usize],
    pub u8CrQt: [CVI_U8; 64usize],
    pub u32MCUPerECS: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MJPEG_PARAM_S"][::std::mem::size_of::<_VENC_MJPEG_PARAM_S>() - 196usize];
    ["Alignment of _VENC_MJPEG_PARAM_S"][::std::mem::align_of::<_VENC_MJPEG_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_MJPEG_PARAM_S::u8YQt"]
        [::std::mem::offset_of!(_VENC_MJPEG_PARAM_S, u8YQt) - 0usize];
    ["Offset of field: _VENC_MJPEG_PARAM_S::u8CbQt"]
        [::std::mem::offset_of!(_VENC_MJPEG_PARAM_S, u8CbQt) - 64usize];
    ["Offset of field: _VENC_MJPEG_PARAM_S::u8CrQt"]
        [::std::mem::offset_of!(_VENC_MJPEG_PARAM_S, u8CrQt) - 128usize];
    ["Offset of field: _VENC_MJPEG_PARAM_S::u32MCUPerECS"]
        [::std::mem::offset_of!(_VENC_MJPEG_PARAM_S, u32MCUPerECS) - 192usize];
};
pub type VENC_MJPEG_PARAM_S = _VENC_MJPEG_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_PRORES_PARAM_S {
    pub u8LumaQt: [CVI_U8; 64usize],
    pub u8ChromaQt: [CVI_U8; 64usize],
    pub encoder_identifier: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_PRORES_PARAM_S"][::std::mem::size_of::<_VENC_PRORES_PARAM_S>() - 132usize];
    ["Alignment of _VENC_PRORES_PARAM_S"][::std::mem::align_of::<_VENC_PRORES_PARAM_S>() - 1usize];
    ["Offset of field: _VENC_PRORES_PARAM_S::u8LumaQt"]
        [::std::mem::offset_of!(_VENC_PRORES_PARAM_S, u8LumaQt) - 0usize];
    ["Offset of field: _VENC_PRORES_PARAM_S::u8ChromaQt"]
        [::std::mem::offset_of!(_VENC_PRORES_PARAM_S, u8ChromaQt) - 64usize];
    ["Offset of field: _VENC_PRORES_PARAM_S::encoder_identifier"]
        [::std::mem::offset_of!(_VENC_PRORES_PARAM_S, encoder_identifier) - 128usize];
};
pub type VENC_PRORES_PARAM_S = _VENC_PRORES_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ROI_ATTR_S {
    pub u32Index: CVI_U32,
    pub bEnable: CVI_BOOL,
    pub bAbsQp: CVI_BOOL,
    pub s32Qp: CVI_S32,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ROI_ATTR_S"][::std::mem::size_of::<_VENC_ROI_ATTR_S>() - 28usize];
    ["Alignment of _VENC_ROI_ATTR_S"][::std::mem::align_of::<_VENC_ROI_ATTR_S>() - 4usize];
    ["Offset of field: _VENC_ROI_ATTR_S::u32Index"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_S, u32Index) - 0usize];
    ["Offset of field: _VENC_ROI_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_S, bEnable) - 4usize];
    ["Offset of field: _VENC_ROI_ATTR_S::bAbsQp"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_S, bAbsQp) - 5usize];
    ["Offset of field: _VENC_ROI_ATTR_S::s32Qp"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_S, s32Qp) - 8usize];
    ["Offset of field: _VENC_ROI_ATTR_S::stRect"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_S, stRect) - 12usize];
};
pub type VENC_ROI_ATTR_S = _VENC_ROI_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ROI_ATTR_EX_S {
    pub u32Index: CVI_U32,
    pub bEnable: [CVI_BOOL; 3usize],
    pub bAbsQp: [CVI_BOOL; 3usize],
    pub s32Qp: [CVI_S32; 3usize],
    pub stRect: [RECT_S; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ROI_ATTR_EX_S"][::std::mem::size_of::<_VENC_ROI_ATTR_EX_S>() - 72usize];
    ["Alignment of _VENC_ROI_ATTR_EX_S"][::std::mem::align_of::<_VENC_ROI_ATTR_EX_S>() - 4usize];
    ["Offset of field: _VENC_ROI_ATTR_EX_S::u32Index"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_EX_S, u32Index) - 0usize];
    ["Offset of field: _VENC_ROI_ATTR_EX_S::bEnable"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_EX_S, bEnable) - 4usize];
    ["Offset of field: _VENC_ROI_ATTR_EX_S::bAbsQp"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_EX_S, bAbsQp) - 7usize];
    ["Offset of field: _VENC_ROI_ATTR_EX_S::s32Qp"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_EX_S, s32Qp) - 12usize];
    ["Offset of field: _VENC_ROI_ATTR_EX_S::stRect"]
        [::std::mem::offset_of!(_VENC_ROI_ATTR_EX_S, stRect) - 24usize];
};
pub type VENC_ROI_ATTR_EX_S = _VENC_ROI_ATTR_EX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_ROIBG_FRAME_RATE_S {
    pub s32SrcFrmRate: CVI_S32,
    pub s32DstFrmRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_ROIBG_FRAME_RATE_S"]
        [::std::mem::size_of::<_VENC_ROIBG_FRAME_RATE_S>() - 8usize];
    ["Alignment of _VENC_ROIBG_FRAME_RATE_S"]
        [::std::mem::align_of::<_VENC_ROIBG_FRAME_RATE_S>() - 4usize];
    ["Offset of field: _VENC_ROIBG_FRAME_RATE_S::s32SrcFrmRate"]
        [::std::mem::offset_of!(_VENC_ROIBG_FRAME_RATE_S, s32SrcFrmRate) - 0usize];
    ["Offset of field: _VENC_ROIBG_FRAME_RATE_S::s32DstFrmRate"]
        [::std::mem::offset_of!(_VENC_ROIBG_FRAME_RATE_S, s32DstFrmRate) - 4usize];
};
pub type VENC_ROIBG_FRAME_RATE_S = _VENC_ROIBG_FRAME_RATE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_REF_PARAM_S {
    pub u32Base: CVI_U32,
    pub u32Enhance: CVI_U32,
    pub bEnablePred: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_REF_PARAM_S"][::std::mem::size_of::<_VENC_REF_PARAM_S>() - 12usize];
    ["Alignment of _VENC_REF_PARAM_S"][::std::mem::align_of::<_VENC_REF_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_REF_PARAM_S::u32Base"]
        [::std::mem::offset_of!(_VENC_REF_PARAM_S, u32Base) - 0usize];
    ["Offset of field: _VENC_REF_PARAM_S::u32Enhance"]
        [::std::mem::offset_of!(_VENC_REF_PARAM_S, u32Enhance) - 4usize];
    ["Offset of field: _VENC_REF_PARAM_S::bEnablePred"]
        [::std::mem::offset_of!(_VENC_REF_PARAM_S, bEnablePred) - 8usize];
};
pub type VENC_REF_PARAM_S = _VENC_REF_PARAM_S;
pub const _VENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_ALL: _VENC_JPEG_ENCODE_MODE_E = 0;
pub const _VENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_SNAP: _VENC_JPEG_ENCODE_MODE_E = 1;
pub const _VENC_JPEG_ENCODE_MODE_E_JPEG_ENCODE_BUTT: _VENC_JPEG_ENCODE_MODE_E = 2;
pub type _VENC_JPEG_ENCODE_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_JPEG_ENCODE_MODE_E as VENC_JPEG_ENCODE_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_STREAM_BUF_INFO_S {
    pub u64PhyAddr: [CVI_U64; 1usize],
    pub pUserAddr: [*mut CVI_VOID; 1usize],
    pub u64BufSize: [CVI_U64; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_STREAM_BUF_INFO_S"][::std::mem::size_of::<_VENC_STREAM_BUF_INFO_S>() - 24usize];
    ["Alignment of _VENC_STREAM_BUF_INFO_S"]
        [::std::mem::align_of::<_VENC_STREAM_BUF_INFO_S>() - 8usize];
    ["Offset of field: _VENC_STREAM_BUF_INFO_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VENC_STREAM_BUF_INFO_S, u64PhyAddr) - 0usize];
    ["Offset of field: _VENC_STREAM_BUF_INFO_S::pUserAddr"]
        [::std::mem::offset_of!(_VENC_STREAM_BUF_INFO_S, pUserAddr) - 8usize];
    ["Offset of field: _VENC_STREAM_BUF_INFO_S::u64BufSize"]
        [::std::mem::offset_of!(_VENC_STREAM_BUF_INFO_S, u64BufSize) - 16usize];
};
pub type VENC_STREAM_BUF_INFO_S = _VENC_STREAM_BUF_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_SLICE_SPLIT_S {
    pub bSplitEnable: CVI_BOOL,
    pub u32LcuLineNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_SLICE_SPLIT_S"]
        [::std::mem::size_of::<_VENC_H265_SLICE_SPLIT_S>() - 8usize];
    ["Alignment of _VENC_H265_SLICE_SPLIT_S"]
        [::std::mem::align_of::<_VENC_H265_SLICE_SPLIT_S>() - 4usize];
    ["Offset of field: _VENC_H265_SLICE_SPLIT_S::bSplitEnable"]
        [::std::mem::offset_of!(_VENC_H265_SLICE_SPLIT_S, bSplitEnable) - 0usize];
    ["Offset of field: _VENC_H265_SLICE_SPLIT_S::u32LcuLineNum"]
        [::std::mem::offset_of!(_VENC_H265_SLICE_SPLIT_S, u32LcuLineNum) - 4usize];
};
pub type VENC_H265_SLICE_SPLIT_S = _VENC_H265_SLICE_SPLIT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_PU_S {
    pub constrained_intra_pred_flag: CVI_U32,
    pub strong_intra_smoothing_enabled_flag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_PU_S"][::std::mem::size_of::<_VENC_H265_PU_S>() - 8usize];
    ["Alignment of _VENC_H265_PU_S"][::std::mem::align_of::<_VENC_H265_PU_S>() - 4usize];
    ["Offset of field: _VENC_H265_PU_S::constrained_intra_pred_flag"]
        [::std::mem::offset_of!(_VENC_H265_PU_S, constrained_intra_pred_flag) - 0usize];
    ["Offset of field: _VENC_H265_PU_S::strong_intra_smoothing_enabled_flag"]
        [::std::mem::offset_of!(_VENC_H265_PU_S, strong_intra_smoothing_enabled_flag) - 4usize];
};
pub type VENC_H265_PU_S = _VENC_H265_PU_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_TRANS_S {
    pub cb_qp_offset: CVI_S32,
    pub cr_qp_offset: CVI_S32,
    pub bScalingListEnabled: CVI_BOOL,
    pub bScalingListTu4Valid: CVI_BOOL,
    pub InterScalingList4X4: [[CVI_U8; 16usize]; 2usize],
    pub IntraScalingList4X4: [[CVI_U8; 16usize]; 2usize],
    pub bScalingListTu8Valid: CVI_BOOL,
    pub InterScalingList8X8: [[CVI_U8; 64usize]; 2usize],
    pub IntraScalingList8X8: [[CVI_U8; 64usize]; 2usize],
    pub bScalingListTu16Valid: CVI_BOOL,
    pub InterScalingList16X16: [[CVI_U8; 64usize]; 2usize],
    pub IntraScalingList16X16: [[CVI_U8; 64usize]; 2usize],
    pub bScalingListTU32Valid: CVI_BOOL,
    pub InterScalingList32X32: [CVI_U8; 64usize],
    pub IntraScalingList32X32: [CVI_U8; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_TRANS_S"][::std::mem::size_of::<_VENC_H265_TRANS_S>() - 720usize];
    ["Alignment of _VENC_H265_TRANS_S"][::std::mem::align_of::<_VENC_H265_TRANS_S>() - 4usize];
    ["Offset of field: _VENC_H265_TRANS_S::cb_qp_offset"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, cb_qp_offset) - 0usize];
    ["Offset of field: _VENC_H265_TRANS_S::cr_qp_offset"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, cr_qp_offset) - 4usize];
    ["Offset of field: _VENC_H265_TRANS_S::bScalingListEnabled"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, bScalingListEnabled) - 8usize];
    ["Offset of field: _VENC_H265_TRANS_S::bScalingListTu4Valid"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, bScalingListTu4Valid) - 9usize];
    ["Offset of field: _VENC_H265_TRANS_S::InterScalingList4X4"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, InterScalingList4X4) - 10usize];
    ["Offset of field: _VENC_H265_TRANS_S::IntraScalingList4X4"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, IntraScalingList4X4) - 42usize];
    ["Offset of field: _VENC_H265_TRANS_S::bScalingListTu8Valid"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, bScalingListTu8Valid) - 74usize];
    ["Offset of field: _VENC_H265_TRANS_S::InterScalingList8X8"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, InterScalingList8X8) - 75usize];
    ["Offset of field: _VENC_H265_TRANS_S::IntraScalingList8X8"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, IntraScalingList8X8) - 203usize];
    ["Offset of field: _VENC_H265_TRANS_S::bScalingListTu16Valid"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, bScalingListTu16Valid) - 331usize];
    ["Offset of field: _VENC_H265_TRANS_S::InterScalingList16X16"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, InterScalingList16X16) - 332usize];
    ["Offset of field: _VENC_H265_TRANS_S::IntraScalingList16X16"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, IntraScalingList16X16) - 460usize];
    ["Offset of field: _VENC_H265_TRANS_S::bScalingListTU32Valid"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, bScalingListTU32Valid) - 588usize];
    ["Offset of field: _VENC_H265_TRANS_S::InterScalingList32X32"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, InterScalingList32X32) - 589usize];
    ["Offset of field: _VENC_H265_TRANS_S::IntraScalingList32X32"]
        [::std::mem::offset_of!(_VENC_H265_TRANS_S, IntraScalingList32X32) - 653usize];
};
pub type VENC_H265_TRANS_S = _VENC_H265_TRANS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_ENTROPY_S {
    pub cabac_init_flag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_ENTROPY_S"][::std::mem::size_of::<_VENC_H265_ENTROPY_S>() - 4usize];
    ["Alignment of _VENC_H265_ENTROPY_S"][::std::mem::align_of::<_VENC_H265_ENTROPY_S>() - 4usize];
    ["Offset of field: _VENC_H265_ENTROPY_S::cabac_init_flag"]
        [::std::mem::offset_of!(_VENC_H265_ENTROPY_S, cabac_init_flag) - 0usize];
};
pub type VENC_H265_ENTROPY_S = _VENC_H265_ENTROPY_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_DBLK_S {
    pub slice_deblocking_filter_disabled_flag: CVI_U32,
    pub slice_beta_offset_div2: CVI_S32,
    pub slice_tc_offset_div2: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_DBLK_S"][::std::mem::size_of::<_VENC_H265_DBLK_S>() - 12usize];
    ["Alignment of _VENC_H265_DBLK_S"][::std::mem::align_of::<_VENC_H265_DBLK_S>() - 4usize];
    ["Offset of field: _VENC_H265_DBLK_S::slice_deblocking_filter_disabled_flag"]
        [::std::mem::offset_of!(_VENC_H265_DBLK_S, slice_deblocking_filter_disabled_flag) - 0usize];
    ["Offset of field: _VENC_H265_DBLK_S::slice_beta_offset_div2"]
        [::std::mem::offset_of!(_VENC_H265_DBLK_S, slice_beta_offset_div2) - 4usize];
    ["Offset of field: _VENC_H265_DBLK_S::slice_tc_offset_div2"]
        [::std::mem::offset_of!(_VENC_H265_DBLK_S, slice_tc_offset_div2) - 8usize];
};
pub type VENC_H265_DBLK_S = _VENC_H265_DBLK_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_H265_SAO_S {
    pub slice_sao_luma_flag: CVI_U32,
    pub slice_sao_chroma_flag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_H265_SAO_S"][::std::mem::size_of::<_VENC_H265_SAO_S>() - 8usize];
    ["Alignment of _VENC_H265_SAO_S"][::std::mem::align_of::<_VENC_H265_SAO_S>() - 4usize];
    ["Offset of field: _VENC_H265_SAO_S::slice_sao_luma_flag"]
        [::std::mem::offset_of!(_VENC_H265_SAO_S, slice_sao_luma_flag) - 0usize];
    ["Offset of field: _VENC_H265_SAO_S::slice_sao_chroma_flag"]
        [::std::mem::offset_of!(_VENC_H265_SAO_S, slice_sao_chroma_flag) - 4usize];
};
pub type VENC_H265_SAO_S = _VENC_H265_SAO_S;
pub const _VENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_ROW: _VENC_INTRA_REFRESH_MODE_E = 0;
pub const _VENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_COLUMN: _VENC_INTRA_REFRESH_MODE_E = 1;
pub const _VENC_INTRA_REFRESH_MODE_E_INTRA_REFRESH_BUTT: _VENC_INTRA_REFRESH_MODE_E = 2;
pub type _VENC_INTRA_REFRESH_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_INTRA_REFRESH_MODE_E as VENC_INTRA_REFRESH_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_INTRA_REFRESH_S {
    pub bRefreshEnable: CVI_BOOL,
    pub enIntraRefreshMode: VENC_INTRA_REFRESH_MODE_E,
    pub u32RefreshNum: CVI_U32,
    pub u32ReqIQp: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_INTRA_REFRESH_S"][::std::mem::size_of::<_VENC_INTRA_REFRESH_S>() - 16usize];
    ["Alignment of _VENC_INTRA_REFRESH_S"]
        [::std::mem::align_of::<_VENC_INTRA_REFRESH_S>() - 4usize];
    ["Offset of field: _VENC_INTRA_REFRESH_S::bRefreshEnable"]
        [::std::mem::offset_of!(_VENC_INTRA_REFRESH_S, bRefreshEnable) - 0usize];
    ["Offset of field: _VENC_INTRA_REFRESH_S::enIntraRefreshMode"]
        [::std::mem::offset_of!(_VENC_INTRA_REFRESH_S, enIntraRefreshMode) - 4usize];
    ["Offset of field: _VENC_INTRA_REFRESH_S::u32RefreshNum"]
        [::std::mem::offset_of!(_VENC_INTRA_REFRESH_S, u32RefreshNum) - 8usize];
    ["Offset of field: _VENC_INTRA_REFRESH_S::u32ReqIQp"]
        [::std::mem::offset_of!(_VENC_INTRA_REFRESH_S, u32ReqIQp) - 12usize];
};
pub type VENC_INTRA_REFRESH_S = _VENC_INTRA_REFRESH_S;
pub const _VENC_MODTYPE_E_MODTYPE_VENC: _VENC_MODTYPE_E = 1;
pub const _VENC_MODTYPE_E_MODTYPE_H264E: _VENC_MODTYPE_E = 2;
pub const _VENC_MODTYPE_E_MODTYPE_H265E: _VENC_MODTYPE_E = 3;
pub const _VENC_MODTYPE_E_MODTYPE_JPEGE: _VENC_MODTYPE_E = 4;
pub const _VENC_MODTYPE_E_MODTYPE_RC: _VENC_MODTYPE_E = 5;
pub const _VENC_MODTYPE_E_MODTYPE_BUTT: _VENC_MODTYPE_E = 6;
pub type _VENC_MODTYPE_E = ::std::os::raw::c_uint;
pub use self::_VENC_MODTYPE_E as VENC_MODTYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MOD_H264E_S {
    pub u32OneStreamBuffer: CVI_U32,
    pub u32H264eMiniBufMode: CVI_U32,
    pub u32H264ePowerSaveEn: CVI_U32,
    pub enH264eVBSource: VB_SOURCE_E,
    pub bQpHstgrmEn: CVI_BOOL,
    pub u32UserDataMaxLen: CVI_U32,
    pub bSingleEsBuf: CVI_BOOL,
    pub u32SingleEsBufSize: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MOD_H264E_S"][::std::mem::size_of::<_VENC_MOD_H264E_S>() - 32usize];
    ["Alignment of _VENC_MOD_H264E_S"][::std::mem::align_of::<_VENC_MOD_H264E_S>() - 4usize];
    ["Offset of field: _VENC_MOD_H264E_S::u32OneStreamBuffer"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, u32OneStreamBuffer) - 0usize];
    ["Offset of field: _VENC_MOD_H264E_S::u32H264eMiniBufMode"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, u32H264eMiniBufMode) - 4usize];
    ["Offset of field: _VENC_MOD_H264E_S::u32H264ePowerSaveEn"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, u32H264ePowerSaveEn) - 8usize];
    ["Offset of field: _VENC_MOD_H264E_S::enH264eVBSource"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, enH264eVBSource) - 12usize];
    ["Offset of field: _VENC_MOD_H264E_S::bQpHstgrmEn"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, bQpHstgrmEn) - 16usize];
    ["Offset of field: _VENC_MOD_H264E_S::u32UserDataMaxLen"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, u32UserDataMaxLen) - 20usize];
    ["Offset of field: _VENC_MOD_H264E_S::bSingleEsBuf"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, bSingleEsBuf) - 24usize];
    ["Offset of field: _VENC_MOD_H264E_S::u32SingleEsBufSize"]
        [::std::mem::offset_of!(_VENC_MOD_H264E_S, u32SingleEsBufSize) - 28usize];
};
pub type VENC_MOD_H264E_S = _VENC_MOD_H264E_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MOD_H265E_S {
    pub u32OneStreamBuffer: CVI_U32,
    pub u32H265eMiniBufMode: CVI_U32,
    pub u32H265ePowerSaveEn: CVI_U32,
    pub enH265eVBSource: VB_SOURCE_E,
    pub bQpHstgrmEn: CVI_BOOL,
    pub u32UserDataMaxLen: CVI_U32,
    pub bSingleEsBuf: CVI_BOOL,
    pub u32SingleEsBufSize: CVI_U32,
    pub enRefreshType: H265E_REFRESH_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MOD_H265E_S"][::std::mem::size_of::<_VENC_MOD_H265E_S>() - 36usize];
    ["Alignment of _VENC_MOD_H265E_S"][::std::mem::align_of::<_VENC_MOD_H265E_S>() - 4usize];
    ["Offset of field: _VENC_MOD_H265E_S::u32OneStreamBuffer"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, u32OneStreamBuffer) - 0usize];
    ["Offset of field: _VENC_MOD_H265E_S::u32H265eMiniBufMode"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, u32H265eMiniBufMode) - 4usize];
    ["Offset of field: _VENC_MOD_H265E_S::u32H265ePowerSaveEn"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, u32H265ePowerSaveEn) - 8usize];
    ["Offset of field: _VENC_MOD_H265E_S::enH265eVBSource"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, enH265eVBSource) - 12usize];
    ["Offset of field: _VENC_MOD_H265E_S::bQpHstgrmEn"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, bQpHstgrmEn) - 16usize];
    ["Offset of field: _VENC_MOD_H265E_S::u32UserDataMaxLen"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, u32UserDataMaxLen) - 20usize];
    ["Offset of field: _VENC_MOD_H265E_S::bSingleEsBuf"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, bSingleEsBuf) - 24usize];
    ["Offset of field: _VENC_MOD_H265E_S::u32SingleEsBufSize"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, u32SingleEsBufSize) - 28usize];
    ["Offset of field: _VENC_MOD_H265E_S::enRefreshType"]
        [::std::mem::offset_of!(_VENC_MOD_H265E_S, enRefreshType) - 32usize];
};
pub type VENC_MOD_H265E_S = _VENC_MOD_H265E_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MOD_JPEGE_S {
    pub u32OneStreamBuffer: CVI_U32,
    pub u32JpegeMiniBufMode: CVI_U32,
    pub u32JpegClearStreamBuf: CVI_U32,
    pub bSingleEsBuf: CVI_BOOL,
    pub u32SingleEsBufSize: CVI_U32,
    pub enJpegeFormat: JPEGE_FORMAT_E,
    pub JpegMarkerOrder: [JPEGE_MARKER_TYPE_E; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MOD_JPEGE_S"][::std::mem::size_of::<_VENC_MOD_JPEGE_S>() - 88usize];
    ["Alignment of _VENC_MOD_JPEGE_S"][::std::mem::align_of::<_VENC_MOD_JPEGE_S>() - 4usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::u32OneStreamBuffer"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, u32OneStreamBuffer) - 0usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::u32JpegeMiniBufMode"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, u32JpegeMiniBufMode) - 4usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::u32JpegClearStreamBuf"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, u32JpegClearStreamBuf) - 8usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::bSingleEsBuf"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, bSingleEsBuf) - 12usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::u32SingleEsBufSize"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, u32SingleEsBufSize) - 16usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::enJpegeFormat"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, enJpegeFormat) - 20usize];
    ["Offset of field: _VENC_MOD_JPEGE_S::JpegMarkerOrder"]
        [::std::mem::offset_of!(_VENC_MOD_JPEGE_S, JpegMarkerOrder) - 24usize];
};
pub type VENC_MOD_JPEGE_S = _VENC_MOD_JPEGE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MOD_RC_S {
    pub u32ClrStatAfterSetBr: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MOD_RC_S"][::std::mem::size_of::<_VENC_MOD_RC_S>() - 4usize];
    ["Alignment of _VENC_MOD_RC_S"][::std::mem::align_of::<_VENC_MOD_RC_S>() - 4usize];
    ["Offset of field: _VENC_MOD_RC_S::u32ClrStatAfterSetBr"]
        [::std::mem::offset_of!(_VENC_MOD_RC_S, u32ClrStatAfterSetBr) - 0usize];
};
pub type VENC_MOD_RC_S = _VENC_MOD_RC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_MOD_VENC_S {
    pub u32VencBufferCache: CVI_U32,
    pub u32FrameBufRecycle: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MOD_VENC_S"][::std::mem::size_of::<_VENC_MOD_VENC_S>() - 8usize];
    ["Alignment of _VENC_MOD_VENC_S"][::std::mem::align_of::<_VENC_MOD_VENC_S>() - 4usize];
    ["Offset of field: _VENC_MOD_VENC_S::u32VencBufferCache"]
        [::std::mem::offset_of!(_VENC_MOD_VENC_S, u32VencBufferCache) - 0usize];
    ["Offset of field: _VENC_MOD_VENC_S::u32FrameBufRecycle"]
        [::std::mem::offset_of!(_VENC_MOD_VENC_S, u32FrameBufRecycle) - 4usize];
};
pub type VENC_MOD_VENC_S = _VENC_MOD_VENC_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VENC_MODPARAM_S {
    pub enVencModType: VENC_MODTYPE_E,
    pub __bindgen_anon_1: _VENC_MODPARAM_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VENC_MODPARAM_S__bindgen_ty_1 {
    pub stVencModParam: VENC_MOD_VENC_S,
    pub stH264eModParam: VENC_MOD_H264E_S,
    pub stH265eModParam: VENC_MOD_H265E_S,
    pub stJpegeModParam: VENC_MOD_JPEGE_S,
    pub stRcModParam: VENC_MOD_RC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MODPARAM_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VENC_MODPARAM_S__bindgen_ty_1>() - 88usize];
    ["Alignment of _VENC_MODPARAM_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VENC_MODPARAM_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _VENC_MODPARAM_S__bindgen_ty_1::stVencModParam"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S__bindgen_ty_1, stVencModParam) - 0usize];
    ["Offset of field: _VENC_MODPARAM_S__bindgen_ty_1::stH264eModParam"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S__bindgen_ty_1, stH264eModParam) - 0usize];
    ["Offset of field: _VENC_MODPARAM_S__bindgen_ty_1::stH265eModParam"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S__bindgen_ty_1, stH265eModParam) - 0usize];
    ["Offset of field: _VENC_MODPARAM_S__bindgen_ty_1::stJpegeModParam"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S__bindgen_ty_1, stJpegeModParam) - 0usize];
    ["Offset of field: _VENC_MODPARAM_S__bindgen_ty_1::stRcModParam"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S__bindgen_ty_1, stRcModParam) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_MODPARAM_S"][::std::mem::size_of::<_VENC_MODPARAM_S>() - 92usize];
    ["Alignment of _VENC_MODPARAM_S"][::std::mem::align_of::<_VENC_MODPARAM_S>() - 4usize];
    ["Offset of field: _VENC_MODPARAM_S::enVencModType"]
        [::std::mem::offset_of!(_VENC_MODPARAM_S, enVencModType) - 0usize];
};
pub type VENC_PARAM_MOD_S = _VENC_MODPARAM_S;
pub const _VENC_FRAME_TYPE_E_VENC_FRAME_TYPE_NONE: _VENC_FRAME_TYPE_E = 1;
pub const _VENC_FRAME_TYPE_E_VENC_FRAME_TYPE_IDR: _VENC_FRAME_TYPE_E = 2;
pub const _VENC_FRAME_TYPE_E_VENC_FRAME_TYPE_BUTT: _VENC_FRAME_TYPE_E = 3;
pub type _VENC_FRAME_TYPE_E = ::std::os::raw::c_uint;
pub use self::_VENC_FRAME_TYPE_E as VENC_FRAME_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _USER_RC_INFO_S {
    pub bQpMapValid: CVI_BOOL,
    pub bSkipWeightValid: CVI_BOOL,
    pub u32BlkStartQp: CVI_U32,
    pub u64QpMapPhyAddr: CVI_U64,
    pub u64SkipWeightPhyAddr: CVI_U64,
    pub enFrameType: VENC_FRAME_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _USER_RC_INFO_S"][::std::mem::size_of::<_USER_RC_INFO_S>() - 32usize];
    ["Alignment of _USER_RC_INFO_S"][::std::mem::align_of::<_USER_RC_INFO_S>() - 8usize];
    ["Offset of field: _USER_RC_INFO_S::bQpMapValid"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, bQpMapValid) - 0usize];
    ["Offset of field: _USER_RC_INFO_S::bSkipWeightValid"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, bSkipWeightValid) - 1usize];
    ["Offset of field: _USER_RC_INFO_S::u32BlkStartQp"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, u32BlkStartQp) - 4usize];
    ["Offset of field: _USER_RC_INFO_S::u64QpMapPhyAddr"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, u64QpMapPhyAddr) - 8usize];
    ["Offset of field: _USER_RC_INFO_S::u64SkipWeightPhyAddr"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, u64SkipWeightPhyAddr) - 16usize];
    ["Offset of field: _USER_RC_INFO_S::enFrameType"]
        [::std::mem::offset_of!(_USER_RC_INFO_S, enFrameType) - 24usize];
};
pub type USER_RC_INFO_S = _USER_RC_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _USER_FRAME_INFO_S {
    pub stUserFrame: VIDEO_FRAME_INFO_S,
    pub stUserRcInfo: USER_RC_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _USER_FRAME_INFO_S"][::std::mem::size_of::<_USER_FRAME_INFO_S>() - 184usize];
    ["Alignment of _USER_FRAME_INFO_S"][::std::mem::align_of::<_USER_FRAME_INFO_S>() - 8usize];
    ["Offset of field: _USER_FRAME_INFO_S::stUserFrame"]
        [::std::mem::offset_of!(_USER_FRAME_INFO_S, stUserFrame) - 0usize];
    ["Offset of field: _USER_FRAME_INFO_S::stUserRcInfo"]
        [::std::mem::offset_of!(_USER_FRAME_INFO_S, stUserRcInfo) - 152usize];
};
pub type USER_FRAME_INFO_S = _USER_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_SSE_CFG_S {
    pub u32Index: CVI_U32,
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_SSE_CFG_S"][::std::mem::size_of::<_VENC_SSE_CFG_S>() - 24usize];
    ["Alignment of _VENC_SSE_CFG_S"][::std::mem::align_of::<_VENC_SSE_CFG_S>() - 4usize];
    ["Offset of field: _VENC_SSE_CFG_S::u32Index"]
        [::std::mem::offset_of!(_VENC_SSE_CFG_S, u32Index) - 0usize];
    ["Offset of field: _VENC_SSE_CFG_S::bEnable"]
        [::std::mem::offset_of!(_VENC_SSE_CFG_S, bEnable) - 4usize];
    ["Offset of field: _VENC_SSE_CFG_S::stRect"]
        [::std::mem::offset_of!(_VENC_SSE_CFG_S, stRect) - 8usize];
};
pub type VENC_SSE_CFG_S = _VENC_SSE_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CROP_INFO_S"][::std::mem::size_of::<_VENC_CROP_INFO_S>() - 20usize];
    ["Alignment of _VENC_CROP_INFO_S"][::std::mem::align_of::<_VENC_CROP_INFO_S>() - 4usize];
    ["Offset of field: _VENC_CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_VENC_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _VENC_CROP_INFO_S::stRect"]
        [::std::mem::offset_of!(_VENC_CROP_INFO_S, stRect) - 4usize];
};
pub type VENC_CROP_INFO_S = _VENC_CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_FRAME_RATE_S {
    pub s32SrcFrmRate: CVI_S32,
    pub s32DstFrmRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_FRAME_RATE_S"][::std::mem::size_of::<_VENC_FRAME_RATE_S>() - 8usize];
    ["Alignment of _VENC_FRAME_RATE_S"][::std::mem::align_of::<_VENC_FRAME_RATE_S>() - 4usize];
    ["Offset of field: _VENC_FRAME_RATE_S::s32SrcFrmRate"]
        [::std::mem::offset_of!(_VENC_FRAME_RATE_S, s32SrcFrmRate) - 0usize];
    ["Offset of field: _VENC_FRAME_RATE_S::s32DstFrmRate"]
        [::std::mem::offset_of!(_VENC_FRAME_RATE_S, s32DstFrmRate) - 4usize];
};
pub type VENC_FRAME_RATE_S = _VENC_FRAME_RATE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_CHN_PARAM_S {
    pub bColor2Grey: CVI_BOOL,
    pub u32Priority: CVI_U32,
    pub u32MaxStrmCnt: CVI_U32,
    pub u32PollWakeUpFrmCnt: CVI_U32,
    pub stCropCfg: VENC_CROP_INFO_S,
    pub stFrameRate: VENC_FRAME_RATE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CHN_PARAM_S"][::std::mem::size_of::<_VENC_CHN_PARAM_S>() - 44usize];
    ["Alignment of _VENC_CHN_PARAM_S"][::std::mem::align_of::<_VENC_CHN_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_CHN_PARAM_S::bColor2Grey"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, bColor2Grey) - 0usize];
    ["Offset of field: _VENC_CHN_PARAM_S::u32Priority"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, u32Priority) - 4usize];
    ["Offset of field: _VENC_CHN_PARAM_S::u32MaxStrmCnt"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, u32MaxStrmCnt) - 8usize];
    ["Offset of field: _VENC_CHN_PARAM_S::u32PollWakeUpFrmCnt"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, u32PollWakeUpFrmCnt) - 12usize];
    ["Offset of field: _VENC_CHN_PARAM_S::stCropCfg"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, stCropCfg) - 16usize];
    ["Offset of field: _VENC_CHN_PARAM_S::stFrameRate"]
        [::std::mem::offset_of!(_VENC_CHN_PARAM_S, stFrameRate) - 36usize];
};
pub type VENC_CHN_PARAM_S = _VENC_CHN_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_FOREGROUND_PROTECT_S {
    pub bForegroundCuRcEn: CVI_BOOL,
    pub u32ForegroundDirectionThresh: CVI_U32,
    pub u32ForegroundThreshGain: CVI_U32,
    pub u32ForegroundThreshOffset: CVI_U32,
    pub u32ForegroundThreshP: [CVI_U32; 16usize],
    pub u32ForegroundThreshB: [CVI_U32; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_FOREGROUND_PROTECT_S"]
        [::std::mem::size_of::<_VENC_FOREGROUND_PROTECT_S>() - 144usize];
    ["Alignment of _VENC_FOREGROUND_PROTECT_S"]
        [::std::mem::align_of::<_VENC_FOREGROUND_PROTECT_S>() - 4usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::bForegroundCuRcEn"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, bForegroundCuRcEn) - 0usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::u32ForegroundDirectionThresh"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, u32ForegroundDirectionThresh) - 4usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::u32ForegroundThreshGain"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, u32ForegroundThreshGain) - 8usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::u32ForegroundThreshOffset"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, u32ForegroundThreshOffset) - 12usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::u32ForegroundThreshP"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, u32ForegroundThreshP) - 16usize];
    ["Offset of field: _VENC_FOREGROUND_PROTECT_S::u32ForegroundThreshB"]
        [::std::mem::offset_of!(_VENC_FOREGROUND_PROTECT_S, u32ForegroundThreshB) - 80usize];
};
pub type VENC_FOREGROUND_PROTECT_S = _VENC_FOREGROUND_PROTECT_S;
pub const _VENC_SCENE_MODE_E_SCENE_0: _VENC_SCENE_MODE_E = 0;
pub const _VENC_SCENE_MODE_E_SCENE_1: _VENC_SCENE_MODE_E = 1;
pub const _VENC_SCENE_MODE_E_SCENE_2: _VENC_SCENE_MODE_E = 2;
pub const _VENC_SCENE_MODE_E_SCENE_BUTT: _VENC_SCENE_MODE_E = 3;
pub type _VENC_SCENE_MODE_E = ::std::os::raw::c_uint;
pub use self::_VENC_SCENE_MODE_E as VENC_SCENE_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_DEBREATHEFFECT_S {
    pub bEnable: CVI_BOOL,
    pub s32Strength0: CVI_S32,
    pub s32Strength1: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_DEBREATHEFFECT_S"][::std::mem::size_of::<_VENC_DEBREATHEFFECT_S>() - 12usize];
    ["Alignment of _VENC_DEBREATHEFFECT_S"]
        [::std::mem::align_of::<_VENC_DEBREATHEFFECT_S>() - 4usize];
    ["Offset of field: _VENC_DEBREATHEFFECT_S::bEnable"]
        [::std::mem::offset_of!(_VENC_DEBREATHEFFECT_S, bEnable) - 0usize];
    ["Offset of field: _VENC_DEBREATHEFFECT_S::s32Strength0"]
        [::std::mem::offset_of!(_VENC_DEBREATHEFFECT_S, s32Strength0) - 4usize];
    ["Offset of field: _VENC_DEBREATHEFFECT_S::s32Strength1"]
        [::std::mem::offset_of!(_VENC_DEBREATHEFFECT_S, s32Strength1) - 8usize];
};
pub type VENC_DEBREATHEFFECT_S = _VENC_DEBREATHEFFECT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_CU_PREDICTION_S {
    pub enPredMode: OPERATION_MODE_E,
    pub u32IntraCost: CVI_U32,
    pub u32Intra32Cost: CVI_U32,
    pub u32Intra16Cost: CVI_U32,
    pub u32Intra8Cost: CVI_U32,
    pub u32Intra4Cost: CVI_U32,
    pub u32Inter64Cost: CVI_U32,
    pub u32Inter32Cost: CVI_U32,
    pub u32Inter16Cost: CVI_U32,
    pub u32Inter8Cost: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CU_PREDICTION_S"][::std::mem::size_of::<_VENC_CU_PREDICTION_S>() - 40usize];
    ["Alignment of _VENC_CU_PREDICTION_S"]
        [::std::mem::align_of::<_VENC_CU_PREDICTION_S>() - 4usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::enPredMode"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, enPredMode) - 0usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32IntraCost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32IntraCost) - 4usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Intra32Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Intra32Cost) - 8usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Intra16Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Intra16Cost) - 12usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Intra8Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Intra8Cost) - 16usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Intra4Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Intra4Cost) - 20usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Inter64Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Inter64Cost) - 24usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Inter32Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Inter32Cost) - 28usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Inter16Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Inter16Cost) - 32usize];
    ["Offset of field: _VENC_CU_PREDICTION_S::u32Inter8Cost"]
        [::std::mem::offset_of!(_VENC_CU_PREDICTION_S, u32Inter8Cost) - 36usize];
};
pub type VENC_CU_PREDICTION_S = _VENC_CU_PREDICTION_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_SKIP_BIAS_S {
    pub bSkipBiasEn: CVI_BOOL,
    pub u32SkipThreshGain: CVI_U32,
    pub u32SkipThreshOffset: CVI_U32,
    pub u32SkipBackgroundCost: CVI_U32,
    pub u32SkipForegroundCost: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_SKIP_BIAS_S"][::std::mem::size_of::<_VENC_SKIP_BIAS_S>() - 20usize];
    ["Alignment of _VENC_SKIP_BIAS_S"][::std::mem::align_of::<_VENC_SKIP_BIAS_S>() - 4usize];
    ["Offset of field: _VENC_SKIP_BIAS_S::bSkipBiasEn"]
        [::std::mem::offset_of!(_VENC_SKIP_BIAS_S, bSkipBiasEn) - 0usize];
    ["Offset of field: _VENC_SKIP_BIAS_S::u32SkipThreshGain"]
        [::std::mem::offset_of!(_VENC_SKIP_BIAS_S, u32SkipThreshGain) - 4usize];
    ["Offset of field: _VENC_SKIP_BIAS_S::u32SkipThreshOffset"]
        [::std::mem::offset_of!(_VENC_SKIP_BIAS_S, u32SkipThreshOffset) - 8usize];
    ["Offset of field: _VENC_SKIP_BIAS_S::u32SkipBackgroundCost"]
        [::std::mem::offset_of!(_VENC_SKIP_BIAS_S, u32SkipBackgroundCost) - 12usize];
    ["Offset of field: _VENC_SKIP_BIAS_S::u32SkipForegroundCost"]
        [::std::mem::offset_of!(_VENC_SKIP_BIAS_S, u32SkipForegroundCost) - 16usize];
};
pub type VENC_SKIP_BIAS_S = _VENC_SKIP_BIAS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_HIERARCHICAL_QP_S {
    pub bHierarchicalQpEn: CVI_BOOL,
    pub s32HierarchicalQpDelta: [CVI_S32; 4usize],
    pub s32HierarchicalFrameNum: [CVI_S32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_HIERARCHICAL_QP_S"][::std::mem::size_of::<_VENC_HIERARCHICAL_QP_S>() - 36usize];
    ["Alignment of _VENC_HIERARCHICAL_QP_S"]
        [::std::mem::align_of::<_VENC_HIERARCHICAL_QP_S>() - 4usize];
    ["Offset of field: _VENC_HIERARCHICAL_QP_S::bHierarchicalQpEn"]
        [::std::mem::offset_of!(_VENC_HIERARCHICAL_QP_S, bHierarchicalQpEn) - 0usize];
    ["Offset of field: _VENC_HIERARCHICAL_QP_S::s32HierarchicalQpDelta"]
        [::std::mem::offset_of!(_VENC_HIERARCHICAL_QP_S, s32HierarchicalQpDelta) - 4usize];
    ["Offset of field: _VENC_HIERARCHICAL_QP_S::s32HierarchicalFrameNum"]
        [::std::mem::offset_of!(_VENC_HIERARCHICAL_QP_S, s32HierarchicalFrameNum) - 20usize];
};
pub type VENC_HIERARCHICAL_QP_S = _VENC_HIERARCHICAL_QP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_CHN_POOL_S {
    pub hPicVbPool: VB_POOL,
    pub hPicInfoVbPool: VB_POOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_CHN_POOL_S"][::std::mem::size_of::<_VENC_CHN_POOL_S>() - 8usize];
    ["Alignment of _VENC_CHN_POOL_S"][::std::mem::align_of::<_VENC_CHN_POOL_S>() - 4usize];
    ["Offset of field: _VENC_CHN_POOL_S::hPicVbPool"]
        [::std::mem::offset_of!(_VENC_CHN_POOL_S, hPicVbPool) - 0usize];
    ["Offset of field: _VENC_CHN_POOL_S::hPicInfoVbPool"]
        [::std::mem::offset_of!(_VENC_CHN_POOL_S, hPicInfoVbPool) - 4usize];
};
pub type VENC_CHN_POOL_S = _VENC_CHN_POOL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_RC_ADVPARAM_S {
    pub u32ClearStatAfterSetAttr: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_RC_ADVPARAM_S"][::std::mem::size_of::<_VENC_RC_ADVPARAM_S>() - 4usize];
    ["Alignment of _VENC_RC_ADVPARAM_S"][::std::mem::align_of::<_VENC_RC_ADVPARAM_S>() - 4usize];
    ["Offset of field: _VENC_RC_ADVPARAM_S::u32ClearStatAfterSetAttr"]
        [::std::mem::offset_of!(_VENC_RC_ADVPARAM_S, u32ClearStatAfterSetAttr) - 0usize];
};
pub type VENC_RC_ADVPARAM_S = _VENC_RC_ADVPARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_FRAME_PARAM_S {
    pub u32FrameQp: CVI_U32,
    pub u32FrameBits: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_FRAME_PARAM_S"][::std::mem::size_of::<_VENC_FRAME_PARAM_S>() - 8usize];
    ["Alignment of _VENC_FRAME_PARAM_S"][::std::mem::align_of::<_VENC_FRAME_PARAM_S>() - 4usize];
    ["Offset of field: _VENC_FRAME_PARAM_S::u32FrameQp"]
        [::std::mem::offset_of!(_VENC_FRAME_PARAM_S, u32FrameQp) - 0usize];
    ["Offset of field: _VENC_FRAME_PARAM_S::u32FrameBits"]
        [::std::mem::offset_of!(_VENC_FRAME_PARAM_S, u32FrameBits) - 4usize];
};
pub type VENC_FRAME_PARAM_S = _VENC_FRAME_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VENC_SB_Setting_S {
    pub codec: ::std::os::raw::c_uint,
    pub sb_mode: CVI_U32,
    pub sb_size: CVI_U32,
    pub sb_nb: CVI_U32,
    pub y_stride: CVI_U32,
    pub uv_stride: CVI_U32,
    pub src_height: CVI_U32,
    pub sb_ybase: CVI_U32,
    pub sb_uvbase: CVI_U32,
    pub src_ybase: CVI_U32,
    pub src_uvbase: CVI_U32,
    pub sb_ybase1: CVI_U32,
    pub sb_uvbase1: CVI_U32,
    pub src_ybase1: CVI_U32,
    pub src_uvbase1: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VENC_SB_Setting_S"][::std::mem::size_of::<_VENC_SB_Setting_S>() - 60usize];
    ["Alignment of _VENC_SB_Setting_S"][::std::mem::align_of::<_VENC_SB_Setting_S>() - 4usize];
    ["Offset of field: _VENC_SB_Setting_S::codec"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, codec) - 0usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_mode"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_mode) - 4usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_size"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_size) - 8usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_nb"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_nb) - 12usize];
    ["Offset of field: _VENC_SB_Setting_S::y_stride"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, y_stride) - 16usize];
    ["Offset of field: _VENC_SB_Setting_S::uv_stride"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, uv_stride) - 20usize];
    ["Offset of field: _VENC_SB_Setting_S::src_height"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, src_height) - 24usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_ybase"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_ybase) - 28usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_uvbase"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_uvbase) - 32usize];
    ["Offset of field: _VENC_SB_Setting_S::src_ybase"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, src_ybase) - 36usize];
    ["Offset of field: _VENC_SB_Setting_S::src_uvbase"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, src_uvbase) - 40usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_ybase1"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_ybase1) - 44usize];
    ["Offset of field: _VENC_SB_Setting_S::sb_uvbase1"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, sb_uvbase1) - 48usize];
    ["Offset of field: _VENC_SB_Setting_S::src_ybase1"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, src_ybase1) - 52usize];
    ["Offset of field: _VENC_SB_Setting_S::src_uvbase1"]
        [::std::mem::offset_of!(_VENC_SB_Setting_S, src_uvbase1) - 56usize];
};
pub type VENC_SB_Setting = _VENC_SB_Setting_S;
extern "C" {
    pub fn cviGetMask();
}
extern "C" {
    pub fn CVI_VENC_CreateChn(VeChn: VENC_CHN, pstAttr: *const VENC_CHN_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_DestroyChn(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_ResetChn(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_StartRecvFrame(
        VeChn: VENC_CHN,
        pstRecvParam: *const VENC_RECV_PIC_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_StopRecvFrame(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_QueryStatus(VeChn: VENC_CHN, pstStatus: *mut VENC_CHN_STATUS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetChnAttr(VeChn: VENC_CHN, pstChnAttr: *const VENC_CHN_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetChnAttr(VeChn: VENC_CHN, pstChnAttr: *mut VENC_CHN_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetStream(
        VeChn: VENC_CHN,
        pstStream: *mut VENC_STREAM_S,
        S32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_ReleaseStream(VeChn: VENC_CHN, pstStream: *mut VENC_STREAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_InsertUserData(
        VeChn: VENC_CHN,
        pu8Data: *mut CVI_U8,
        u32Len: CVI_U32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SendFrame(
        VeChn: VENC_CHN,
        pstFrame: *const VIDEO_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SendFrameEx(
        VeChn: VENC_CHN,
        pstFrame: *const USER_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_RequestIDR(VeChn: VENC_CHN, bInstant: CVI_BOOL) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetFd(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_CloseFd(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRoiAttr(VeChn: VENC_CHN, pstRoiAttr: *const VENC_ROI_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRoiAttr(
        VeChn: VENC_CHN,
        u32Index: CVI_U32,
        pstRoiAttr: *mut VENC_ROI_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRoiAttrEx(
        VeChn: VENC_CHN,
        u32Index: CVI_U32,
        pstRoiAttrEx: *mut VENC_ROI_ATTR_EX_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRoiAttrEx(
        VeChn: VENC_CHN,
        pstRoiAttrEx: *const VENC_ROI_ATTR_EX_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRoiBgFrameRate(
        VeChn: VENC_CHN,
        pstRoiBgFrmRate: *const VENC_ROIBG_FRAME_RATE_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRoiBgFrameRate(
        VeChn: VENC_CHN,
        pstRoiBgFrmRate: *mut VENC_ROIBG_FRAME_RATE_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264SliceSplit(
        VeChn: VENC_CHN,
        pstSliceSplit: *const VENC_H264_SLICE_SPLIT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264SliceSplit(
        VeChn: VENC_CHN,
        pstSliceSplit: *mut VENC_H264_SLICE_SPLIT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264IntraPred(
        VeChn: VENC_CHN,
        pstH264IntraPred: *const VENC_H264_INTRA_PRED_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264IntraPred(
        VeChn: VENC_CHN,
        pstH264IntraPred: *mut VENC_H264_INTRA_PRED_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264Trans(
        VeChn: VENC_CHN,
        pstH264Trans: *const VENC_H264_TRANS_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264Trans(VeChn: VENC_CHN, pstH264Trans: *mut VENC_H264_TRANS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264Entropy(
        VeChn: VENC_CHN,
        pstH264EntropyEnc: *const VENC_H264_ENTROPY_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264Entropy(
        VeChn: VENC_CHN,
        pstH264EntropyEnc: *mut VENC_H264_ENTROPY_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264Dblk(VeChn: VENC_CHN, pstH264Dblk: *const VENC_H264_DBLK_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264Dblk(VeChn: VENC_CHN, pstH264Dblk: *mut VENC_H264_DBLK_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH264Vui(VeChn: VENC_CHN, pstH264Vui: *const VENC_H264_VUI_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH264Vui(VeChn: VENC_CHN, pstH264Vui: *mut VENC_H264_VUI_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265Vui(VeChn: VENC_CHN, pstH265Vui: *const VENC_H265_VUI_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265Vui(VeChn: VENC_CHN, pstH265Vui: *mut VENC_H265_VUI_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetJpegParam(
        VeChn: VENC_CHN,
        pstJpegParam: *const VENC_JPEG_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetJpegParam(VeChn: VENC_CHN, pstJpegParam: *mut VENC_JPEG_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetMjpegParam(
        VeChn: VENC_CHN,
        pstMjpegParam: *const VENC_MJPEG_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetMjpegParam(
        VeChn: VENC_CHN,
        pstMjpegParam: *mut VENC_MJPEG_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRcParam(VeChn: VENC_CHN, pstRcParam: *mut VENC_RC_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRcParam(VeChn: VENC_CHN, pstRcParam: *const VENC_RC_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRefParam(VeChn: VENC_CHN, pstRefParam: *const VENC_REF_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRefParam(VeChn: VENC_CHN, pstRefParam: *mut VENC_REF_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetJpegEncodeMode(
        VeChn: VENC_CHN,
        enJpegEncodeMode: VENC_JPEG_ENCODE_MODE_E,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetJpegEncodeMode(
        VeChn: VENC_CHN,
        penJpegEncodeMode: *mut VENC_JPEG_ENCODE_MODE_E,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_EnableIDR(VeChn: VENC_CHN, bEnableIDR: CVI_BOOL) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetStreamBufInfo(
        VeChn: VENC_CHN,
        pstStreamBufInfo: *mut VENC_STREAM_BUF_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265SliceSplit(
        VeChn: VENC_CHN,
        pstSliceSplit: *const VENC_H265_SLICE_SPLIT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265SliceSplit(
        VeChn: VENC_CHN,
        pstSliceSplit: *mut VENC_H265_SLICE_SPLIT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265PredUnit(VeChn: VENC_CHN, pstPredUnit: *const VENC_H265_PU_S)
        -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265PredUnit(VeChn: VENC_CHN, pstPredUnit: *mut VENC_H265_PU_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265Trans(
        VeChn: VENC_CHN,
        pstH265Trans: *const VENC_H265_TRANS_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265Trans(VeChn: VENC_CHN, pstH265Trans: *mut VENC_H265_TRANS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265Entropy(
        VeChn: VENC_CHN,
        pstH265Entropy: *const VENC_H265_ENTROPY_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265Entropy(
        VeChn: VENC_CHN,
        pstH265Entropy: *mut VENC_H265_ENTROPY_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265Dblk(VeChn: VENC_CHN, pstH265Dblk: *const VENC_H265_DBLK_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265Dblk(VeChn: VENC_CHN, pstH265Dblk: *mut VENC_H265_DBLK_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetH265Sao(VeChn: VENC_CHN, pstH265Sao: *const VENC_H265_SAO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetH265Sao(VeChn: VENC_CHN, pstH265Sao: *mut VENC_H265_SAO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetFrameLostStrategy(
        VeChn: VENC_CHN,
        pstFrmLostParam: *const VENC_FRAMELOST_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetFrameLostStrategy(
        VeChn: VENC_CHN,
        pstFrmLostParam: *mut VENC_FRAMELOST_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetSuperFrameStrategy(
        VeChn: VENC_CHN,
        pstSuperFrmParam: *const VENC_SUPERFRAME_CFG_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetSuperFrameStrategy(
        VeChn: VENC_CHN,
        pstSuperFrmParam: *mut VENC_SUPERFRAME_CFG_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetIntraRefresh(
        VeChn: VENC_CHN,
        pstIntraRefresh: *const VENC_INTRA_REFRESH_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetIntraRefresh(
        VeChn: VENC_CHN,
        pstIntraRefresh: *mut VENC_INTRA_REFRESH_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetSSERegion(
        VeChn: VENC_CHN,
        u32Index: CVI_U32,
        pstSSECfg: *mut VENC_SSE_CFG_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetSSERegion(VeChn: VENC_CHN, pstSSECfg: *const VENC_SSE_CFG_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetChnParam(VeChn: VENC_CHN, pstChnParam: *const VENC_CHN_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetChnParam(VeChn: VENC_CHN, pstChnParam: *mut VENC_CHN_PARAM_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetModParam(pstModParam: *const VENC_PARAM_MOD_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetModParam(pstModParam: *mut VENC_PARAM_MOD_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetForegroundProtect(
        VeChn: VENC_CHN,
        pstForegroundProtect: *mut VENC_FOREGROUND_PROTECT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetForegroundProtect(
        VeChn: VENC_CHN,
        pstForegroundProtect: *const VENC_FOREGROUND_PROTECT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetSceneMode(VeChn: VENC_CHN, enSceneMode: VENC_SCENE_MODE_E) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetSceneMode(VeChn: VENC_CHN, penSceneMode: *mut VENC_SCENE_MODE_E) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_AttachVbPool(VeChn: VENC_CHN, pstPool: *const VENC_CHN_POOL_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_DetachVbPool(VeChn: VENC_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetCuPrediction(
        VeChn: VENC_CHN,
        pstCuPrediction: *const VENC_CU_PREDICTION_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetCuPrediction(
        VeChn: VENC_CHN,
        pstCuPrediction: *mut VENC_CU_PREDICTION_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetSkipBias(VeChn: VENC_CHN, pstSkipBias: *const VENC_SKIP_BIAS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetSkipBias(VeChn: VENC_CHN, pstSkipBias: *mut VENC_SKIP_BIAS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetDeBreathEffect(
        VeChn: VENC_CHN,
        pstDeBreathEffect: *const VENC_DEBREATHEFFECT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetDeBreathEffect(
        VeChn: VENC_CHN,
        pstDeBreathEffect: *mut VENC_DEBREATHEFFECT_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetHierarchicalQp(
        VeChn: VENC_CHN,
        pstHierarchicalQp: *const VENC_HIERARCHICAL_QP_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetHierarchicalQp(
        VeChn: VENC_CHN,
        pstHierarchicalQp: *mut VENC_HIERARCHICAL_QP_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetRcAdvParam(
        VeChn: VENC_CHN,
        pstRcAdvParam: *const VENC_RC_ADVPARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetRcAdvParam(
        VeChn: VENC_CHN,
        pstRcAdvParam: *mut VENC_RC_ADVPARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_CalcFrameParam(
        VeChn: VENC_CHN,
        pstFrameParam: *mut VENC_FRAME_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_SetFrameParam(
        VeChn: VENC_CHN,
        pstFrameParam: *const VENC_FRAME_PARAM_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VENC_GetFrameParam(
        VeChn: VENC_CHN,
        pstFrameParam: *mut VENC_FRAME_PARAM_S,
    ) -> CVI_S32;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
