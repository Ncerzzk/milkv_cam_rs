#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals, unused_imports, improper_ctypes)]
/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const MIPI_LANE_NUM: u32 = 4;
pub const WDR_VC_NUM: u32 = 2;
pub const SYNC_CODE_NUM: u32 = 4;
pub const BT_DEMUX_NUM: u32 = 4;
pub const MIPI_DEMUX_NUM: u32 = 4;
pub const CVI_MIPI_IOC_MAGIC: u8 = 109u8;
pub const CVI_ERR_APPID: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CVI_NULL: u32 = 0;
pub const CVI_SUCCESS: u32 = 0;
pub const CVI_FAILURE: i32 = -1;
pub const CVI_FAILURE_ILLEGAL_PARAM: i32 = -2;
pub const CVI_TRUE: u32 = 1;
pub const CVI_FALSE: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const IOCTL_BASE_MAGIC: u8 = 115u8;
pub const CVI_CHIP_NAME: &[u8; 7] = b"CV181X\0";
pub const CVI_CHIP_TEST: u32 = 0;
pub const CVIU01: u32 = 1;
pub const CVIU02: u32 = 2;
pub const CVI_COLDBOOT: u32 = 1;
pub const CVI_WDTBOOT: u32 = 2;
pub const CVI_SUSPENDBOOT: u32 = 3;
pub const CVI_WARMBOOT: u32 = 4;
pub const MMF_VER_PRIX: &[u8; 7] = b"_MMF_V\0";
pub const ALIGN_NUM: u32 = 4;
pub const LUMA_PHY_ALIGN: u32 = 16;
pub const DEFAULT_ALIGN: u32 = 64;
pub const MAX_ALIGN: u32 = 1024;
pub const SEG_CMP_LENGTH: u32 = 256;
pub const VENC_MAX_NAME_LEN: u32 = 16;
pub const VENC_MAX_CHN_NUM: u32 = 16;
pub const VEDU_IP_NUM: u32 = 1;
pub const H264E_MAX_WIDTH: u32 = 4096;
pub const H264E_MAX_HEIGHT: u32 = 4096;
pub const H264E_MIN_WIDTH: u32 = 114;
pub const H264E_MIN_HEIGHT: u32 = 114;
pub const H265E_MAX_WIDTH: u32 = 4096;
pub const H265E_MAX_HEIGHT: u32 = 4096;
pub const H265E_MIN_WIDTH: u32 = 114;
pub const H265E_MIN_HEIGHT: u32 = 114;
pub const JPEGE_MAX_WIDTH: u32 = 8192;
pub const JPEGE_MAX_HEIGHT: u32 = 8192;
pub const JPEGE_MIN_WIDTH: u32 = 32;
pub const JPEGE_MIN_HEIGHT: u32 = 32;
pub const JPGE_MAX_NUM: u32 = 1;
pub const VENC_MAX_ROI_NUM: u32 = 8;
pub const H264E_MIN_HW_INDEX: u32 = 0;
pub const H264E_MAX_HW_INDEX: u32 = 11;
pub const H264E_MIN_VW_INDEX: u32 = 0;
pub const H264E_MAX_VW_INDEX: u32 = 3;
pub const VENC_QP_HISGRM_NUM: u32 = 52;
pub const MAX_TILE_NUM: u32 = 1;
pub const H265E_ADAPTIVE_FRAME_TYPE: u32 = 4;
pub const H265E_ADAPTIVE_QP_TYPE: u32 = 5;
pub const VENC_MIN_INPUT_FRAME_RATE: u32 = 1;
pub const VENC_MAX_INPUT_FRAME_RATE: u32 = 240;
pub const VENC_MAX_RECEIVE_SOURCE: u32 = 4;
pub const VENC_PIC_RECEIVE_SOURCE0: u32 = 0;
pub const VENC_PIC_RECEIVE_SOURCE1: u32 = 1;
pub const VENC_PIC_RECEIVE_SOURCE2: u32 = 2;
pub const VENC_PIC_RECEIVE_SOURCE3: u32 = 3;
pub const VENC_ALIGN_W: u32 = 32;
pub const VENC_ALIGN_H: u32 = 16;
pub const RC_TEXTURE_THR_SIZE: u32 = 16;
pub const MIN_BITRATE: u32 = 2;
pub const MAX_BITRATE: u32 = 102400;
pub const VDEC_MAX_CHN_NUM: u32 = 64;
pub const VDH_MAX_CHN_NUM: u32 = 0;
pub const VEDU_CHN_START: u32 = 0;
pub const VEDU_H264D_ERRRATE: u32 = 10;
pub const VEDU_H264D_FULLERR: u32 = 100;
pub const H264D_ALIGN_W: u32 = 64;
pub const H264D_ALIGN_H: u32 = 64;
pub const H265D_ALIGN_W: u32 = 64;
pub const H265D_ALIGN_H: u32 = 64;
pub const JPEGD_ALIGN_W: u32 = 64;
pub const JPEGD_ALIGN_H: u32 = 16;
pub const JPEGD_RGB_ALIGN: u32 = 16;
pub const H264D_ALIGN_FRM: u32 = 4096;
pub const H265D_ALIGN_FRM: u32 = 4096;
pub const JPEGD_ALIGN_FRM: u32 = 4096;
pub const H264D_MAX_SPS: u32 = 32;
pub const H264D_MIN_SPS: u32 = 1;
pub const H264D_MAX_PPS: u32 = 256;
pub const H264D_MIN_PPS: u32 = 1;
pub const H264D_MAX_SLICE: u32 = 300;
pub const H264D_MIN_SLICE: u32 = 1;
pub const H265D_MAX_VPS: u32 = 16;
pub const H265D_MIN_VPS: u32 = 1;
pub const H265D_MAX_SPS: u32 = 16;
pub const H265D_MIN_SPS: u32 = 1;
pub const H265D_MAX_PPS: u32 = 64;
pub const H265D_MIN_PPS: u32 = 1;
pub const H265D_MAX_SLICE: u32 = 200;
pub const H265D_MIN_SLICE: u32 = 1;
pub const VEDU_H264D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H264D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H264D_MIN_WIDTH: u32 = 114;
pub const VEDU_H264D_MIN_HEIGHT: u32 = 114;
pub const VEDU_H265D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H265D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H265D_MIN_WIDTH: u32 = 114;
pub const VEDU_H265D_MIN_HEIGHT: u32 = 114;
pub const JPEGD_IP_NUM: u32 = 1;
pub const JPEGD_MAX_WIDTH: u32 = 2880;
pub const JPEGD_MAX_HEIGHT: u32 = 1920;
pub const JPEGD_MIN_WIDTH: u32 = 8;
pub const JPEGD_MIN_HEIGHT: u32 = 8;
pub const RGN_MIN_WIDTH: u32 = 2;
pub const RGN_MIN_HEIGHT: u32 = 2;
pub const RGN_COVER_MAX_WIDTH: u32 = 2880;
pub const RGN_COVER_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVER_MIN_X: u32 = 0;
pub const RGN_COVER_MIN_Y: u32 = 0;
pub const RGN_COVER_MAX_X: u32 = 2878;
pub const RGN_COVER_MAX_Y: u32 = 4094;
pub const RGN_COVEREX_MAX_NUM: u32 = 4;
pub const RGN_COVEREX_MAX_WIDTH: u32 = 2880;
pub const RGN_COVEREX_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVEREX_MIN_X: u32 = 0;
pub const RGN_COVEREX_MIN_Y: u32 = 0;
pub const RGN_COVEREX_MAX_X: u32 = 2878;
pub const RGN_COVEREX_MAX_Y: u32 = 4094;
pub const RGN_OVERLAY_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAY_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAY_MIN_X: u32 = 0;
pub const RGN_OVERLAY_MIN_Y: u32 = 0;
pub const RGN_OVERLAY_MAX_X: u32 = 2878;
pub const RGN_OVERLAY_MAX_Y: u32 = 4094;
pub const RGN_OVERLAYEX_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAYEX_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAYEX_MIN_X: u32 = 0;
pub const RGN_OVERLAYEX_MIN_Y: u32 = 0;
pub const RGN_OVERLAYEX_MAX_X: u32 = 2878;
pub const RGN_OVERLAYEX_MAX_Y: u32 = 4094;
pub const RGN_MOSAIC_MAX_NUM: u32 = 8;
pub const RGN_MOSAIC_X_ALIGN: u32 = 4;
pub const RGN_MOSAIC_Y_ALIGN: u32 = 2;
pub const RGN_MOSAIC_WIDTH_ALIGN: u32 = 4;
pub const RGN_MOSAIC_HEIGHT_ALIGN: u32 = 4;
pub const RGN_MOSAIC_MIN_WIDTH: u32 = 8;
pub const RGN_MOSAIC_MIN_HEIGHT: u32 = 8;
pub const RGN_MOSAIC_MAX_WIDTH: u32 = 2880;
pub const RGN_MOSAIC_MAX_HEIGHT: u32 = 4096;
pub const RGN_MOSAIC_MIN_X: u32 = 0;
pub const RGN_MOSAIC_MIN_Y: u32 = 0;
pub const RGN_MOSAIC_MAX_X: u32 = 2872;
pub const RGN_MOSAIC_MAX_Y: u32 = 4088;
pub const RGN_MAX_LAYER_VPSS: u32 = 2;
pub const RGN_ODEC_LAYER_VPSS: u32 = 0;
pub const RGN_NORMAL_LAYER_VPSS: u32 = 1;
pub const RGN_MAX_NUM_VPSS: u32 = 8;
pub const RGN_EX_MAX_NUM_VPSS: u32 = 16;
pub const RGN_EX_MAX_WIDTH: u32 = 2880;
pub const RGN_MAX_NUM_VO: u32 = 8;
pub const RGN_MAX_BUF_NUM: u32 = 2;
pub const RGN_MAX_NUM: u32 = 108;
pub const VENC_MAX_SSE_NUM: u32 = 8;
pub const CVI_MAX_SENSOR_NUM: u32 = 2;
pub const VI_MAX_DEV_NUM: u32 = 3;
pub const VI_MAX_PHY_PIPE_NUM: u32 = 4;
pub const VI_MAX_VIR_PIPE_NUM: u32 = 0;
pub const VI_MAX_PIPE_NUM: u32 = 4;
pub const VI_MAX_WDR_NUM: u32 = 1;
pub const VI_MAX_VIR_CHN_NUM: u32 = 2;
pub const VI_MAX_PHY_CHN_NUM: u32 = 3;
pub const VI_MAX_EXT_CHN_NUM: u32 = 2;
pub const VI_MAX_CHN_NUM: u32 = 5;
pub const VI_EXT_CHN_START: u32 = 5;
pub const VI_MAX_EXTCHN_BIND_PER_CHN: u32 = 1;
pub const VI_MAX_WDR_FRAME_NUM: u32 = 2;
pub const VI_MAX_NODE_NUM: u32 = 3;
pub const VIPROC_IP_NUM: u32 = 1;
pub const VICAP_IP_NUM: u32 = 1;
pub const VI_MAX_SPLIT_NODE_NUM: u32 = 3;
pub const VI_DEV_MIN_WIDTH: u32 = 120;
pub const VI_DEV_MIN_HEIGHT: u32 = 120;
pub const VI_DEV_MAX_WIDTH: u32 = 4608;
pub const VI_DEV_MAX_HEIGHT: u32 = 4608;
pub const VI_FPN_MAX_WIDTH: u32 = 4096;
pub const VI_FPN_MAX_HEIGHT: u32 = 4608;
pub const VI_PIPE_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_OFFLINE_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_OFFLINE_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_ONLINE_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_ONLINE_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE0_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE0_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE1_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE1_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE2_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE2_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE3_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE3_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE_WDR_FIRST_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_FUSION_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_FUSION_MAX_HEIGHT: u32 = 1944;
pub const VI_PHYCHN_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MAX_WIDTH: u32 = 4608;
pub const VI_PHYCHN_OFFLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_PHYCHN_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_ONLINE_MAX_WIDTH: u32 = 2048;
pub const VI_PHYCHN_ONLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_CMP_PARAM_SIZE: u32 = 152;
pub const CVI_VI_VPSS_EXTRA_BUF: u32 = 0;
pub const CVI_VI_CHN_0_BUF: u32 = 2;
pub const CVI_VI_CHN_1_BUF: u32 = 2;
pub const CVI_VI_CHN_2_BUF: u32 = 2;
pub const CVI_VI_CHN_3_BUF: u32 = 2;
pub const CVI_VI_BUF: u32 = 8;
pub const VO_MIN_CHN_WIDTH: u32 = 32;
pub const VO_MIN_CHN_HEIGHT: u32 = 32;
pub const VO_MAX_DEV_NUM: u32 = 1;
pub const VO_MAX_LAYER_NUM: u32 = 1;
pub const VO_MAX_PRIORITY: u32 = 1;
pub const VO_MAX_CHN_NUM: u32 = 1;
pub const VO_MAX_LAYER_IN_DEV: u32 = 1;
pub const VO_MAX_GRAPHICS_LAYER_NUM: u32 = 1;
pub const VO_MIN_TOLERATE: u32 = 1;
pub const VO_MAX_TOLERATE: u32 = 100000;
pub const AI_DEV_MAX_NUM: u32 = 1;
pub const AO_DEV_MIN_NUM: u32 = 0;
pub const AO_DEV_MAX_NUM: u32 = 2;
pub const AIO_MAX_NUM: u32 = 2;
pub const AENC_MAX_CHN_NUM: u32 = 3;
pub const ADEC_MAX_CHN_NUM: u32 = 3;
pub const AI_MAX_CHN_NUM: u32 = 2;
pub const AO_MAX_CHN_NUM: u32 = 1;
pub const AO_SYSCHN_CHNID: u32 = 0;
pub const VPSS_IP_NUM: u32 = 2;
pub const VPSS_DEV_0: u32 = 0;
pub const VPSS_DEV_1: u32 = 1;
pub const VPSS_MAX_GRP_NUM: u32 = 16;
pub const VPSS_ONLINE_NUM: u32 = 3;
pub const VPSS_ONLINE_GRP_0: u32 = 0;
pub const VPSS_ONLINE_GRP_1: u32 = 1;
pub const VPSS_ONLINE_GRP_2: u32 = 2;
pub const VPSS_MAX_PHY_CHN_NUM: u32 = 4;
pub const VPSS_MAX_CHN_NUM: u32 = 4;
pub const VPSS_MIN_IMAGE_WIDTH: u32 = 32;
pub const VPSS_MAX_IMAGE_WIDTH: u32 = 2880;
pub const VPSS_MAX_IMAGE_HEIGHT: u32 = 4096;
pub const VPSS_MAX_ZOOMIN: u32 = 32;
pub const VPSS_MAX_ZOOMOUT: u32 = 32;
pub const LDC_ALIGN: u32 = 64;
pub const LDC_MIN_IMAGE_WIDTH: u32 = 640;
pub const LDC_MIN_IMAGE_HEIGHT: u32 = 480;
pub const SPREAD_MIN_IMAGE_WIDTH: u32 = 640;
pub const SPREAD_MIN_IMAGE_HEIGHT: u32 = 480;
pub const GDC_IP_NUM: u32 = 1;
pub const GDC_PROC_JOB_INFO_NUM: u32 = 500;
pub const VER_X: u32 = 1;
pub const VER_Y: u32 = 0;
pub const VER_Z: u32 = 0;
pub const VER_D: &[u8; 9] = b" Release\0";
pub const CVI_INVALID_CHN: i32 = -1;
pub const CVI_INVALID_LAYER: i32 = -1;
pub const CVI_INVALID_DEV: i32 = -1;
pub const CVI_INVALID_HANDLE: i32 = -1;
pub const CVI_INVALID_VALUE: i32 = -1;
pub const CVI_INVALID_TYPE: i32 = -1;
pub const CCM_MATRIX_SIZE: u32 = 9;
pub const CCM_MATRIX_NUM: u32 = 7;
pub const VERSION_NAME_MAXLEN: u32 = 128;
pub const CONFIG_CVI_GDB_NO: u32 = 1;
pub const CONFIG_CVI_GDB: &[u8; 2] = b"n\0";
pub const CONFIG_CVI_LOG_TRACE_SUPPORT: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_ALL: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_LEVEL: u32 = 4;
pub const CVI_DBG_EMERG: u32 = 0;
pub const CVI_DBG_ALERT: u32 = 1;
pub const CVI_DBG_CRIT: u32 = 2;
pub const CVI_DBG_ERR: u32 = 3;
pub const CVI_DBG_WARN: u32 = 4;
pub const CVI_DBG_NOTICE: u32 = 5;
pub const CVI_DBG_INFO: u32 = 6;
pub const CVI_DBG_DEBUG: u32 = 7;
pub const _SYS_TIME_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const FD_SETSIZE: u32 = 1024;
pub const SRC_LENS_COEF_SEG: u32 = 2;
pub const DST_LENS_COEF_SEG: u32 = 3;
pub const SRC_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_NUM: u32 = 4;
pub const ISP_BAYER_CHN: u32 = 4;
pub const ISP_WB_GAIN_NUM: u32 = 4;
pub const ISP_CAP_CCM_NUM: u32 = 9;
pub const VI_MAX_ADCHN_NUM: u32 = 4;
pub const VI_COMPMASK_NUM: u32 = 2;
pub const VI_PRO_MAX_FRAME_NUM: u32 = 8;
pub const VI_SHARPEN_GAIN_NUM: u32 = 32;
pub const VI_AUTO_ISO_STRENGTH_NUM: u32 = 16;
pub const VI_INVALID_FRMRATE: i32 = -1;
pub const VI_CHN0: u32 = 0;
pub const VI_CHN1: u32 = 1;
pub const VI_CHN2: u32 = 2;
pub const VI_CHN3: u32 = 3;
pub const VI_INVALID_CHN: i32 = -1;
pub const VI_MAX_VC_NUM: u32 = 4;
pub const CSC_MATRIX_SIZE: u32 = 9;
pub const CSC_OFFSET_SIZE: u32 = 3;
pub const AE_MAX_ZONE_ROW: u32 = 30;
pub const AE_MAX_ZONE_COLUMN: u32 = 34;
pub const AE_ZONE_ROW: u32 = 30;
pub const AE_ZONE_COLUMN: u32 = 34;
pub const AE_ZONE_NUM: u32 = 1020;
pub const AE_MAX_NUM: u32 = 1;
pub const AWB_ZONE_ORIG_ROW: u32 = 30;
pub const AWB_ZONE_ORIG_COLUMN: u32 = 34;
pub const AWB_ZONE_MAX_COLUMN: u32 = 34;
pub const AWB_ZONE_NUM: u32 = 1020;
pub const AWB_MAX_NUM: u32 = 1;
pub const HIST_BIN_DEPTH: u32 = 8;
pub const MAX_HIST_BINS: u32 = 256;
pub const MAX_EXPOSURE_RATIO: u32 = 256;
pub const MAX_DRC_HIST_BINS: u32 = 65536;
pub const DCF_DRSCRIPTION_LENGTH: u32 = 32;
pub const DCF_CAPTURE_TIME_LENGTH: u32 = 20;
pub const ISP_AUTO_ISO_STRENGTH_NUM: u32 = 16;
pub const ISP_AUTO_EXP_RATIO_NUM: u32 = 16;
pub const ISP_AUTO_COLORTEMP_NUM: u32 = 7;
pub const CVI_ISP_LSC_GRID_COL: u32 = 37;
pub const CVI_ISP_LSC_GRID_ROW: u32 = 37;
pub const CVI_ISP_LSC_GRID_POINTS: u32 = 1369;
pub const DCI_BINS_NUM: u32 = 256;
pub const ISP_MAX_SNS_REGS: u32 = 32;
pub const ISP_MAX_WDR_FRAME_NUM: u32 = 2;
pub const BAYER_PATTERN_NUM: u32 = 4;
pub const MG_ZONE_ROW: u32 = 15;
pub const MG_ZONE_COLUMN: u32 = 17;
pub const AF_ZONE_ROW: u32 = 15;
pub const AF_ZONE_COLUMN: u32 = 17;
pub const AF_XOFFSET_MIN: u32 = 8;
pub const AF_YOFFSET_MIN: u32 = 2;
pub const MAX_AWB_LIB_NUM: u32 = 4;
pub const MAX_AE_LIB_NUM: u32 = 4;
pub const LTM_DARK_CURVE_NODE_NUM: u32 = 257;
pub const LTM_BRIGHT_CURVE_NODE_NUM: u32 = 513;
pub const LTM_GLOBAL_CURVE_NODE_NUM: u32 = 769;
pub const ISP_3ALIB_FIND_FAIL: i32 = -1;
pub const SHARPEN_LUT_NUM: u32 = 33;
pub const MOTION_NR_TABLE_NUM: u32 = 16;
pub const HIST_NUM: u32 = 256;
pub const ISP_BASE_ADDR: u32 = 167772160;
pub const ISP_REG_RANGE: u32 = 524288;
pub const DEHAZE_LUT_NUM: u32 = 32;
pub const DIS_MAX_WINDOW_X_NUM: u32 = 3;
pub const DIS_MAX_WINDOW_Y_NUM: u32 = 3;
pub const XHIST_LENGTH: u32 = 255;
pub const YHIST_LENGTH: u32 = 255;
pub const MIN_LV: i32 = -5;
pub const MAX_LV: u32 = 15;
pub const LV_TOTAL_NUM: u32 = 21;
pub const AE_LV_FACTOR: u32 = 100;
pub const ISP_AUTO_LV_NUM: u32 = 21;
pub const AE_WEIGHT_ZONE_ROW: u32 = 15;
pub const AE_WEIGHT_ZONE_COLUMN: u32 = 17;
pub const FACE_WIN_NUM: u32 = 4;
pub const AI_MAX_STEP_FNO_NUM: u32 = 1024;
pub const ISP_AE_ROUTE_MIN_NODES: u32 = 1;
pub const ISP_AE_ROUTE_MAX_NODES: u32 = 16;
pub const ISP_AE_ROUTE_EX_MIN_NODES: u32 = 1;
pub const ISP_AE_ROUTE_EX_MAX_NODES: u32 = 16;
pub const SMART_MAX_NUM: u32 = 3;
pub const SMART_CLASS_MAX: u32 = 2;
pub const WDR_EXP_RATIO_NUM: u32 = 3;
pub const FIR_H_GAIN_NUM: u32 = 5;
pub const FIR_V_GAIN_NUM: u32 = 3;
pub const AF_GAMMA_NUM: u32 = 256;
pub const AWB_CALIB_PTS_NUM: u32 = 3;
pub const AWB_CT_BIN_NUM: u32 = 8;
pub const AWB_CALIB_PTS_NUM_EX: u32 = 10;
pub const AWB_LUM_HIST_NUM: u32 = 6;
pub const AWB_CT_LV_NUM: u32 = 4;
pub const AWB_CURVE_PARA_NUM: u32 = 6;
pub const AWB_CURVE_BOUND_NUM: u32 = 8;
pub const AWB_LS_NUM: u32 = 4;
pub const AWB_ZONE_WT_W: u32 = 32;
pub const AWB_ZONE_WT_H: u32 = 32;
pub const AWB_ZONE_WT_NUM: u32 = 1024;
pub const STATIC_DP_COUNT_MAX: u32 = 4096;
pub const ISP_MLSC_COLOR_TEMPERATURE_SIZE: u32 = 7;
pub const DRC_DARK_USER_DEFINE_NUM: u32 = 257;
pub const DRC_BRIGHT_USER_DEFINE_NUM: u32 = 513;
pub const DRC_GLOBAL_USER_DEFINE_NUM: u32 = 1025;
pub const GAMMA_NODE_NUM: u32 = 256;
pub const GAMMA_MAX_INTERPOLATION_NUM: u32 = 5;
pub const ISP_CLUT_LUT_LENGTH: u32 = 4913;
pub const CA_LUT_NUM: u32 = 256;
pub const CA_LITE_NODE: u32 = 6;
pub const EE_LUT_NODE: u32 = 4;
pub const CNR_MOTION_LUT_NUM: u32 = 16;
pub const NOISE_PROFILE_CHANNEL_NUM: u32 = 4;
pub const NOISE_PROFILE_LEVEL_NUM: u32 = 2;
pub const NOISE_PROFILE_ISO_NUM: u32 = 16;
pub const USE_USER_SEN_DRIVER: u32 = 1;
pub const ALG_LIB_NAME_SIZE_MAX: u32 = 20;
pub const MAX_REGISTER_ALG_LIB_NUM: u32 = 4;
pub const HIST_THRESH_NUM: u32 = 4;
pub const MAX_AE_W: u32 = 32;
pub const MAX_AE_H: u32 = 24;
pub const MAX_AE_SIZE: u32 = 768;
pub const MAX_AE_WIN: u32 = 2;
pub const ENABLE_AF_LIB: u32 = 0;
pub const RESERVE_SIZE: u32 = 10;
pub const AWB_DBG_VER: u32 = 11;
pub const AWB_SENSOR_NUM: u32 = 2;
pub const AWB_DBG_W: u32 = 64;
pub const AWB_DBG_H: u32 = 32;
pub const AWB_SHIFT_REGION_NUM: u32 = 4;
pub const CVI_AE_LIB_NAME: &[u8; 11] = b"cvi_ae_lib\0";
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct img_size_s {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of img_size_s"][::std::mem::size_of::<img_size_s>() - 8usize];
    ["Alignment of img_size_s"][::std::mem::align_of::<img_size_s>() - 4usize];
    ["Offset of field: img_size_s::width"][::std::mem::offset_of!(img_size_s, width) - 0usize];
    ["Offset of field: img_size_s::height"][::std::mem::offset_of!(img_size_s, height) - 4usize];
};
pub const rx_mac_clk_e_RX_MAC_CLK_200M: rx_mac_clk_e = 0;
pub const rx_mac_clk_e_RX_MAC_CLK_300M: rx_mac_clk_e = 1;
pub const rx_mac_clk_e_RX_MAC_CLK_400M: rx_mac_clk_e = 2;
pub const rx_mac_clk_e_RX_MAC_CLK_500M: rx_mac_clk_e = 3;
pub const rx_mac_clk_e_RX_MAC_CLK_600M: rx_mac_clk_e = 4;
pub const rx_mac_clk_e_RX_MAC_CLK_BUTT: rx_mac_clk_e = 5;
pub type rx_mac_clk_e = ::std::os::raw::c_uint;
pub const cam_pll_freq_e_CAMPLL_FREQ_NONE: cam_pll_freq_e = 0;
pub const cam_pll_freq_e_CAMPLL_FREQ_37P125M: cam_pll_freq_e = 1;
pub const cam_pll_freq_e_CAMPLL_FREQ_25M: cam_pll_freq_e = 2;
pub const cam_pll_freq_e_CAMPLL_FREQ_27M: cam_pll_freq_e = 3;
pub const cam_pll_freq_e_CAMPLL_FREQ_24M: cam_pll_freq_e = 4;
pub const cam_pll_freq_e_CAMPLL_FREQ_26M: cam_pll_freq_e = 5;
pub const cam_pll_freq_e_CAMPLL_FREQ_NUM: cam_pll_freq_e = 6;
pub type cam_pll_freq_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mclk_pll_s {
    pub cam: ::std::os::raw::c_uint,
    pub freq: cam_pll_freq_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mclk_pll_s"][::std::mem::size_of::<mclk_pll_s>() - 8usize];
    ["Alignment of mclk_pll_s"][::std::mem::align_of::<mclk_pll_s>() - 4usize];
    ["Offset of field: mclk_pll_s::cam"][::std::mem::offset_of!(mclk_pll_s, cam) - 0usize];
    ["Offset of field: mclk_pll_s::freq"][::std::mem::offset_of!(mclk_pll_s, freq) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dphy_s {
    pub enable: ::std::os::raw::c_uchar,
    pub hs_settle: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dphy_s"][::std::mem::size_of::<dphy_s>() - 2usize];
    ["Alignment of dphy_s"][::std::mem::align_of::<dphy_s>() - 1usize];
    ["Offset of field: dphy_s::enable"][::std::mem::offset_of!(dphy_s, enable) - 0usize];
    ["Offset of field: dphy_s::hs_settle"][::std::mem::offset_of!(dphy_s, hs_settle) - 1usize];
};
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_0: lane_divide_mode_e = 0;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_1: lane_divide_mode_e = 1;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_2: lane_divide_mode_e = 2;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_3: lane_divide_mode_e = 3;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_4: lane_divide_mode_e = 4;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_5: lane_divide_mode_e = 5;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_6: lane_divide_mode_e = 6;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_7: lane_divide_mode_e = 7;
pub const lane_divide_mode_e_LANE_DIVIDE_MODE_BUTT: lane_divide_mode_e = 8;
pub type lane_divide_mode_e = ::std::os::raw::c_uint;
pub const input_mode_e_INPUT_MODE_MIPI: input_mode_e = 0;
pub const input_mode_e_INPUT_MODE_SUBLVDS: input_mode_e = 1;
pub const input_mode_e_INPUT_MODE_HISPI: input_mode_e = 2;
pub const input_mode_e_INPUT_MODE_CMOS: input_mode_e = 3;
pub const input_mode_e_INPUT_MODE_BT1120: input_mode_e = 4;
pub const input_mode_e_INPUT_MODE_BT601: input_mode_e = 5;
pub const input_mode_e_INPUT_MODE_BT656_9B: input_mode_e = 6;
pub const input_mode_e_INPUT_MODE_CUSTOM_0: input_mode_e = 7;
pub const input_mode_e_INPUT_MODE_BT_DEMUX: input_mode_e = 8;
pub const input_mode_e_INPUT_MODE_BUTT: input_mode_e = 9;
pub type input_mode_e = ::std::os::raw::c_uint;
pub const raw_data_type_e_RAW_DATA_8BIT: raw_data_type_e = 0;
pub const raw_data_type_e_RAW_DATA_10BIT: raw_data_type_e = 1;
pub const raw_data_type_e_RAW_DATA_12BIT: raw_data_type_e = 2;
pub const raw_data_type_e_YUV422_8BIT: raw_data_type_e = 3;
pub const raw_data_type_e_YUV422_10BIT: raw_data_type_e = 4;
pub const raw_data_type_e_RAW_DATA_BUTT: raw_data_type_e = 5;
pub type raw_data_type_e = ::std::os::raw::c_uint;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_NONE: mipi_wdr_mode_e = 0;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_VC: mipi_wdr_mode_e = 1;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_DT: mipi_wdr_mode_e = 2;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_DOL: mipi_wdr_mode_e = 3;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_MANUAL: mipi_wdr_mode_e = 4;
pub const mipi_wdr_mode_e_CVI_MIPI_WDR_MODE_BUTT: mipi_wdr_mode_e = 5;
pub type mipi_wdr_mode_e = ::std::os::raw::c_uint;
pub const wdr_mode_e_CVI_WDR_MODE_NONE: wdr_mode_e = 0;
pub const wdr_mode_e_CVI_WDR_MODE_2F: wdr_mode_e = 1;
pub const wdr_mode_e_CVI_WDR_MODE_3F: wdr_mode_e = 2;
pub const wdr_mode_e_CVI_WDR_MODE_DOL_2F: wdr_mode_e = 3;
pub const wdr_mode_e_CVI_WDR_MODE_DOL_3F: wdr_mode_e = 4;
pub const wdr_mode_e_CVI_WDR_MODE_DOL_BUTT: wdr_mode_e = 5;
pub type wdr_mode_e = ::std::os::raw::c_uint;
pub const lvds_sync_mode_e_LVDS_SYNC_MODE_SOF: lvds_sync_mode_e = 0;
pub const lvds_sync_mode_e_LVDS_SYNC_MODE_SAV: lvds_sync_mode_e = 1;
pub const lvds_sync_mode_e_LVDS_SYNC_MODE_BUTT: lvds_sync_mode_e = 2;
pub type lvds_sync_mode_e = ::std::os::raw::c_uint;
pub const lvds_bit_endian_LVDS_ENDIAN_LITTLE: lvds_bit_endian = 0;
pub const lvds_bit_endian_LVDS_ENDIAN_BIG: lvds_bit_endian = 1;
pub const lvds_bit_endian_LVDS_ENDIAN_BUTT: lvds_bit_endian = 2;
pub type lvds_bit_endian = ::std::os::raw::c_uint;
pub const lvds_vsync_type_e_LVDS_VSYNC_NORMAL: lvds_vsync_type_e = 0;
pub const lvds_vsync_type_e_LVDS_VSYNC_SHARE: lvds_vsync_type_e = 1;
pub const lvds_vsync_type_e_LVDS_VSYNC_HCONNECT: lvds_vsync_type_e = 2;
pub const lvds_vsync_type_e_LVDS_VSYNC_BUTT: lvds_vsync_type_e = 3;
pub type lvds_vsync_type_e = ::std::os::raw::c_uint;
pub const lvds_fid_type_e_LVDS_FID_NONE: lvds_fid_type_e = 0;
pub const lvds_fid_type_e_LVDS_FID_IN_SAV: lvds_fid_type_e = 1;
pub const lvds_fid_type_e_LVDS_FID_BUTT: lvds_fid_type_e = 2;
pub type lvds_fid_type_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lvds_fid_type_s {
    pub fid: lvds_fid_type_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lvds_fid_type_s"][::std::mem::size_of::<lvds_fid_type_s>() - 4usize];
    ["Alignment of lvds_fid_type_s"][::std::mem::align_of::<lvds_fid_type_s>() - 4usize];
    ["Offset of field: lvds_fid_type_s::fid"]
        [::std::mem::offset_of!(lvds_fid_type_s, fid) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lvds_vsync_type_s {
    pub sync_type: lvds_vsync_type_e,
    pub hblank1: ::std::os::raw::c_ushort,
    pub hblank2: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lvds_vsync_type_s"][::std::mem::size_of::<lvds_vsync_type_s>() - 8usize];
    ["Alignment of lvds_vsync_type_s"][::std::mem::align_of::<lvds_vsync_type_s>() - 4usize];
    ["Offset of field: lvds_vsync_type_s::sync_type"]
        [::std::mem::offset_of!(lvds_vsync_type_s, sync_type) - 0usize];
    ["Offset of field: lvds_vsync_type_s::hblank1"]
        [::std::mem::offset_of!(lvds_vsync_type_s, hblank1) - 4usize];
    ["Offset of field: lvds_vsync_type_s::hblank2"]
        [::std::mem::offset_of!(lvds_vsync_type_s, hblank2) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lvds_dev_attr_s {
    pub wdr_mode: wdr_mode_e,
    pub sync_mode: lvds_sync_mode_e,
    pub raw_data_type: raw_data_type_e,
    pub data_endian: lvds_bit_endian,
    pub sync_code_endian: lvds_bit_endian,
    pub lane_id: [::std::os::raw::c_short; 5usize],
    pub sync_code: [[[::std::os::raw::c_short; 4usize]; 3usize]; 4usize],
    pub vsync_type: lvds_vsync_type_s,
    pub fid_type: lvds_fid_type_s,
    pub pn_swap: [::std::os::raw::c_char; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lvds_dev_attr_s"][::std::mem::size_of::<lvds_dev_attr_s>() - 148usize];
    ["Alignment of lvds_dev_attr_s"][::std::mem::align_of::<lvds_dev_attr_s>() - 4usize];
    ["Offset of field: lvds_dev_attr_s::wdr_mode"]
        [::std::mem::offset_of!(lvds_dev_attr_s, wdr_mode) - 0usize];
    ["Offset of field: lvds_dev_attr_s::sync_mode"]
        [::std::mem::offset_of!(lvds_dev_attr_s, sync_mode) - 4usize];
    ["Offset of field: lvds_dev_attr_s::raw_data_type"]
        [::std::mem::offset_of!(lvds_dev_attr_s, raw_data_type) - 8usize];
    ["Offset of field: lvds_dev_attr_s::data_endian"]
        [::std::mem::offset_of!(lvds_dev_attr_s, data_endian) - 12usize];
    ["Offset of field: lvds_dev_attr_s::sync_code_endian"]
        [::std::mem::offset_of!(lvds_dev_attr_s, sync_code_endian) - 16usize];
    ["Offset of field: lvds_dev_attr_s::lane_id"]
        [::std::mem::offset_of!(lvds_dev_attr_s, lane_id) - 20usize];
    ["Offset of field: lvds_dev_attr_s::sync_code"]
        [::std::mem::offset_of!(lvds_dev_attr_s, sync_code) - 30usize];
    ["Offset of field: lvds_dev_attr_s::vsync_type"]
        [::std::mem::offset_of!(lvds_dev_attr_s, vsync_type) - 128usize];
    ["Offset of field: lvds_dev_attr_s::fid_type"]
        [::std::mem::offset_of!(lvds_dev_attr_s, fid_type) - 136usize];
    ["Offset of field: lvds_dev_attr_s::pn_swap"]
        [::std::mem::offset_of!(lvds_dev_attr_s, pn_swap) - 140usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mipi_demux_info_s {
    pub demux_en: ::std::os::raw::c_uint,
    pub vc_mapping: [::std::os::raw::c_uchar; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mipi_demux_info_s"][::std::mem::size_of::<mipi_demux_info_s>() - 8usize];
    ["Alignment of mipi_demux_info_s"][::std::mem::align_of::<mipi_demux_info_s>() - 4usize];
    ["Offset of field: mipi_demux_info_s::demux_en"]
        [::std::mem::offset_of!(mipi_demux_info_s, demux_en) - 0usize];
    ["Offset of field: mipi_demux_info_s::vc_mapping"]
        [::std::mem::offset_of!(mipi_demux_info_s, vc_mapping) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mipi_dev_attr_s {
    pub raw_data_type: raw_data_type_e,
    pub lane_id: [::std::os::raw::c_short; 5usize],
    pub wdr_mode: mipi_wdr_mode_e,
    pub data_type: [::std::os::raw::c_short; 2usize],
    pub pn_swap: [::std::os::raw::c_char; 5usize],
    pub dphy: dphy_s,
    pub demux: mipi_demux_info_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mipi_dev_attr_s"][::std::mem::size_of::<mipi_dev_attr_s>() - 40usize];
    ["Alignment of mipi_dev_attr_s"][::std::mem::align_of::<mipi_dev_attr_s>() - 4usize];
    ["Offset of field: mipi_dev_attr_s::raw_data_type"]
        [::std::mem::offset_of!(mipi_dev_attr_s, raw_data_type) - 0usize];
    ["Offset of field: mipi_dev_attr_s::lane_id"]
        [::std::mem::offset_of!(mipi_dev_attr_s, lane_id) - 4usize];
    ["Offset of field: mipi_dev_attr_s::wdr_mode"]
        [::std::mem::offset_of!(mipi_dev_attr_s, wdr_mode) - 16usize];
    ["Offset of field: mipi_dev_attr_s::data_type"]
        [::std::mem::offset_of!(mipi_dev_attr_s, data_type) - 20usize];
    ["Offset of field: mipi_dev_attr_s::pn_swap"]
        [::std::mem::offset_of!(mipi_dev_attr_s, pn_swap) - 24usize];
    ["Offset of field: mipi_dev_attr_s::dphy"]
        [::std::mem::offset_of!(mipi_dev_attr_s, dphy) - 29usize];
    ["Offset of field: mipi_dev_attr_s::demux"]
        [::std::mem::offset_of!(mipi_dev_attr_s, demux) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct manual_wdr_attr_s {
    pub manual_en: ::std::os::raw::c_uint,
    pub l2s_distance: ::std::os::raw::c_ushort,
    pub lsef_length: ::std::os::raw::c_ushort,
    pub discard_padding_lines: ::std::os::raw::c_uint,
    pub update: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of manual_wdr_attr_s"][::std::mem::size_of::<manual_wdr_attr_s>() - 16usize];
    ["Alignment of manual_wdr_attr_s"][::std::mem::align_of::<manual_wdr_attr_s>() - 4usize];
    ["Offset of field: manual_wdr_attr_s::manual_en"]
        [::std::mem::offset_of!(manual_wdr_attr_s, manual_en) - 0usize];
    ["Offset of field: manual_wdr_attr_s::l2s_distance"]
        [::std::mem::offset_of!(manual_wdr_attr_s, l2s_distance) - 4usize];
    ["Offset of field: manual_wdr_attr_s::lsef_length"]
        [::std::mem::offset_of!(manual_wdr_attr_s, lsef_length) - 6usize];
    ["Offset of field: manual_wdr_attr_s::discard_padding_lines"]
        [::std::mem::offset_of!(manual_wdr_attr_s, discard_padding_lines) - 8usize];
    ["Offset of field: manual_wdr_attr_s::update"]
        [::std::mem::offset_of!(manual_wdr_attr_s, update) - 12usize];
};
pub const ttl_pin_func_e_TTL_PIN_FUNC_VS: ttl_pin_func_e = 0;
pub const ttl_pin_func_e_TTL_PIN_FUNC_HS: ttl_pin_func_e = 1;
pub const ttl_pin_func_e_TTL_PIN_FUNC_VDE: ttl_pin_func_e = 2;
pub const ttl_pin_func_e_TTL_PIN_FUNC_HDE: ttl_pin_func_e = 3;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D0: ttl_pin_func_e = 4;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D1: ttl_pin_func_e = 5;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D2: ttl_pin_func_e = 6;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D3: ttl_pin_func_e = 7;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D4: ttl_pin_func_e = 8;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D5: ttl_pin_func_e = 9;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D6: ttl_pin_func_e = 10;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D7: ttl_pin_func_e = 11;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D8: ttl_pin_func_e = 12;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D9: ttl_pin_func_e = 13;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D10: ttl_pin_func_e = 14;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D11: ttl_pin_func_e = 15;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D12: ttl_pin_func_e = 16;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D13: ttl_pin_func_e = 17;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D14: ttl_pin_func_e = 18;
pub const ttl_pin_func_e_TTL_PIN_FUNC_D15: ttl_pin_func_e = 19;
pub const ttl_pin_func_e_TTL_PIN_FUNC_NUM: ttl_pin_func_e = 20;
pub type ttl_pin_func_e = ::std::os::raw::c_uint;
pub const ttl_src_e_TTL_VI_SRC_VI0: ttl_src_e = 0;
pub const ttl_src_e_TTL_VI_SRC_VI1: ttl_src_e = 1;
pub const ttl_src_e_TTL_VI_SRC_VI2: ttl_src_e = 2;
pub const ttl_src_e_TTL_VI_SRC_NUM: ttl_src_e = 3;
pub type ttl_src_e = ::std::os::raw::c_uint;
pub const ttl_fmt_e_TTL_SYNC_PAT: ttl_fmt_e = 0;
pub const ttl_fmt_e_TTL_VHS_11B: ttl_fmt_e = 1;
pub const ttl_fmt_e_TTL_VHS_19B: ttl_fmt_e = 2;
pub const ttl_fmt_e_TTL_VDE_11B: ttl_fmt_e = 3;
pub const ttl_fmt_e_TTL_VDE_19B: ttl_fmt_e = 4;
pub const ttl_fmt_e_TTL_VSDE_11B: ttl_fmt_e = 5;
pub const ttl_fmt_e_TTL_VSDE_19B: ttl_fmt_e = 6;
pub type ttl_fmt_e = ::std::os::raw::c_uint;
pub const bt_demux_mode_e_BT_DEMUX_DISABLE: bt_demux_mode_e = 0;
pub const bt_demux_mode_e_BT_DEMUX_2: bt_demux_mode_e = 1;
pub const bt_demux_mode_e_BT_DEMUX_3: bt_demux_mode_e = 2;
pub const bt_demux_mode_e_BT_DEMUX_4: bt_demux_mode_e = 3;
pub type bt_demux_mode_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_demux_sync_s {
    pub sav_vld: ::std::os::raw::c_uchar,
    pub sav_blk: ::std::os::raw::c_uchar,
    pub eav_vld: ::std::os::raw::c_uchar,
    pub eav_blk: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bt_demux_sync_s"][::std::mem::size_of::<bt_demux_sync_s>() - 4usize];
    ["Alignment of bt_demux_sync_s"][::std::mem::align_of::<bt_demux_sync_s>() - 1usize];
    ["Offset of field: bt_demux_sync_s::sav_vld"]
        [::std::mem::offset_of!(bt_demux_sync_s, sav_vld) - 0usize];
    ["Offset of field: bt_demux_sync_s::sav_blk"]
        [::std::mem::offset_of!(bt_demux_sync_s, sav_blk) - 1usize];
    ["Offset of field: bt_demux_sync_s::eav_vld"]
        [::std::mem::offset_of!(bt_demux_sync_s, eav_vld) - 2usize];
    ["Offset of field: bt_demux_sync_s::eav_blk"]
        [::std::mem::offset_of!(bt_demux_sync_s, eav_blk) - 3usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_demux_attr_s {
    pub func: [::std::os::raw::c_schar; 20usize],
    pub v_fp: ::std::os::raw::c_ushort,
    pub h_fp: ::std::os::raw::c_ushort,
    pub v_bp: ::std::os::raw::c_ushort,
    pub h_bp: ::std::os::raw::c_ushort,
    pub mode: bt_demux_mode_e,
    pub sync_code_part_A: [::std::os::raw::c_uchar; 3usize],
    pub sync_code_part_B: [bt_demux_sync_s; 4usize],
    pub yc_exchg: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bt_demux_attr_s"][::std::mem::size_of::<bt_demux_attr_s>() - 52usize];
    ["Alignment of bt_demux_attr_s"][::std::mem::align_of::<bt_demux_attr_s>() - 4usize];
    ["Offset of field: bt_demux_attr_s::func"]
        [::std::mem::offset_of!(bt_demux_attr_s, func) - 0usize];
    ["Offset of field: bt_demux_attr_s::v_fp"]
        [::std::mem::offset_of!(bt_demux_attr_s, v_fp) - 20usize];
    ["Offset of field: bt_demux_attr_s::h_fp"]
        [::std::mem::offset_of!(bt_demux_attr_s, h_fp) - 22usize];
    ["Offset of field: bt_demux_attr_s::v_bp"]
        [::std::mem::offset_of!(bt_demux_attr_s, v_bp) - 24usize];
    ["Offset of field: bt_demux_attr_s::h_bp"]
        [::std::mem::offset_of!(bt_demux_attr_s, h_bp) - 26usize];
    ["Offset of field: bt_demux_attr_s::mode"]
        [::std::mem::offset_of!(bt_demux_attr_s, mode) - 28usize];
    ["Offset of field: bt_demux_attr_s::sync_code_part_A"]
        [::std::mem::offset_of!(bt_demux_attr_s, sync_code_part_A) - 32usize];
    ["Offset of field: bt_demux_attr_s::sync_code_part_B"]
        [::std::mem::offset_of!(bt_demux_attr_s, sync_code_part_B) - 35usize];
    ["Offset of field: bt_demux_attr_s::yc_exchg"]
        [::std::mem::offset_of!(bt_demux_attr_s, yc_exchg) - 51usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ttl_dev_attr_s {
    pub vi: ttl_src_e,
    pub ttl_fmt: ttl_fmt_e,
    pub raw_data_type: raw_data_type_e,
    pub func: [::std::os::raw::c_schar; 20usize],
    pub v_bp: ::std::os::raw::c_ushort,
    pub h_bp: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ttl_dev_attr_s"][::std::mem::size_of::<ttl_dev_attr_s>() - 36usize];
    ["Alignment of ttl_dev_attr_s"][::std::mem::align_of::<ttl_dev_attr_s>() - 4usize];
    ["Offset of field: ttl_dev_attr_s::vi"][::std::mem::offset_of!(ttl_dev_attr_s, vi) - 0usize];
    ["Offset of field: ttl_dev_attr_s::ttl_fmt"]
        [::std::mem::offset_of!(ttl_dev_attr_s, ttl_fmt) - 4usize];
    ["Offset of field: ttl_dev_attr_s::raw_data_type"]
        [::std::mem::offset_of!(ttl_dev_attr_s, raw_data_type) - 8usize];
    ["Offset of field: ttl_dev_attr_s::func"]
        [::std::mem::offset_of!(ttl_dev_attr_s, func) - 12usize];
    ["Offset of field: ttl_dev_attr_s::v_bp"]
        [::std::mem::offset_of!(ttl_dev_attr_s, v_bp) - 32usize];
    ["Offset of field: ttl_dev_attr_s::h_bp"]
        [::std::mem::offset_of!(ttl_dev_attr_s, h_bp) - 34usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct combo_dev_attr_s {
    pub input_mode: input_mode_e,
    pub mac_clk: rx_mac_clk_e,
    pub mclk: mclk_pll_s,
    pub __bindgen_anon_1: combo_dev_attr_s__bindgen_ty_1,
    pub devno: ::std::os::raw::c_uint,
    pub img_size: img_size_s,
    pub wdr_manu: manual_wdr_attr_s,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union combo_dev_attr_s__bindgen_ty_1 {
    pub mipi_attr: mipi_dev_attr_s,
    pub lvds_attr: lvds_dev_attr_s,
    pub ttl_attr: ttl_dev_attr_s,
    pub bt_demux_attr: bt_demux_attr_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of combo_dev_attr_s__bindgen_ty_1"]
        [::std::mem::size_of::<combo_dev_attr_s__bindgen_ty_1>() - 148usize];
    ["Alignment of combo_dev_attr_s__bindgen_ty_1"]
        [::std::mem::align_of::<combo_dev_attr_s__bindgen_ty_1>() - 4usize];
    ["Offset of field: combo_dev_attr_s__bindgen_ty_1::mipi_attr"]
        [::std::mem::offset_of!(combo_dev_attr_s__bindgen_ty_1, mipi_attr) - 0usize];
    ["Offset of field: combo_dev_attr_s__bindgen_ty_1::lvds_attr"]
        [::std::mem::offset_of!(combo_dev_attr_s__bindgen_ty_1, lvds_attr) - 0usize];
    ["Offset of field: combo_dev_attr_s__bindgen_ty_1::ttl_attr"]
        [::std::mem::offset_of!(combo_dev_attr_s__bindgen_ty_1, ttl_attr) - 0usize];
    ["Offset of field: combo_dev_attr_s__bindgen_ty_1::bt_demux_attr"]
        [::std::mem::offset_of!(combo_dev_attr_s__bindgen_ty_1, bt_demux_attr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of combo_dev_attr_s"][::std::mem::size_of::<combo_dev_attr_s>() - 192usize];
    ["Alignment of combo_dev_attr_s"][::std::mem::align_of::<combo_dev_attr_s>() - 4usize];
    ["Offset of field: combo_dev_attr_s::input_mode"]
        [::std::mem::offset_of!(combo_dev_attr_s, input_mode) - 0usize];
    ["Offset of field: combo_dev_attr_s::mac_clk"]
        [::std::mem::offset_of!(combo_dev_attr_s, mac_clk) - 4usize];
    ["Offset of field: combo_dev_attr_s::mclk"]
        [::std::mem::offset_of!(combo_dev_attr_s, mclk) - 8usize];
    ["Offset of field: combo_dev_attr_s::devno"]
        [::std::mem::offset_of!(combo_dev_attr_s, devno) - 164usize];
    ["Offset of field: combo_dev_attr_s::img_size"]
        [::std::mem::offset_of!(combo_dev_attr_s, img_size) - 168usize];
    ["Offset of field: combo_dev_attr_s::wdr_manu"]
        [::std::mem::offset_of!(combo_dev_attr_s, wdr_manu) - 176usize];
};
pub const clk_edge_e_CLK_UP_EDGE: clk_edge_e = 0;
pub const clk_edge_e_CLK_DOWN_EDGE: clk_edge_e = 1;
pub const clk_edge_e_CLK_EDGE_BUTT: clk_edge_e = 2;
pub type clk_edge_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clk_edge_s {
    pub devno: ::std::os::raw::c_uint,
    pub edge: clk_edge_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of clk_edge_s"][::std::mem::size_of::<clk_edge_s>() - 8usize];
    ["Alignment of clk_edge_s"][::std::mem::align_of::<clk_edge_s>() - 4usize];
    ["Offset of field: clk_edge_s::devno"][::std::mem::offset_of!(clk_edge_s, devno) - 0usize];
    ["Offset of field: clk_edge_s::edge"][::std::mem::offset_of!(clk_edge_s, edge) - 4usize];
};
pub const output_msb_e_OUTPUT_NORM_MSB: output_msb_e = 0;
pub const output_msb_e_OUTPUT_REVERSE_MSB: output_msb_e = 1;
pub const output_msb_e_OUTPUT_MSB_BUTT: output_msb_e = 2;
pub type output_msb_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msb_s {
    pub devno: ::std::os::raw::c_uint,
    pub msb: output_msb_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msb_s"][::std::mem::size_of::<msb_s>() - 8usize];
    ["Alignment of msb_s"][::std::mem::align_of::<msb_s>() - 4usize];
    ["Offset of field: msb_s::devno"][::std::mem::offset_of!(msb_s, devno) - 0usize];
    ["Offset of field: msb_s::msb"][::std::mem::offset_of!(msb_s, msb) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crop_top_s {
    pub devno: ::std::os::raw::c_uint,
    pub crop_top: ::std::os::raw::c_uint,
    pub update: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of crop_top_s"][::std::mem::size_of::<crop_top_s>() - 12usize];
    ["Alignment of crop_top_s"][::std::mem::align_of::<crop_top_s>() - 4usize];
    ["Offset of field: crop_top_s::devno"][::std::mem::offset_of!(crop_top_s, devno) - 0usize];
    ["Offset of field: crop_top_s::crop_top"]
        [::std::mem::offset_of!(crop_top_s, crop_top) - 4usize];
    ["Offset of field: crop_top_s::update"][::std::mem::offset_of!(crop_top_s, update) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct manual_wdr_s {
    pub devno: ::std::os::raw::c_uint,
    pub attr: manual_wdr_attr_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of manual_wdr_s"][::std::mem::size_of::<manual_wdr_s>() - 20usize];
    ["Alignment of manual_wdr_s"][::std::mem::align_of::<manual_wdr_s>() - 4usize];
    ["Offset of field: manual_wdr_s::devno"][::std::mem::offset_of!(manual_wdr_s, devno) - 0usize];
    ["Offset of field: manual_wdr_s::attr"][::std::mem::offset_of!(manual_wdr_s, attr) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct vsync_gen_s {
    pub devno: ::std::os::raw::c_uint,
    pub distance_fp: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vsync_gen_s"][::std::mem::size_of::<vsync_gen_s>() - 8usize];
    ["Alignment of vsync_gen_s"][::std::mem::align_of::<vsync_gen_s>() - 4usize];
    ["Offset of field: vsync_gen_s::devno"][::std::mem::offset_of!(vsync_gen_s, devno) - 0usize];
    ["Offset of field: vsync_gen_s::distance_fp"]
        [::std::mem::offset_of!(vsync_gen_s, distance_fp) - 4usize];
};
pub const bt_fmt_out_e_BT_FMT_OUT_CBYCRY: bt_fmt_out_e = 0;
pub const bt_fmt_out_e_BT_FMT_OUT_CRYCBY: bt_fmt_out_e = 1;
pub const bt_fmt_out_e_BT_FMT_OUT_YCBYCR: bt_fmt_out_e = 2;
pub const bt_fmt_out_e_BT_FMT_OUT_YCRYCB: bt_fmt_out_e = 3;
pub type bt_fmt_out_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bt_fmt_out_s {
    pub devno: ::std::os::raw::c_uint,
    pub fmt_out: bt_fmt_out_e,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bt_fmt_out_s"][::std::mem::size_of::<bt_fmt_out_s>() - 8usize];
    ["Alignment of bt_fmt_out_s"][::std::mem::align_of::<bt_fmt_out_s>() - 4usize];
    ["Offset of field: bt_fmt_out_s::devno"][::std::mem::offset_of!(bt_fmt_out_s, devno) - 0usize];
    ["Offset of field: bt_fmt_out_s::fmt_out"]
        [::std::mem::offset_of!(bt_fmt_out_s, fmt_out) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cif_crop_win_s {
    pub devno: ::std::os::raw::c_uint,
    pub enable: ::std::os::raw::c_uint,
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub w: ::std::os::raw::c_uint,
    pub h: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cif_crop_win_s"][::std::mem::size_of::<cif_crop_win_s>() - 24usize];
    ["Alignment of cif_crop_win_s"][::std::mem::align_of::<cif_crop_win_s>() - 4usize];
    ["Offset of field: cif_crop_win_s::devno"]
        [::std::mem::offset_of!(cif_crop_win_s, devno) - 0usize];
    ["Offset of field: cif_crop_win_s::enable"]
        [::std::mem::offset_of!(cif_crop_win_s, enable) - 4usize];
    ["Offset of field: cif_crop_win_s::x"][::std::mem::offset_of!(cif_crop_win_s, x) - 8usize];
    ["Offset of field: cif_crop_win_s::y"][::std::mem::offset_of!(cif_crop_win_s, y) - 12usize];
    ["Offset of field: cif_crop_win_s::w"][::std::mem::offset_of!(cif_crop_win_s, w) - 16usize];
    ["Offset of field: cif_crop_win_s::h"][::std::mem::offset_of!(cif_crop_win_s, h) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cif_yuv_swap_s {
    pub devno: ::std::os::raw::c_uint,
    pub uv_swap: ::std::os::raw::c_uint,
    pub yc_swap: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cif_yuv_swap_s"][::std::mem::size_of::<cif_yuv_swap_s>() - 12usize];
    ["Alignment of cif_yuv_swap_s"][::std::mem::align_of::<cif_yuv_swap_s>() - 4usize];
    ["Offset of field: cif_yuv_swap_s::devno"]
        [::std::mem::offset_of!(cif_yuv_swap_s, devno) - 0usize];
    ["Offset of field: cif_yuv_swap_s::uv_swap"]
        [::std::mem::offset_of!(cif_yuv_swap_s, uv_swap) - 4usize];
    ["Offset of field: cif_yuv_swap_s::yc_swap"]
        [::std::mem::offset_of!(cif_yuv_swap_s, yc_swap) - 8usize];
};
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_DEBUG: _ERR_LEVEL_E = 0;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_INFO: _ERR_LEVEL_E = 1;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_NOTICE: _ERR_LEVEL_E = 2;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_WARNING: _ERR_LEVEL_E = 3;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ERROR: _ERR_LEVEL_E = 4;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_CRIT: _ERR_LEVEL_E = 5;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ALERT: _ERR_LEVEL_E = 6;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_FATAL: _ERR_LEVEL_E = 7;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_BUTT: _ERR_LEVEL_E = 8;
pub type _ERR_LEVEL_E = ::std::os::raw::c_uint;
pub use self::_ERR_LEVEL_E as ERR_LEVEL_E;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_DEVID: _EN_ERR_CODE_E = 1;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_CHNID: _EN_ERR_CODE_E = 2;
pub const _EN_ERR_CODE_E_EN_ERR_ILLEGAL_PARAM: _EN_ERR_CODE_E = 3;
pub const _EN_ERR_CODE_E_EN_ERR_EXIST: _EN_ERR_CODE_E = 4;
pub const _EN_ERR_CODE_E_EN_ERR_UNEXIST: _EN_ERR_CODE_E = 5;
pub const _EN_ERR_CODE_E_EN_ERR_NULL_PTR: _EN_ERR_CODE_E = 6;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_CONFIG: _EN_ERR_CODE_E = 7;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_SUPPORT: _EN_ERR_CODE_E = 8;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_PERM: _EN_ERR_CODE_E = 9;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_PIPEID: _EN_ERR_CODE_E = 10;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_GRPID: _EN_ERR_CODE_E = 11;
pub const _EN_ERR_CODE_E_EN_ERR_NOMEM: _EN_ERR_CODE_E = 12;
pub const _EN_ERR_CODE_E_EN_ERR_NOBUF: _EN_ERR_CODE_E = 13;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_EMPTY: _EN_ERR_CODE_E = 14;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_FULL: _EN_ERR_CODE_E = 15;
pub const _EN_ERR_CODE_E_EN_ERR_SYS_NOTREADY: _EN_ERR_CODE_E = 16;
pub const _EN_ERR_CODE_E_EN_ERR_BADADDR: _EN_ERR_CODE_E = 17;
pub const _EN_ERR_CODE_E_EN_ERR_BUSY: _EN_ERR_CODE_E = 18;
pub const _EN_ERR_CODE_E_EN_ERR_SIZE_NOT_ENOUGH: _EN_ERR_CODE_E = 19;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_VB: _EN_ERR_CODE_E = 20;
pub const _EN_ERR_CODE_E_EN_ERR_BUTT: _EN_ERR_CODE_E = 63;
pub type _EN_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_ERR_CODE_E as EN_ERR_CODE_E;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_ENABLED: _EN_VI_ERR_CODE_E = 64;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_DISABLED: _EN_VI_ERR_CODE_E = 65;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_CHN_NOT_DISABLED: _EN_VI_ERR_CODE_E = 66;
pub const _EN_VI_ERR_CODE_E_ERR_VI_CFG_TIMEOUT: _EN_VI_ERR_CODE_E = 67;
pub const _EN_VI_ERR_CODE_E_ERR_VI_NORM_UNMATCH: _EN_VI_ERR_CODE_E = 68;
pub const _EN_VI_ERR_CODE_E_ERR_VI_INVALID_PHYCHNID: _EN_VI_ERR_CODE_E = 69;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOTBIND: _EN_VI_ERR_CODE_E = 70;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_BINDED: _EN_VI_ERR_CODE_E = 71;
pub const _EN_VI_ERR_CODE_E_ERR_VI_DIS_PROCESS_FAIL: _EN_VI_ERR_CODE_E = 72;
pub type _EN_VI_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VI_ERR_CODE_E as EN_VI_ERR_CODE_E;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 64;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 65;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_HAS_ENABLED: _EN_VOU_ERR_CODE_E = 66;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 69;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 70;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 71;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 72;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 73;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 74;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_WAIT_TIMEOUT: _EN_VOU_ERR_CODE_E = 78;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_VFRAME: _EN_VOU_ERR_CODE_E = 79;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_RECT_PARA: _EN_VOU_ERR_CODE_E = 80;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_AREA_OVERLAP: _EN_VOU_ERR_CODE_E = 101;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_LAYERID: _EN_VOU_ERR_CODE_E = 102;
pub const _EN_VOU_ERR_CODE_E_ERR_VO_BUTT: _EN_VOU_ERR_CODE_E = 103;
pub type _EN_VOU_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VOU_ERR_CODE_E as EN_VOU_ERR_CODE_E;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type CVI_UCHAR = ::std::os::raw::c_uchar;
pub type CVI_U8 = ::std::os::raw::c_uchar;
pub type CVI_U16 = ::std::os::raw::c_ushort;
pub type CVI_U32 = ::std::os::raw::c_uint;
pub type CVI_HANDLE = ::std::os::raw::c_uint;
pub type CVI_S8 = ::std::os::raw::c_schar;
pub type CVI_CHAR = ::std::os::raw::c_char;
pub type CVI_S16 = ::std::os::raw::c_short;
pub type CVI_S32 = ::std::os::raw::c_int;
pub type CVI_UL = ::std::os::raw::c_ulong;
pub type CVI_SL = ::std::os::raw::c_long;
pub type CVI_FLOAT = f32;
pub type CVI_DOUBLE = f64;
pub type CVI_VOID = ::std::os::raw::c_void;
pub type CVI_BOOL = ::std::os::raw::c_uchar;
pub type CVI_U64 = u64;
pub type CVI_S64 = i64;
pub type CVI_SIZE_T = ::std::os::raw::c_uint;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal32 {
    pub signr: ::std::os::raw::c_uint,
    pub context: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal32"][::std::mem::size_of::<base_statesignal32>() - 8usize];
    ["Alignment of base_statesignal32"][::std::mem::align_of::<base_statesignal32>() - 4usize];
    ["Offset of field: base_statesignal32::signr"]
        [::std::mem::offset_of!(base_statesignal32, signr) - 0usize];
    ["Offset of field: base_statesignal32::context"]
        [::std::mem::offset_of!(base_statesignal32, context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal"][::std::mem::size_of::<base_statesignal>() - 16usize];
    ["Alignment of base_statesignal"][::std::mem::align_of::<base_statesignal>() - 8usize];
    ["Offset of field: base_statesignal::signr"]
        [::std::mem::offset_of!(base_statesignal, signr) - 0usize];
    ["Offset of field: base_statesignal::context"]
        [::std::mem::offset_of!(base_statesignal, context) - 8usize];
};
pub const base_state_e_BASE_STATE_NORMAL: base_state_e = 0;
pub const base_state_e_BASE_STATE_SUSPEND_PREPARE: base_state_e = 1;
pub const base_state_e_BASE_STATE_SUSPEND: base_state_e = 2;
pub const base_state_e_BASE_STATE_RESUME: base_state_e = 3;
pub const base_state_e_BASE_STATE_NUM: base_state_e = 4;
pub type base_state_e = ::std::os::raw::c_uint;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822: ENUM_CHIP_ID = 0;
pub const ENUM_CHIP_ID_E_CHIPID_CV1832: ENUM_CHIP_ID = 1;
pub const ENUM_CHIP_ID_E_CHIPID_CV1835: ENUM_CHIP_ID = 2;
pub const ENUM_CHIP_ID_E_CHIPID_CV1838: ENUM_CHIP_ID = 3;
pub const ENUM_CHIP_ID_E_CHIPID_CV1829: ENUM_CHIP_ID = 4;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826: ENUM_CHIP_ID = 5;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821: ENUM_CHIP_ID = 6;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820: ENUM_CHIP_ID = 7;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823: ENUM_CHIP_ID = 8;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825: ENUM_CHIP_ID = 9;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820A: ENUM_CHIP_ID = 10;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821A: ENUM_CHIP_ID = 11;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822A: ENUM_CHIP_ID = 12;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823A: ENUM_CHIP_ID = 13;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825A: ENUM_CHIP_ID = 14;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826A: ENUM_CHIP_ID = 15;
pub const ENUM_CHIP_ID_E_CHIPID_CV1810C: ENUM_CHIP_ID = 16;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811C: ENUM_CHIP_ID = 17;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812C: ENUM_CHIP_ID = 18;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811H: ENUM_CHIP_ID = 19;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812H: ENUM_CHIP_ID = 20;
pub const ENUM_CHIP_ID_E_CHIPID_CV1813H: ENUM_CHIP_ID = 21;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800B: ENUM_CHIP_ID = 22;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801B: ENUM_CHIP_ID = 23;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800C: ENUM_CHIP_ID = 24;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801C: ENUM_CHIP_ID = 25;
pub type ENUM_CHIP_ID = ::std::os::raw::c_uint;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U01: ENUM_CHIP_VERSION = 1;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U02: ENUM_CHIP_VERSION = 2;
pub type ENUM_CHIP_VERSION = ::std::os::raw::c_uint;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_COLDBOOT: ENUM_CHIP_PWR_ON_REASON = 1;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WDT: ENUM_CHIP_PWR_ON_REASON = 2;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_SUSPEND: ENUM_CHIP_PWR_ON_REASON = 3;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WARM_RST: ENUM_CHIP_PWR_ON_REASON = 4;
pub type ENUM_CHIP_PWR_ON_REASON = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct vb_ext_control {
    pub id: __u32,
    pub reserved: [__u32; 1usize],
    pub __bindgen_anon_1: vb_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vb_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control__bindgen_ty_1"]
        [::std::mem::size_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Alignment of vb_ext_control__bindgen_ty_1"]
        [::std::mem::align_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value64"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value64) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control"][::std::mem::size_of::<vb_ext_control>() - 16usize];
    ["Alignment of vb_ext_control"][::std::mem::align_of::<vb_ext_control>() - 1usize];
    ["Offset of field: vb_ext_control::id"][::std::mem::offset_of!(vb_ext_control, id) - 0usize];
    ["Offset of field: vb_ext_control::reserved"]
        [::std::mem::offset_of!(vb_ext_control, reserved) - 4usize];
};
pub type AI_CHN = CVI_S32;
pub type AO_CHN = CVI_S32;
pub type AENC_CHN = CVI_S32;
pub type ADEC_CHN = CVI_S32;
pub type AUDIO_DEV = CVI_S32;
pub type VI_DEV = CVI_S32;
pub type VI_PIPE = CVI_S32;
pub type VI_CHN = CVI_S32;
pub type VO_DEV = CVI_S32;
pub type VO_LAYER = CVI_S32;
pub type VO_CHN = CVI_S32;
pub type GRAPHIC_LAYER = CVI_S32;
pub type VENC_CHN = CVI_S32;
pub type VDEC_CHN = CVI_S32;
pub type ISP_DEV = CVI_S32;
pub type SENSOR_ID = CVI_S32;
pub type MIPI_DEV = CVI_S32;
pub type SLAVE_DEV = CVI_S32;
pub type VPSS_GRP = CVI_S32;
pub type VPSS_CHN = CVI_S32;
pub const _MOD_ID_E_CVI_ID_BASE: _MOD_ID_E = 0;
pub const _MOD_ID_E_CVI_ID_VB: _MOD_ID_E = 1;
pub const _MOD_ID_E_CVI_ID_SYS: _MOD_ID_E = 2;
pub const _MOD_ID_E_CVI_ID_RGN: _MOD_ID_E = 3;
pub const _MOD_ID_E_CVI_ID_CHNL: _MOD_ID_E = 4;
pub const _MOD_ID_E_CVI_ID_VDEC: _MOD_ID_E = 5;
pub const _MOD_ID_E_CVI_ID_VPSS: _MOD_ID_E = 6;
pub const _MOD_ID_E_CVI_ID_VENC: _MOD_ID_E = 7;
pub const _MOD_ID_E_CVI_ID_H264E: _MOD_ID_E = 8;
pub const _MOD_ID_E_CVI_ID_JPEGE: _MOD_ID_E = 9;
pub const _MOD_ID_E_CVI_ID_MPEG4E: _MOD_ID_E = 10;
pub const _MOD_ID_E_CVI_ID_H265E: _MOD_ID_E = 11;
pub const _MOD_ID_E_CVI_ID_JPEGD: _MOD_ID_E = 12;
pub const _MOD_ID_E_CVI_ID_VO: _MOD_ID_E = 13;
pub const _MOD_ID_E_CVI_ID_VI: _MOD_ID_E = 14;
pub const _MOD_ID_E_CVI_ID_DIS: _MOD_ID_E = 15;
pub const _MOD_ID_E_CVI_ID_RC: _MOD_ID_E = 16;
pub const _MOD_ID_E_CVI_ID_AIO: _MOD_ID_E = 17;
pub const _MOD_ID_E_CVI_ID_AI: _MOD_ID_E = 18;
pub const _MOD_ID_E_CVI_ID_AO: _MOD_ID_E = 19;
pub const _MOD_ID_E_CVI_ID_AENC: _MOD_ID_E = 20;
pub const _MOD_ID_E_CVI_ID_ADEC: _MOD_ID_E = 21;
pub const _MOD_ID_E_CVI_ID_AUD: _MOD_ID_E = 22;
pub const _MOD_ID_E_CVI_ID_VPU: _MOD_ID_E = 23;
pub const _MOD_ID_E_CVI_ID_ISP: _MOD_ID_E = 24;
pub const _MOD_ID_E_CVI_ID_IVE: _MOD_ID_E = 25;
pub const _MOD_ID_E_CVI_ID_USER: _MOD_ID_E = 26;
pub const _MOD_ID_E_CVI_ID_PROC: _MOD_ID_E = 27;
pub const _MOD_ID_E_CVI_ID_LOG: _MOD_ID_E = 28;
pub const _MOD_ID_E_CVI_ID_H264D: _MOD_ID_E = 29;
pub const _MOD_ID_E_CVI_ID_GDC: _MOD_ID_E = 30;
pub const _MOD_ID_E_CVI_ID_PHOTO: _MOD_ID_E = 31;
pub const _MOD_ID_E_CVI_ID_FB: _MOD_ID_E = 32;
pub const _MOD_ID_E_CVI_ID_BUTT: _MOD_ID_E = 33;
pub type _MOD_ID_E = ::std::os::raw::c_uint;
pub use self::_MOD_ID_E as MOD_ID_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_CHN_S {
    pub enModId: MOD_ID_E,
    pub s32DevId: CVI_S32,
    pub s32ChnId: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_CHN_S"][::std::mem::size_of::<_MMF_CHN_S>() - 12usize];
    ["Alignment of _MMF_CHN_S"][::std::mem::align_of::<_MMF_CHN_S>() - 4usize];
    ["Offset of field: _MMF_CHN_S::enModId"][::std::mem::offset_of!(_MMF_CHN_S, enModId) - 0usize];
    ["Offset of field: _MMF_CHN_S::s32DevId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32DevId) - 4usize];
    ["Offset of field: _MMF_CHN_S::s32ChnId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32ChnId) - 8usize];
};
pub type MMF_CHN_S = _MMF_CHN_S;
pub const PAYLOAD_TYPE_E_PT_PCMU: PAYLOAD_TYPE_E = 0;
pub const PAYLOAD_TYPE_E_PT_1016: PAYLOAD_TYPE_E = 1;
pub const PAYLOAD_TYPE_E_PT_G721: PAYLOAD_TYPE_E = 2;
pub const PAYLOAD_TYPE_E_PT_GSM: PAYLOAD_TYPE_E = 3;
pub const PAYLOAD_TYPE_E_PT_G723: PAYLOAD_TYPE_E = 4;
pub const PAYLOAD_TYPE_E_PT_DVI4_8K: PAYLOAD_TYPE_E = 5;
pub const PAYLOAD_TYPE_E_PT_DVI4_16K: PAYLOAD_TYPE_E = 6;
pub const PAYLOAD_TYPE_E_PT_LPC: PAYLOAD_TYPE_E = 7;
pub const PAYLOAD_TYPE_E_PT_PCMA: PAYLOAD_TYPE_E = 8;
pub const PAYLOAD_TYPE_E_PT_G722: PAYLOAD_TYPE_E = 9;
pub const PAYLOAD_TYPE_E_PT_S16BE_STEREO: PAYLOAD_TYPE_E = 10;
pub const PAYLOAD_TYPE_E_PT_S16BE_MONO: PAYLOAD_TYPE_E = 11;
pub const PAYLOAD_TYPE_E_PT_QCELP: PAYLOAD_TYPE_E = 12;
pub const PAYLOAD_TYPE_E_PT_CN: PAYLOAD_TYPE_E = 13;
pub const PAYLOAD_TYPE_E_PT_MPEGAUDIO: PAYLOAD_TYPE_E = 14;
pub const PAYLOAD_TYPE_E_PT_G728: PAYLOAD_TYPE_E = 15;
pub const PAYLOAD_TYPE_E_PT_DVI4_3: PAYLOAD_TYPE_E = 16;
pub const PAYLOAD_TYPE_E_PT_DVI4_4: PAYLOAD_TYPE_E = 17;
pub const PAYLOAD_TYPE_E_PT_G729: PAYLOAD_TYPE_E = 18;
pub const PAYLOAD_TYPE_E_PT_G711A: PAYLOAD_TYPE_E = 19;
pub const PAYLOAD_TYPE_E_PT_G711U: PAYLOAD_TYPE_E = 20;
pub const PAYLOAD_TYPE_E_PT_G726: PAYLOAD_TYPE_E = 21;
pub const PAYLOAD_TYPE_E_PT_G729A: PAYLOAD_TYPE_E = 22;
pub const PAYLOAD_TYPE_E_PT_LPCM: PAYLOAD_TYPE_E = 23;
pub const PAYLOAD_TYPE_E_PT_CelB: PAYLOAD_TYPE_E = 25;
pub const PAYLOAD_TYPE_E_PT_JPEG: PAYLOAD_TYPE_E = 26;
pub const PAYLOAD_TYPE_E_PT_CUSM: PAYLOAD_TYPE_E = 27;
pub const PAYLOAD_TYPE_E_PT_NV: PAYLOAD_TYPE_E = 28;
pub const PAYLOAD_TYPE_E_PT_PICW: PAYLOAD_TYPE_E = 29;
pub const PAYLOAD_TYPE_E_PT_CPV: PAYLOAD_TYPE_E = 30;
pub const PAYLOAD_TYPE_E_PT_H261: PAYLOAD_TYPE_E = 31;
pub const PAYLOAD_TYPE_E_PT_MPEGVIDEO: PAYLOAD_TYPE_E = 32;
pub const PAYLOAD_TYPE_E_PT_MPEG2TS: PAYLOAD_TYPE_E = 33;
pub const PAYLOAD_TYPE_E_PT_H263: PAYLOAD_TYPE_E = 34;
pub const PAYLOAD_TYPE_E_PT_SPEG: PAYLOAD_TYPE_E = 35;
pub const PAYLOAD_TYPE_E_PT_MPEG2VIDEO: PAYLOAD_TYPE_E = 36;
pub const PAYLOAD_TYPE_E_PT_AAC: PAYLOAD_TYPE_E = 37;
pub const PAYLOAD_TYPE_E_PT_WMA9STD: PAYLOAD_TYPE_E = 38;
pub const PAYLOAD_TYPE_E_PT_HEAAC: PAYLOAD_TYPE_E = 39;
pub const PAYLOAD_TYPE_E_PT_PCM_VOICE: PAYLOAD_TYPE_E = 40;
pub const PAYLOAD_TYPE_E_PT_PCM_AUDIO: PAYLOAD_TYPE_E = 41;
pub const PAYLOAD_TYPE_E_PT_MP3: PAYLOAD_TYPE_E = 43;
pub const PAYLOAD_TYPE_E_PT_ADPCMA: PAYLOAD_TYPE_E = 49;
pub const PAYLOAD_TYPE_E_PT_AEC: PAYLOAD_TYPE_E = 50;
pub const PAYLOAD_TYPE_E_PT_X_LD: PAYLOAD_TYPE_E = 95;
pub const PAYLOAD_TYPE_E_PT_H264: PAYLOAD_TYPE_E = 96;
pub const PAYLOAD_TYPE_E_PT_D_GSM_HR: PAYLOAD_TYPE_E = 200;
pub const PAYLOAD_TYPE_E_PT_D_GSM_EFR: PAYLOAD_TYPE_E = 201;
pub const PAYLOAD_TYPE_E_PT_D_L8: PAYLOAD_TYPE_E = 202;
pub const PAYLOAD_TYPE_E_PT_D_RED: PAYLOAD_TYPE_E = 203;
pub const PAYLOAD_TYPE_E_PT_D_VDVI: PAYLOAD_TYPE_E = 204;
pub const PAYLOAD_TYPE_E_PT_D_BT656: PAYLOAD_TYPE_E = 220;
pub const PAYLOAD_TYPE_E_PT_D_H263_1998: PAYLOAD_TYPE_E = 221;
pub const PAYLOAD_TYPE_E_PT_D_MP1S: PAYLOAD_TYPE_E = 222;
pub const PAYLOAD_TYPE_E_PT_D_MP2P: PAYLOAD_TYPE_E = 223;
pub const PAYLOAD_TYPE_E_PT_D_BMPEG: PAYLOAD_TYPE_E = 224;
pub const PAYLOAD_TYPE_E_PT_MP4VIDEO: PAYLOAD_TYPE_E = 230;
pub const PAYLOAD_TYPE_E_PT_MP4AUDIO: PAYLOAD_TYPE_E = 237;
pub const PAYLOAD_TYPE_E_PT_VC1: PAYLOAD_TYPE_E = 238;
pub const PAYLOAD_TYPE_E_PT_JVC_ASF: PAYLOAD_TYPE_E = 255;
pub const PAYLOAD_TYPE_E_PT_D_AVI: PAYLOAD_TYPE_E = 256;
pub const PAYLOAD_TYPE_E_PT_DIVX3: PAYLOAD_TYPE_E = 257;
pub const PAYLOAD_TYPE_E_PT_AVS: PAYLOAD_TYPE_E = 258;
pub const PAYLOAD_TYPE_E_PT_REAL8: PAYLOAD_TYPE_E = 259;
pub const PAYLOAD_TYPE_E_PT_REAL9: PAYLOAD_TYPE_E = 260;
pub const PAYLOAD_TYPE_E_PT_VP6: PAYLOAD_TYPE_E = 261;
pub const PAYLOAD_TYPE_E_PT_VP6F: PAYLOAD_TYPE_E = 262;
pub const PAYLOAD_TYPE_E_PT_VP6A: PAYLOAD_TYPE_E = 263;
pub const PAYLOAD_TYPE_E_PT_SORENSON: PAYLOAD_TYPE_E = 264;
pub const PAYLOAD_TYPE_E_PT_H265: PAYLOAD_TYPE_E = 265;
pub const PAYLOAD_TYPE_E_PT_VP8: PAYLOAD_TYPE_E = 266;
pub const PAYLOAD_TYPE_E_PT_MVC: PAYLOAD_TYPE_E = 267;
pub const PAYLOAD_TYPE_E_PT_PNG: PAYLOAD_TYPE_E = 268;
pub const PAYLOAD_TYPE_E_PT_AMR: PAYLOAD_TYPE_E = 1001;
pub const PAYLOAD_TYPE_E_PT_MJPEG: PAYLOAD_TYPE_E = 1002;
pub const PAYLOAD_TYPE_E_PT_BUTT: PAYLOAD_TYPE_E = 1003;
pub type PAYLOAD_TYPE_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_VERSION_S {
    pub version: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_VERSION_S"][::std::mem::size_of::<_MMF_VERSION_S>() - 128usize];
    ["Alignment of _MMF_VERSION_S"][::std::mem::align_of::<_MMF_VERSION_S>() - 1usize];
    ["Offset of field: _MMF_VERSION_S::version"]
        [::std::mem::offset_of!(_MMF_VERSION_S, version) - 0usize];
};
pub type MMF_VERSION_S = _MMF_VERSION_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LOG_LEVEL_CONF_S {
    pub enModId: MOD_ID_E,
    pub s32Level: CVI_S32,
    pub cModName: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LOG_LEVEL_CONF_S"][::std::mem::size_of::<_LOG_LEVEL_CONF_S>() - 24usize];
    ["Alignment of _LOG_LEVEL_CONF_S"][::std::mem::align_of::<_LOG_LEVEL_CONF_S>() - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::enModId"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, enModId) - 0usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::s32Level"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, s32Level) - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::cModName"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, cModName) - 8usize];
};
pub type LOG_LEVEL_CONF_S = _LOG_LEVEL_CONF_S;
extern "C" {
    pub static mut log_levels: *mut CVI_S32;
}
extern "C" {
    pub static mut log_name: [*const CVI_CHAR; 8usize];
}
extern "C" {
    pub static MOD_STRING: [*const ::std::os::raw::c_char; 34usize];
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timezone"][::std::mem::size_of::<timezone>() - 8usize];
    ["Alignment of timezone"][::std::mem::align_of::<timezone>() - 4usize];
    ["Offset of field: timezone::tz_minuteswest"]
        [::std::mem::offset_of!(timezone, tz_minuteswest) - 0usize];
    ["Offset of field: timezone::tz_dsttime"]
        [::std::mem::offset_of!(timezone, tz_dsttime) - 4usize];
};
extern "C" {
    pub fn gettimeofday(
        __tv: *mut timeval,
        __tz: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerval"][::std::mem::size_of::<itimerval>() - 32usize];
    ["Alignment of itimerval"][::std::mem::align_of::<itimerval>() - 8usize];
    ["Offset of field: itimerval::it_interval"]
        [::std::mem::offset_of!(itimerval, it_interval) - 0usize];
    ["Offset of field: itimerval::it_value"][::std::mem::offset_of!(itimerval, it_value) - 16usize];
};
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub const _OPERATION_MODE_E_OPERATION_MODE_AUTO: _OPERATION_MODE_E = 0;
pub const _OPERATION_MODE_E_OPERATION_MODE_MANUAL: _OPERATION_MODE_E = 1;
pub const _OPERATION_MODE_E_OPERATION_MODE_BUTT: _OPERATION_MODE_E = 2;
pub type _OPERATION_MODE_E = ::std::os::raw::c_uint;
pub use self::_OPERATION_MODE_E as OPERATION_MODE_E;
pub const _ROTATION_E_ROTATION_0: _ROTATION_E = 0;
pub const _ROTATION_E_ROTATION_90: _ROTATION_E = 1;
pub const _ROTATION_E_ROTATION_180: _ROTATION_E = 2;
pub const _ROTATION_E_ROTATION_270: _ROTATION_E = 3;
pub const _ROTATION_E_ROTATION_XY_FLIP: _ROTATION_E = 4;
pub const _ROTATION_E_ROTATION_MAX: _ROTATION_E = 5;
pub type _ROTATION_E = ::std::os::raw::c_uint;
pub use self::_ROTATION_E as ROTATION_E;
pub const _VB_SOURCE_E_VB_SOURCE_COMMON: _VB_SOURCE_E = 0;
pub const _VB_SOURCE_E_VB_SOURCE_MODULE: _VB_SOURCE_E = 1;
pub const _VB_SOURCE_E_VB_SOURCE_PRIVATE: _VB_SOURCE_E = 2;
pub const _VB_SOURCE_E_VB_SOURCE_USER: _VB_SOURCE_E = 3;
pub const _VB_SOURCE_E_VB_SOURCE_BUTT: _VB_SOURCE_E = 4;
pub type _VB_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VB_SOURCE_E as VB_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BORDER_S {
    pub u32TopWidth: CVI_U32,
    pub u32BottomWidth: CVI_U32,
    pub u32LeftWidth: CVI_U32,
    pub u32RightWidth: CVI_U32,
    pub u32Color: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BORDER_S"][::std::mem::size_of::<_BORDER_S>() - 20usize];
    ["Alignment of _BORDER_S"][::std::mem::align_of::<_BORDER_S>() - 4usize];
    ["Offset of field: _BORDER_S::u32TopWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32TopWidth) - 0usize];
    ["Offset of field: _BORDER_S::u32BottomWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32BottomWidth) - 4usize];
    ["Offset of field: _BORDER_S::u32LeftWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32LeftWidth) - 8usize];
    ["Offset of field: _BORDER_S::u32RightWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32RightWidth) - 12usize];
    ["Offset of field: _BORDER_S::u32Color"][::std::mem::offset_of!(_BORDER_S, u32Color) - 16usize];
};
pub type BORDER_S = _BORDER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINT_S"][::std::mem::size_of::<_POINT_S>() - 8usize];
    ["Alignment of _POINT_S"][::std::mem::align_of::<_POINT_S>() - 4usize];
    ["Offset of field: _POINT_S::s32X"][::std::mem::offset_of!(_POINT_S, s32X) - 0usize];
    ["Offset of field: _POINT_S::s32Y"][::std::mem::offset_of!(_POINT_S, s32Y) - 4usize];
};
pub type POINT_S = _POINT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SIZE_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SIZE_S"][::std::mem::size_of::<_SIZE_S>() - 8usize];
    ["Alignment of _SIZE_S"][::std::mem::align_of::<_SIZE_S>() - 4usize];
    ["Offset of field: _SIZE_S::u32Width"][::std::mem::offset_of!(_SIZE_S, u32Width) - 0usize];
    ["Offset of field: _SIZE_S::u32Height"][::std::mem::offset_of!(_SIZE_S, u32Height) - 4usize];
};
pub type SIZE_S = _SIZE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RECT_S"][::std::mem::size_of::<_RECT_S>() - 16usize];
    ["Alignment of _RECT_S"][::std::mem::align_of::<_RECT_S>() - 4usize];
    ["Offset of field: _RECT_S::s32X"][::std::mem::offset_of!(_RECT_S, s32X) - 0usize];
    ["Offset of field: _RECT_S::s32Y"][::std::mem::offset_of!(_RECT_S, s32Y) - 4usize];
    ["Offset of field: _RECT_S::u32Width"][::std::mem::offset_of!(_RECT_S, u32Width) - 8usize];
    ["Offset of field: _RECT_S::u32Height"][::std::mem::offset_of!(_RECT_S, u32Height) - 12usize];
};
pub type RECT_S = _RECT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_REGION_INFO_S {
    pub u32RegionNum: CVI_U32,
    pub pstRegion: *mut RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_REGION_INFO_S"][::std::mem::size_of::<_VIDEO_REGION_INFO_S>() - 16usize];
    ["Alignment of _VIDEO_REGION_INFO_S"][::std::mem::align_of::<_VIDEO_REGION_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::u32RegionNum"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, u32RegionNum) - 0usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::pstRegion"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, pstRegion) - 8usize];
};
pub type VIDEO_REGION_INFO_S = _VIDEO_REGION_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CROP_INFO_S"][::std::mem::size_of::<_CROP_INFO_S>() - 20usize];
    ["Alignment of _CROP_INFO_S"][::std::mem::align_of::<_CROP_INFO_S>() - 4usize];
    ["Offset of field: _CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _CROP_INFO_S::stRect"]
        [::std::mem::offset_of!(_CROP_INFO_S, stRect) - 4usize];
};
pub type CROP_INFO_S = _CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAME_RATE_CTRL_S {
    pub s32SrcFrameRate: CVI_S32,
    pub s32DstFrameRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FRAME_RATE_CTRL_S"][::std::mem::size_of::<_FRAME_RATE_CTRL_S>() - 8usize];
    ["Alignment of _FRAME_RATE_CTRL_S"][::std::mem::align_of::<_FRAME_RATE_CTRL_S>() - 4usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32SrcFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32SrcFrameRate) - 0usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32DstFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32DstFrameRate) - 4usize];
};
pub type FRAME_RATE_CTRL_S = _FRAME_RATE_CTRL_S;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_NONE: _ASPECT_RATIO_E = 0;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_AUTO: _ASPECT_RATIO_E = 1;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MANUAL: _ASPECT_RATIO_E = 2;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MAX: _ASPECT_RATIO_E = 3;
pub type _ASPECT_RATIO_E = ::std::os::raw::c_uint;
pub use self::_ASPECT_RATIO_E as ASPECT_RATIO_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASPECT_RATIO_S {
    pub enMode: ASPECT_RATIO_E,
    pub bEnableBgColor: CVI_BOOL,
    pub u32BgColor: CVI_U32,
    pub stVideoRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ASPECT_RATIO_S"][::std::mem::size_of::<_ASPECT_RATIO_S>() - 28usize];
    ["Alignment of _ASPECT_RATIO_S"][::std::mem::align_of::<_ASPECT_RATIO_S>() - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::enMode"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, enMode) - 0usize];
    ["Offset of field: _ASPECT_RATIO_S::bEnableBgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, bEnableBgColor) - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::u32BgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, u32BgColor) - 8usize];
    ["Offset of field: _ASPECT_RATIO_S::stVideoRect"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, stVideoRect) - 12usize];
};
pub type ASPECT_RATIO_S = _ASPECT_RATIO_S;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888: _PIXEL_FORMAT_E = 0;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888: _PIXEL_FORMAT_E = 1;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888_PLANAR: _PIXEL_FORMAT_E = 2;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888_PLANAR: _PIXEL_FORMAT_E = 3;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_1555: _PIXEL_FORMAT_E = 4;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_4444: _PIXEL_FORMAT_E = 5;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_8888: _PIXEL_FORMAT_E = 6;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_8BPP: _PIXEL_FORMAT_E = 7;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_10BPP: _PIXEL_FORMAT_E = 8;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_12BPP: _PIXEL_FORMAT_E = 9;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_14BPP: _PIXEL_FORMAT_E = 10;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_16BPP: _PIXEL_FORMAT_E = 11;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_422: _PIXEL_FORMAT_E = 12;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_420: _PIXEL_FORMAT_E = 13;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_444: _PIXEL_FORMAT_E = 14;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_400: _PIXEL_FORMAT_E = 15;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888: _PIXEL_FORMAT_E = 16;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888_PLANAR: _PIXEL_FORMAT_E = 17;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV12: _PIXEL_FORMAT_E = 18;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV21: _PIXEL_FORMAT_E = 19;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV16: _PIXEL_FORMAT_E = 20;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV61: _PIXEL_FORMAT_E = 21;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUYV: _PIXEL_FORMAT_E = 22;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UYVY: _PIXEL_FORMAT_E = 23;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YVYU: _PIXEL_FORMAT_E = 24;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_VYUY: _PIXEL_FORMAT_E = 25;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C1: _PIXEL_FORMAT_E = 32;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C3_PLANAR: _PIXEL_FORMAT_E = 33;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C1: _PIXEL_FORMAT_E = 34;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C3_PLANAR: _PIXEL_FORMAT_E = 35;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C1: _PIXEL_FORMAT_E = 36;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C3_PLANAR: _PIXEL_FORMAT_E = 37;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C1: _PIXEL_FORMAT_E = 38;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C3_PLANAR: _PIXEL_FORMAT_E = 39;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C1: _PIXEL_FORMAT_E = 40;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C3_PLANAR: _PIXEL_FORMAT_E = 41;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C1: _PIXEL_FORMAT_E = 42;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C3_PLANAR: _PIXEL_FORMAT_E = 43;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C1: _PIXEL_FORMAT_E = 44;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C3_PLANAR: _PIXEL_FORMAT_E = 45;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C1: _PIXEL_FORMAT_E = 46;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C3_PLANAR: _PIXEL_FORMAT_E = 47;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_8BIT_MODE: _PIXEL_FORMAT_E = 48;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_MAX: _PIXEL_FORMAT_E = 49;
pub type _PIXEL_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_PIXEL_FORMAT_E as PIXEL_FORMAT_E;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR: _VIDEO_FORMAT_E = 0;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_MAX: _VIDEO_FORMAT_E = 1;
pub type _VIDEO_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_FORMAT_E as VIDEO_FORMAT_E;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_NONE: _COMPRESS_MODE_E = 0;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_TILE: _COMPRESS_MODE_E = 1;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_LINE: _COMPRESS_MODE_E = 2;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_FRAME: _COMPRESS_MODE_E = 3;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_BUTT: _COMPRESS_MODE_E = 4;
pub type _COMPRESS_MODE_E = ::std::os::raw::c_uint;
pub use self::_COMPRESS_MODE_E as COMPRESS_MODE_E;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_BG: _BAYER_FORMAT_E = 0;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GB: _BAYER_FORMAT_E = 1;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GR: _BAYER_FORMAT_E = 2;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_RG: _BAYER_FORMAT_E = 3;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_MAX: _BAYER_FORMAT_E = 4;
pub type _BAYER_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_BAYER_FORMAT_E as BAYER_FORMAT_E;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PREVIEW: _VIDEO_DISPLAY_MODE_E = 0;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PLAYBACK: _VIDEO_DISPLAY_MODE_E = 1;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_MAX: _VIDEO_DISPLAY_MODE_E = 2;
pub type _VIDEO_DISPLAY_MODE_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_DISPLAY_MODE_E as VIDEO_DISPLAY_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FRAME_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub au32Ratio: [CVI_U32; 3usize],
    pub u32IspNrStrength: CVI_U32,
    pub u32FNumber: CVI_U32,
    pub u32SensorID: CVI_U32,
    pub u32SensorMode: CVI_U32,
    pub u32HmaxTimes: CVI_U32,
    pub u32VcNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FRAME_INFO_S"][::std::mem::size_of::<_ISP_FRAME_INFO_S>() - 56usize];
    ["Alignment of _ISP_FRAME_INFO_S"][::std::mem::align_of::<_ISP_FRAME_INFO_S>() - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ExposureTime) - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspDgain) - 8usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Again"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Again) - 12usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Dgain) - 16usize];
    ["Offset of field: _ISP_FRAME_INFO_S::au32Ratio"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, au32Ratio) - 20usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspNrStrength"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspNrStrength) - 32usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32FNumber"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32FNumber) - 36usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorID"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorID) - 40usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorMode"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorMode) - 44usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32HmaxTimes) - 48usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32VcNum"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32VcNum) - 52usize];
};
pub type ISP_FRAME_INFO_S = _ISP_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_HDR_INFO_S {
    pub u32ColorTemp: CVI_U32,
    pub au16CCM: [CVI_U16; 9usize],
    pub u8Saturation: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_HDR_INFO_S"][::std::mem::size_of::<_ISP_HDR_INFO_S>() - 24usize];
    ["Alignment of _ISP_HDR_INFO_S"][::std::mem::align_of::<_ISP_HDR_INFO_S>() - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u32ColorTemp"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u32ColorTemp) - 0usize];
    ["Offset of field: _ISP_HDR_INFO_S::au16CCM"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, au16CCM) - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u8Saturation) - 22usize];
};
pub type ISP_HDR_INFO_S = _ISP_HDR_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ATTACH_INFO_S {
    pub stIspHdr: ISP_HDR_INFO_S,
    pub u32ISO: CVI_U32,
    pub u8SnsWDRMode: *mut CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ATTACH_INFO_S"][::std::mem::size_of::<_ISP_ATTACH_INFO_S>() - 40usize];
    ["Alignment of _ISP_ATTACH_INFO_S"][::std::mem::align_of::<_ISP_ATTACH_INFO_S>() - 8usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::stIspHdr"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, stIspHdr) - 0usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u32ISO) - 24usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u8SnsWDRMode"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u8SnsWDRMode) - 32usize];
};
pub type ISP_ATTACH_INFO_S = _ISP_ATTACH_INFO_S;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_FLASH: _FRAME_FLAG_E = 1;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_CUR: _FRAME_FLAG_E = 2;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_REF: _FRAME_FLAG_E = 4;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_END: _FRAME_FLAG_E = -2147483648;
pub const _FRAME_FLAG_E_FRAME_FLAG_MAX: _FRAME_FLAG_E = -2147483647;
pub type _FRAME_FLAG_E = ::std::os::raw::c_int;
pub use self::_FRAME_FLAG_E as FRAME_FLAG_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CONFIG_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub au32WhiteBalanceGain: [CVI_U32; 4usize],
    pub u32ColorTemperature: CVI_U32,
    pub au16CapCCM: [CVI_U16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CONFIG_INFO_S"][::std::mem::size_of::<_ISP_CONFIG_INFO_S>() - 52usize];
    ["Alignment of _ISP_CONFIG_INFO_S"][::std::mem::align_of::<_ISP_CONFIG_INFO_S>() - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32IspDgain) - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ExposureTime) - 8usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au32WhiteBalanceGain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au32WhiteBalanceGain) - 12usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ColorTemperature"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ColorTemperature) - 28usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au16CapCCM"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au16CapCCM) - 32usize];
};
pub type ISP_CONFIG_INFO_S = _ISP_CONFIG_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_SUPPLEMENT_S {
    pub u64JpegDCFPhyAddr: CVI_U64,
    pub u64IspInfoPhyAddr: CVI_U64,
    pub u64LowDelayPhyAddr: CVI_U64,
    pub u64FrameDNGPhyAddr: CVI_U64,
    pub pJpegDCFVirAddr: *mut CVI_VOID,
    pub pIspInfoVirAddr: *mut CVI_VOID,
    pub pLowDelayVirAddr: *mut CVI_VOID,
    pub pFrameDNGVirAddr: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_SUPPLEMENT_S"][::std::mem::size_of::<_VIDEO_SUPPLEMENT_S>() - 64usize];
    ["Alignment of _VIDEO_SUPPLEMENT_S"][::std::mem::align_of::<_VIDEO_SUPPLEMENT_S>() - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64JpegDCFPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64JpegDCFPhyAddr) - 0usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64IspInfoPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64IspInfoPhyAddr) - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64LowDelayPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64LowDelayPhyAddr) - 16usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64FrameDNGPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64FrameDNGPhyAddr) - 24usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pJpegDCFVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pJpegDCFVirAddr) - 32usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pIspInfoVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pIspInfoVirAddr) - 40usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pLowDelayVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pLowDelayVirAddr) - 48usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pFrameDNGVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pFrameDNGVirAddr) - 56usize];
};
pub type VIDEO_SUPPLEMENT_S = _VIDEO_SUPPLEMENT_S;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT601: _COLOR_GAMUT_E = 0;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT709: _COLOR_GAMUT_E = 1;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT2020: _COLOR_GAMUT_E = 2;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_USER: _COLOR_GAMUT_E = 3;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_MAX: _COLOR_GAMUT_E = 4;
pub type _COLOR_GAMUT_E = ::std::os::raw::c_uint;
pub use self::_COLOR_GAMUT_E as COLOR_GAMUT_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLORGAMMUT_INFO_S {
    pub enColorGamut: COLOR_GAMUT_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLORGAMMUT_INFO_S"][::std::mem::size_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Alignment of _ISP_COLORGAMMUT_INFO_S"]
        [::std::mem::align_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Offset of field: _ISP_COLORGAMMUT_INFO_S::enColorGamut"]
        [::std::mem::offset_of!(_ISP_COLORGAMMUT_INFO_S, enColorGamut) - 0usize];
};
pub type ISP_COLORGAMMUT_INFO_S = _ISP_COLORGAMMUT_INFO_S;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR8: _DYNAMIC_RANGE_E = 0;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR10: _DYNAMIC_RANGE_E = 1;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HDR10: _DYNAMIC_RANGE_E = 2;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HLG: _DYNAMIC_RANGE_E = 3;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SLF: _DYNAMIC_RANGE_E = 4;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_XDR: _DYNAMIC_RANGE_E = 5;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_MAX: _DYNAMIC_RANGE_E = 6;
pub type _DYNAMIC_RANGE_E = ::std::os::raw::c_uint;
pub use self::_DYNAMIC_RANGE_E as DYNAMIC_RANGE_E;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_8: _DATA_BITWIDTH_E = 0;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_10: _DATA_BITWIDTH_E = 1;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_12: _DATA_BITWIDTH_E = 2;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_14: _DATA_BITWIDTH_E = 3;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_16: _DATA_BITWIDTH_E = 4;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_MAX: _DATA_BITWIDTH_E = 5;
pub type _DATA_BITWIDTH_E = ::std::os::raw::c_uint;
pub use self::_DATA_BITWIDTH_E as DATA_BITWIDTH_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enColorGamut: COLOR_GAMUT_E,
    pub u32Stride: [CVI_U32; 3usize],
    pub u64PhyAddr: [CVI_U64; 3usize],
    pub pu8VirAddr: [*mut CVI_U8; 3usize],
    pub u32Length: [CVI_U32; 3usize],
    pub s16OffsetTop: CVI_S16,
    pub s16OffsetBottom: CVI_S16,
    pub s16OffsetLeft: CVI_S16,
    pub s16OffsetRight: CVI_S16,
    pub u32TimeRef: CVI_U32,
    pub u64PTS: CVI_U64,
    pub pPrivateData: *mut ::std::os::raw::c_void,
    pub u32FrameFlag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_S"][::std::mem::size_of::<_VIDEO_FRAME_S>() - 144usize];
    ["Alignment of _VIDEO_FRAME_S"][::std::mem::align_of::<_VIDEO_FRAME_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Width"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Width) - 0usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Height"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Height) - 4usize];
    ["Offset of field: _VIDEO_FRAME_S::enPixelFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enPixelFormat) - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::enBayerFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enBayerFormat) - 12usize];
    ["Offset of field: _VIDEO_FRAME_S::enVideoFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enVideoFormat) - 16usize];
    ["Offset of field: _VIDEO_FRAME_S::enCompressMode"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enCompressMode) - 20usize];
    ["Offset of field: _VIDEO_FRAME_S::enDynamicRange"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enDynamicRange) - 24usize];
    ["Offset of field: _VIDEO_FRAME_S::enColorGamut"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enColorGamut) - 28usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Stride"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Stride) - 32usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PhyAddr) - 48usize];
    ["Offset of field: _VIDEO_FRAME_S::pu8VirAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pu8VirAddr) - 72usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Length"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Length) - 96usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetTop"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetTop) - 108usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetBottom"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetBottom) - 110usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetLeft"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetLeft) - 112usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetRight"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetRight) - 114usize];
    ["Offset of field: _VIDEO_FRAME_S::u32TimeRef"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32TimeRef) - 116usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PTS"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PTS) - 120usize];
    ["Offset of field: _VIDEO_FRAME_S::pPrivateData"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pPrivateData) - 128usize];
    ["Offset of field: _VIDEO_FRAME_S::u32FrameFlag"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32FrameFlag) - 136usize];
};
pub type VIDEO_FRAME_S = _VIDEO_FRAME_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_INFO_S {
    pub stVFrame: VIDEO_FRAME_S,
    pub u32PoolId: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_INFO_S"][::std::mem::size_of::<_VIDEO_FRAME_INFO_S>() - 152usize];
    ["Alignment of _VIDEO_FRAME_INFO_S"][::std::mem::align_of::<_VIDEO_FRAME_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::stVFrame"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, stVFrame) - 0usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::u32PoolId"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, u32PoolId) - 144usize];
};
pub type VIDEO_FRAME_INFO_S = _VIDEO_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CAL_CONFIG_S {
    pub u32VBSize: CVI_U32,
    pub u32MainStride: CVI_U32,
    pub u32CStride: CVI_U32,
    pub u32MainSize: CVI_U32,
    pub u32MainYSize: CVI_U32,
    pub u32MainCSize: CVI_U32,
    pub u16AddrAlign: CVI_U16,
    pub plane_num: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CAL_CONFIG_S"][::std::mem::size_of::<_VB_CAL_CONFIG_S>() - 28usize];
    ["Alignment of _VB_CAL_CONFIG_S"][::std::mem::align_of::<_VB_CAL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32VBSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32VBSize) - 0usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainStride) - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32CStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32CStride) - 8usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainSize) - 12usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainYSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainYSize) - 16usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainCSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainCSize) - 20usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u16AddrAlign"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u16AddrAlign) - 24usize];
    ["Offset of field: _VB_CAL_CONFIG_S::plane_num"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, plane_num) - 26usize];
};
pub type VB_CAL_CONFIG_S = _VB_CAL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub pData: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BITMAP_S"][::std::mem::size_of::<_BITMAP_S>() - 24usize];
    ["Alignment of _BITMAP_S"][::std::mem::align_of::<_BITMAP_S>() - 8usize];
    ["Offset of field: _BITMAP_S::enPixelFormat"]
        [::std::mem::offset_of!(_BITMAP_S, enPixelFormat) - 0usize];
    ["Offset of field: _BITMAP_S::u32Width"][::std::mem::offset_of!(_BITMAP_S, u32Width) - 4usize];
    ["Offset of field: _BITMAP_S::u32Height"]
        [::std::mem::offset_of!(_BITMAP_S, u32Height) - 8usize];
    ["Offset of field: _BITMAP_S::pData"][::std::mem::offset_of!(_BITMAP_S, pData) - 16usize];
};
pub type BITMAP_S = _BITMAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDC_ATTR_S {
    pub bAspect: CVI_BOOL,
    pub s32XRatio: CVI_S32,
    pub s32YRatio: CVI_S32,
    pub s32XYRatio: CVI_S32,
    pub s32CenterXOffset: CVI_S32,
    pub s32CenterYOffset: CVI_S32,
    pub s32DistortionRatio: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDC_ATTR_S"][::std::mem::size_of::<_LDC_ATTR_S>() - 28usize];
    ["Alignment of _LDC_ATTR_S"][::std::mem::align_of::<_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _LDC_ATTR_S::bAspect"]
        [::std::mem::offset_of!(_LDC_ATTR_S, bAspect) - 0usize];
    ["Offset of field: _LDC_ATTR_S::s32XRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XRatio) - 4usize];
    ["Offset of field: _LDC_ATTR_S::s32YRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32YRatio) - 8usize];
    ["Offset of field: _LDC_ATTR_S::s32XYRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XYRatio) - 12usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterXOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterXOffset) - 16usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterYOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterYOffset) - 20usize];
    ["Offset of field: _LDC_ATTR_S::s32DistortionRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32DistortionRatio) - 24usize];
};
pub type LDC_ATTR_S = _LDC_ATTR_S;
pub const _WDR_MODE_E_WDR_MODE_NONE: _WDR_MODE_E = 0;
pub const _WDR_MODE_E_WDR_MODE_BUILT_IN: _WDR_MODE_E = 1;
pub const _WDR_MODE_E_WDR_MODE_QUDRA: _WDR_MODE_E = 2;
pub const _WDR_MODE_E_WDR_MODE_2To1_LINE: _WDR_MODE_E = 3;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME: _WDR_MODE_E = 4;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME_FULL_RATE: _WDR_MODE_E = 5;
pub const _WDR_MODE_E_WDR_MODE_3To1_LINE: _WDR_MODE_E = 6;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME: _WDR_MODE_E = 7;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME_FULL_RATE: _WDR_MODE_E = 8;
pub const _WDR_MODE_E_WDR_MODE_4To1_LINE: _WDR_MODE_E = 9;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME: _WDR_MODE_E = 10;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME_FULL_RATE: _WDR_MODE_E = 11;
pub const _WDR_MODE_E_WDR_MODE_MAX: _WDR_MODE_E = 12;
pub type _WDR_MODE_E = ::std::os::raw::c_uint;
pub use self::_WDR_MODE_E as WDR_MODE_E;
pub const _PROC_AMP_E_PROC_AMP_BRIGHTNESS: _PROC_AMP_E = 0;
pub const _PROC_AMP_E_PROC_AMP_CONTRAST: _PROC_AMP_E = 1;
pub const _PROC_AMP_E_PROC_AMP_SATURATION: _PROC_AMP_E = 2;
pub const _PROC_AMP_E_PROC_AMP_HUE: _PROC_AMP_E = 3;
pub const _PROC_AMP_E_PROC_AMP_MAX: _PROC_AMP_E = 4;
pub type _PROC_AMP_E = ::std::os::raw::c_uint;
pub use self::_PROC_AMP_E as PROC_AMP_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROC_AMP_CTRL_S {
    pub minimum: CVI_S32,
    pub maximum: CVI_S32,
    pub step: CVI_S32,
    pub default_value: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROC_AMP_CTRL_S"][::std::mem::size_of::<_PROC_AMP_CTRL_S>() - 16usize];
    ["Alignment of _PROC_AMP_CTRL_S"][::std::mem::align_of::<_PROC_AMP_CTRL_S>() - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::minimum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, minimum) - 0usize];
    ["Offset of field: _PROC_AMP_CTRL_S::maximum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, maximum) - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::step"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, step) - 8usize];
    ["Offset of field: _PROC_AMP_CTRL_S::default_value"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, default_value) - 12usize];
};
pub type PROC_AMP_CTRL_S = _PROC_AMP_CTRL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VCODEC_PERF_FPS_S {
    pub u32InFPS: CVI_U32,
    pub u32OutFPS: CVI_U32,
    pub u64HwTime: CVI_U64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VCODEC_PERF_FPS_S"][::std::mem::size_of::<_VCODEC_PERF_FPS_S>() - 16usize];
    ["Alignment of _VCODEC_PERF_FPS_S"][::std::mem::align_of::<_VCODEC_PERF_FPS_S>() - 8usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32InFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32InFPS) - 0usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32OutFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32OutFPS) - 4usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u64HwTime"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u64HwTime) - 8usize];
};
pub type VCODEC_PERF_FPS_S = _VCODEC_PERF_FPS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_LOW_DELAY_INFO_S {
    pub bEnable: CVI_BOOL,
    pub u32LineCnt: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_LOW_DELAY_INFO_S"][::std::mem::size_of::<_VI_LOW_DELAY_INFO_S>() - 8usize];
    ["Alignment of _VI_LOW_DELAY_INFO_S"][::std::mem::align_of::<_VI_LOW_DELAY_INFO_S>() - 4usize];
    ["Offset of field: _VI_LOW_DELAY_INFO_S::bEnable"]
        [::std::mem::offset_of!(_VI_LOW_DELAY_INFO_S, bEnable) - 0usize];
    ["Offset of field: _VI_LOW_DELAY_INFO_S::u32LineCnt"]
        [::std::mem::offset_of!(_VI_LOW_DELAY_INFO_S, u32LineCnt) - 4usize];
};
pub type VI_LOW_DELAY_INFO_S = _VI_LOW_DELAY_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CMP_PARAM_S {
    pub au8CmpParam: [CVI_U8; 152usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CMP_PARAM_S"][::std::mem::size_of::<_VI_CMP_PARAM_S>() - 152usize];
    ["Alignment of _VI_CMP_PARAM_S"][::std::mem::align_of::<_VI_CMP_PARAM_S>() - 1usize];
    ["Offset of field: _VI_CMP_PARAM_S::au8CmpParam"]
        [::std::mem::offset_of!(_VI_CMP_PARAM_S, au8CmpParam) - 0usize];
};
pub type VI_CMP_PARAM_S = _VI_CMP_PARAM_S;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_PIC: _VI_USERPIC_MODE_E = 0;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_BGC: _VI_USERPIC_MODE_E = 1;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_BUTT: _VI_USERPIC_MODE_E = 2;
pub type _VI_USERPIC_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_USERPIC_MODE_E as VI_USERPIC_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_USERPIC_BGC_S {
    pub u32BgColor: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_BGC_S"][::std::mem::size_of::<_VI_USERPIC_BGC_S>() - 4usize];
    ["Alignment of _VI_USERPIC_BGC_S"][::std::mem::align_of::<_VI_USERPIC_BGC_S>() - 4usize];
    ["Offset of field: _VI_USERPIC_BGC_S::u32BgColor"]
        [::std::mem::offset_of!(_VI_USERPIC_BGC_S, u32BgColor) - 0usize];
};
pub type VI_USERPIC_BGC_S = _VI_USERPIC_BGC_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VI_USERPIC_ATTR_S {
    pub enUsrPicMode: VI_USERPIC_MODE_E,
    pub unUsrPic: _VI_USERPIC_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VI_USERPIC_ATTR_S__bindgen_ty_1 {
    pub stUsrPicFrm: VIDEO_FRAME_INFO_S,
    pub stUsrPicBg: VI_USERPIC_BGC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VI_USERPIC_ATTR_S__bindgen_ty_1>() - 152usize];
    ["Alignment of _VI_USERPIC_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VI_USERPIC_ATTR_S__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VI_USERPIC_ATTR_S__bindgen_ty_1::stUsrPicFrm"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S__bindgen_ty_1, stUsrPicFrm) - 0usize];
    ["Offset of field: _VI_USERPIC_ATTR_S__bindgen_ty_1::stUsrPicBg"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S__bindgen_ty_1, stUsrPicBg) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_ATTR_S"][::std::mem::size_of::<_VI_USERPIC_ATTR_S>() - 160usize];
    ["Alignment of _VI_USERPIC_ATTR_S"][::std::mem::align_of::<_VI_USERPIC_ATTR_S>() - 8usize];
    ["Offset of field: _VI_USERPIC_ATTR_S::enUsrPicMode"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S, enUsrPicMode) - 0usize];
    ["Offset of field: _VI_USERPIC_ATTR_S::unUsrPic"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S, unUsrPic) - 8usize];
};
pub type VI_USERPIC_ATTR_S = _VI_USERPIC_ATTR_S;
pub const _VI_INTF_MODE_E_VI_MODE_BT656: _VI_INTF_MODE_E = 0;
pub const _VI_INTF_MODE_E_VI_MODE_BT601: _VI_INTF_MODE_E = 1;
pub const _VI_INTF_MODE_E_VI_MODE_DIGITAL_CAMERA: _VI_INTF_MODE_E = 2;
pub const _VI_INTF_MODE_E_VI_MODE_BT1120_STANDARD: _VI_INTF_MODE_E = 3;
pub const _VI_INTF_MODE_E_VI_MODE_BT1120_INTERLEAVED: _VI_INTF_MODE_E = 4;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI: _VI_INTF_MODE_E = 5;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV420_NORMAL: _VI_INTF_MODE_E = 6;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV420_LEGACY: _VI_INTF_MODE_E = 7;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV422: _VI_INTF_MODE_E = 8;
pub const _VI_INTF_MODE_E_VI_MODE_LVDS: _VI_INTF_MODE_E = 9;
pub const _VI_INTF_MODE_E_VI_MODE_HISPI: _VI_INTF_MODE_E = 10;
pub const _VI_INTF_MODE_E_VI_MODE_SLVS: _VI_INTF_MODE_E = 11;
pub const _VI_INTF_MODE_E_VI_MODE_BUTT: _VI_INTF_MODE_E = 12;
pub type _VI_INTF_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_INTF_MODE_E as VI_INTF_MODE_E;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BT656: _VI_INPUT_MODE_E = 0;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BT601: _VI_INPUT_MODE_E = 1;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_DIGITAL_CAMERA: _VI_INPUT_MODE_E = 2;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_INTERLEAVED: _VI_INPUT_MODE_E = 3;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_MIPI: _VI_INPUT_MODE_E = 4;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_LVDS: _VI_INPUT_MODE_E = 5;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_HISPI: _VI_INPUT_MODE_E = 6;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_SLVS: _VI_INPUT_MODE_E = 7;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BUTT: _VI_INPUT_MODE_E = 8;
pub type _VI_INPUT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_INPUT_MODE_E as VI_INPUT_MODE_E;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_1Multiplex: _VI_WORK_MODE_E = 0;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_2Multiplex: _VI_WORK_MODE_E = 1;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_3Multiplex: _VI_WORK_MODE_E = 2;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_4Multiplex: _VI_WORK_MODE_E = 3;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_BUTT: _VI_WORK_MODE_E = 4;
pub type _VI_WORK_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_WORK_MODE_E as VI_WORK_MODE_E;
pub const _VI_SCAN_MODE_E_VI_SCAN_INTERLACED: _VI_SCAN_MODE_E = 0;
pub const _VI_SCAN_MODE_E_VI_SCAN_PROGRESSIVE: _VI_SCAN_MODE_E = 1;
pub const _VI_SCAN_MODE_E_VI_SCAN_BUTT: _VI_SCAN_MODE_E = 2;
pub type _VI_SCAN_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_SCAN_MODE_E as VI_SCAN_MODE_E;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VUVU: _VI_YUV_DATA_SEQ_E = 0;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UVUV: _VI_YUV_DATA_SEQ_E = 1;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UYVY: _VI_YUV_DATA_SEQ_E = 2;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VYUY: _VI_YUV_DATA_SEQ_E = 3;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YUYV: _VI_YUV_DATA_SEQ_E = 4;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YVYU: _VI_YUV_DATA_SEQ_E = 5;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_BUTT: _VI_YUV_DATA_SEQ_E = 6;
pub type _VI_YUV_DATA_SEQ_E = ::std::os::raw::c_uint;
pub use self::_VI_YUV_DATA_SEQ_E as VI_YUV_DATA_SEQ_E;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_SINGLE_UP: _VI_CLK_EDGE_E = 0;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_SINGLE_DOWN: _VI_CLK_EDGE_E = 1;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_BUTT: _VI_CLK_EDGE_E = 2;
pub type _VI_CLK_EDGE_E = ::std::os::raw::c_uint;
pub use self::_VI_CLK_EDGE_E as VI_CLK_EDGE_E;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_SINGLE: _VI_COMPONENT_MODE_E = 0;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_DOUBLE: _VI_COMPONENT_MODE_E = 1;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_BUTT: _VI_COMPONENT_MODE_E = 2;
pub type _VI_COMPONENT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_COMPONENT_MODE_E as VI_COMPONENT_MODE_E;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_COMPOSITE: _VI_COMBINE_MODE_E = 0;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_SEPARATE: _VI_COMBINE_MODE_E = 1;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_BUTT: _VI_COMBINE_MODE_E = 2;
pub type _VI_COMBINE_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_COMBINE_MODE_E as VI_COMBINE_MODE_E;
pub const _VI_VSYNC_E_VI_VSYNC_FIELD: _VI_VSYNC_E = 0;
pub const _VI_VSYNC_E_VI_VSYNC_PULSE: _VI_VSYNC_E = 1;
pub const _VI_VSYNC_E_VI_VSYNC_BUTT: _VI_VSYNC_E = 2;
pub type _VI_VSYNC_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_E as VI_VSYNC_E;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_HIGH: _VI_VSYNC_NEG_E = 0;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_LOW: _VI_VSYNC_NEG_E = 1;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_BUTT: _VI_VSYNC_NEG_E = 2;
pub type _VI_VSYNC_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_NEG_E as VI_VSYNC_NEG_E;
pub const _VI_HSYNC_E_VI_HSYNC_VALID_SINGNAL: _VI_HSYNC_E = 0;
pub const _VI_HSYNC_E_VI_HSYNC_PULSE: _VI_HSYNC_E = 1;
pub const _VI_HSYNC_E_VI_HSYNC_BUTT: _VI_HSYNC_E = 2;
pub type _VI_HSYNC_E = ::std::os::raw::c_uint;
pub use self::_VI_HSYNC_E as VI_HSYNC_E;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_HIGH: _VI_HSYNC_NEG_E = 0;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_LOW: _VI_HSYNC_NEG_E = 1;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_BUTT: _VI_HSYNC_NEG_E = 2;
pub type _VI_HSYNC_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_HSYNC_NEG_E as VI_HSYNC_NEG_E;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_NORM_PULSE: _VI_VSYNC_VALID_E = 0;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_VALID_SIGNAL: _VI_VSYNC_VALID_E = 1;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_VALID_BUTT: _VI_VSYNC_VALID_E = 2;
pub type _VI_VSYNC_VALID_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_VALID_E as VI_VSYNC_VALID_E;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_HIGH: _VI_VSYNC_VALID_NEG_E = 0;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_LOW: _VI_VSYNC_VALID_NEG_E = 1;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_BUTT: _VI_VSYNC_VALID_NEG_E = 2;
pub type _VI_VSYNC_VALID_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_VALID_NEG_E as VI_VSYNC_VALID_NEG_E;
pub const _VI_STATE_VI_RUNNING: _VI_STATE = 0;
pub const _VI_STATE_VI_SUSPEND: _VI_STATE = 1;
pub const _VI_STATE_VI_MAX: _VI_STATE = 2;
pub type _VI_STATE = ::std::os::raw::c_uint;
pub use self::_VI_STATE as VI_STATE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_TIMING_BLANK_S {
    pub u32HsyncHfb: CVI_U32,
    pub u32HsyncAct: CVI_U32,
    pub u32HsyncHbb: CVI_U32,
    pub u32VsyncVfb: CVI_U32,
    pub u32VsyncVact: CVI_U32,
    pub u32VsyncVbb: CVI_U32,
    pub u32VsyncVbfb: CVI_U32,
    pub u32VsyncVbact: CVI_U32,
    pub u32VsyncVbbb: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_TIMING_BLANK_S"][::std::mem::size_of::<_VI_TIMING_BLANK_S>() - 36usize];
    ["Alignment of _VI_TIMING_BLANK_S"][::std::mem::align_of::<_VI_TIMING_BLANK_S>() - 4usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncHfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncHfb) - 0usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncAct"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncAct) - 4usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncHbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncHbb) - 8usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVfb) - 12usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVact"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVact) - 16usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbb) - 20usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbfb) - 24usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbact"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbact) - 28usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbbb) - 32usize];
};
pub type VI_TIMING_BLANK_S = _VI_TIMING_BLANK_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_SYNC_CFG_S {
    pub enVsync: VI_VSYNC_E,
    pub enVsyncNeg: VI_VSYNC_NEG_E,
    pub enHsync: VI_HSYNC_E,
    pub enHsyncNeg: VI_HSYNC_NEG_E,
    pub enVsyncValid: VI_VSYNC_VALID_E,
    pub enVsyncValidNeg: VI_VSYNC_VALID_NEG_E,
    pub stTimingBlank: VI_TIMING_BLANK_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_SYNC_CFG_S"][::std::mem::size_of::<_VI_SYNC_CFG_S>() - 60usize];
    ["Alignment of _VI_SYNC_CFG_S"][::std::mem::align_of::<_VI_SYNC_CFG_S>() - 4usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsync"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsync) - 0usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncNeg) - 4usize];
    ["Offset of field: _VI_SYNC_CFG_S::enHsync"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enHsync) - 8usize];
    ["Offset of field: _VI_SYNC_CFG_S::enHsyncNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enHsyncNeg) - 12usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncValid"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncValid) - 16usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncValidNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncValidNeg) - 20usize];
    ["Offset of field: _VI_SYNC_CFG_S::stTimingBlank"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, stTimingBlank) - 24usize];
};
pub type VI_SYNC_CFG_S = _VI_SYNC_CFG_S;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_1: _VI_BT656_FIXCODE_E = 0;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_0: _VI_BT656_FIXCODE_E = 1;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_BUTT: _VI_BT656_FIXCODE_E = 2;
pub type _VI_BT656_FIXCODE_E = ::std::os::raw::c_uint;
pub use self::_VI_BT656_FIXCODE_E as VI_BT656_FIXCODE_E;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_STD: _VI_BT656_FIELD_POLAR_E = 0;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_NSTD: _VI_BT656_FIELD_POLAR_E = 1;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_BUTT: _VI_BT656_FIELD_POLAR_E = 2;
pub type _VI_BT656_FIELD_POLAR_E = ::std::os::raw::c_uint;
pub use self::_VI_BT656_FIELD_POLAR_E as VI_BT656_FIELD_POLAR_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_BT656_SYNC_CFG_S {
    pub enFixCode: VI_BT656_FIXCODE_E,
    pub enFieldPolar: VI_BT656_FIELD_POLAR_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_BT656_SYNC_CFG_S"][::std::mem::size_of::<_VI_BT656_SYNC_CFG_S>() - 8usize];
    ["Alignment of _VI_BT656_SYNC_CFG_S"][::std::mem::align_of::<_VI_BT656_SYNC_CFG_S>() - 4usize];
    ["Offset of field: _VI_BT656_SYNC_CFG_S::enFixCode"]
        [::std::mem::offset_of!(_VI_BT656_SYNC_CFG_S, enFixCode) - 0usize];
    ["Offset of field: _VI_BT656_SYNC_CFG_S::enFieldPolar"]
        [::std::mem::offset_of!(_VI_BT656_SYNC_CFG_S, enFieldPolar) - 4usize];
};
pub type VI_BT656_SYNC_CFG_S = _VI_BT656_SYNC_CFG_S;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_YUV: _VI_DATA_TYPE_E = 0;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_RGB: _VI_DATA_TYPE_E = 1;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_YUV_EARLY: _VI_DATA_TYPE_E = 2;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_BUTT: _VI_DATA_TYPE_E = 3;
pub type _VI_DATA_TYPE_E = ::std::os::raw::c_uint;
pub use self::_VI_DATA_TYPE_E as VI_DATA_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_WDR_ATTR_S {
    pub enWDRMode: WDR_MODE_E,
    pub u32CacheLine: CVI_U32,
    pub bSyntheticWDR: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_WDR_ATTR_S"][::std::mem::size_of::<_VI_WDR_ATTR_S>() - 12usize];
    ["Alignment of _VI_WDR_ATTR_S"][::std::mem::align_of::<_VI_WDR_ATTR_S>() - 4usize];
    ["Offset of field: _VI_WDR_ATTR_S::enWDRMode"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, enWDRMode) - 0usize];
    ["Offset of field: _VI_WDR_ATTR_S::u32CacheLine"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, u32CacheLine) - 4usize];
    ["Offset of field: _VI_WDR_ATTR_S::bSyntheticWDR"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, bSyntheticWDR) - 8usize];
};
pub type VI_WDR_ATTR_S = _VI_WDR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_ATTR_EX_S {
    pub enInputMode: VI_INPUT_MODE_E,
    pub enWorkMode: VI_WORK_MODE_E,
    pub enCombineMode: VI_COMBINE_MODE_E,
    pub enComponentMode: VI_COMPONENT_MODE_E,
    pub enClkEdge: VI_CLK_EDGE_E,
    pub au32ComponentMask: [CVI_U32; 2usize],
    pub enScanMode: VI_SCAN_MODE_E,
    pub as32AdChnId: [CVI_S32; 4usize],
    pub enDataSeq: VI_YUV_DATA_SEQ_E,
    pub stSynCfg: VI_SYNC_CFG_S,
    pub stBT656SynCfg: VI_BT656_SYNC_CFG_S,
    pub enInputDataType: VI_DATA_TYPE_E,
    pub bDataReverse: CVI_BOOL,
    pub stSize: SIZE_S,
    pub stWDRAttr: VI_WDR_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_ATTR_EX_S"][::std::mem::size_of::<_VI_DEV_ATTR_EX_S>() - 148usize];
    ["Alignment of _VI_DEV_ATTR_EX_S"][::std::mem::align_of::<_VI_DEV_ATTR_EX_S>() - 4usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enInputMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enInputMode) - 0usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enWorkMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enWorkMode) - 4usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enCombineMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enCombineMode) - 8usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enComponentMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enComponentMode) - 12usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enClkEdge"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enClkEdge) - 16usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::au32ComponentMask"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, au32ComponentMask) - 20usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enScanMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enScanMode) - 28usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::as32AdChnId"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, as32AdChnId) - 32usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enDataSeq"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enDataSeq) - 48usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stSynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stSynCfg) - 52usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stBT656SynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stBT656SynCfg) - 112usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enInputDataType"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enInputDataType) - 120usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::bDataReverse"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, bDataReverse) - 124usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stSize"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stSize) - 128usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stWDRAttr"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stWDRAttr) - 136usize];
};
pub type VI_DEV_ATTR_EX_S = _VI_DEV_ATTR_EX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_ATTR_S {
    pub enIntfMode: VI_INTF_MODE_E,
    pub enWorkMode: VI_WORK_MODE_E,
    pub enScanMode: VI_SCAN_MODE_E,
    pub as32AdChnId: [CVI_S32; 4usize],
    pub enDataSeq: VI_YUV_DATA_SEQ_E,
    pub stSynCfg: VI_SYNC_CFG_S,
    pub enInputDataType: VI_DATA_TYPE_E,
    pub stSize: SIZE_S,
    pub stWDRAttr: VI_WDR_ATTR_S,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub chn_num: CVI_U32,
    pub snrFps: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_ATTR_S"][::std::mem::size_of::<_VI_DEV_ATTR_S>() - 128usize];
    ["Alignment of _VI_DEV_ATTR_S"][::std::mem::align_of::<_VI_DEV_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DEV_ATTR_S::enIntfMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enIntfMode) - 0usize];
    ["Offset of field: _VI_DEV_ATTR_S::enWorkMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enWorkMode) - 4usize];
    ["Offset of field: _VI_DEV_ATTR_S::enScanMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enScanMode) - 8usize];
    ["Offset of field: _VI_DEV_ATTR_S::as32AdChnId"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, as32AdChnId) - 12usize];
    ["Offset of field: _VI_DEV_ATTR_S::enDataSeq"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enDataSeq) - 28usize];
    ["Offset of field: _VI_DEV_ATTR_S::stSynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stSynCfg) - 32usize];
    ["Offset of field: _VI_DEV_ATTR_S::enInputDataType"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enInputDataType) - 92usize];
    ["Offset of field: _VI_DEV_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stSize) - 96usize];
    ["Offset of field: _VI_DEV_ATTR_S::stWDRAttr"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stWDRAttr) - 104usize];
    ["Offset of field: _VI_DEV_ATTR_S::enBayerFormat"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enBayerFormat) - 116usize];
    ["Offset of field: _VI_DEV_ATTR_S::chn_num"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, chn_num) - 120usize];
    ["Offset of field: _VI_DEV_ATTR_S::snrFps"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, snrFps) - 124usize];
};
pub type VI_DEV_ATTR_S = _VI_DEV_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_BIND_PIPE_S {
    pub u32Num: CVI_U32,
    pub PipeId: [VI_PIPE; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_BIND_PIPE_S"][::std::mem::size_of::<_VI_DEV_BIND_PIPE_S>() - 20usize];
    ["Alignment of _VI_DEV_BIND_PIPE_S"][::std::mem::align_of::<_VI_DEV_BIND_PIPE_S>() - 4usize];
    ["Offset of field: _VI_DEV_BIND_PIPE_S::u32Num"]
        [::std::mem::offset_of!(_VI_DEV_BIND_PIPE_S, u32Num) - 0usize];
    ["Offset of field: _VI_DEV_BIND_PIPE_S::PipeId"]
        [::std::mem::offset_of!(_VI_DEV_BIND_PIPE_S, PipeId) - 4usize];
};
pub type VI_DEV_BIND_PIPE_S = _VI_DEV_BIND_PIPE_S;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_RFR: _VI_NR_REF_SOURCE_E = 0;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_CHN0: _VI_NR_REF_SOURCE_E = 1;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_BUTT: _VI_NR_REF_SOURCE_E = 2;
pub type _VI_NR_REF_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_NR_REF_SOURCE_E as VI_NR_REF_SOURCE_E;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_NONE: _VI_PIPE_BYPASS_MODE_E = 0;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_FE: _VI_PIPE_BYPASS_MODE_E = 1;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_BE: _VI_PIPE_BYPASS_MODE_E = 2;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_BUTT: _VI_PIPE_BYPASS_MODE_E = 3;
pub type _VI_PIPE_BYPASS_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_BYPASS_MODE_E as VI_PIPE_BYPASS_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_NR_ATTR_S {
    pub enPixFmt: PIXEL_FORMAT_E,
    pub enBitWidth: DATA_BITWIDTH_E,
    pub enNrRefSource: VI_NR_REF_SOURCE_E,
    pub enCompressMode: COMPRESS_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_NR_ATTR_S"][::std::mem::size_of::<_VI_NR_ATTR_S>() - 16usize];
    ["Alignment of _VI_NR_ATTR_S"][::std::mem::align_of::<_VI_NR_ATTR_S>() - 4usize];
    ["Offset of field: _VI_NR_ATTR_S::enPixFmt"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enPixFmt) - 0usize];
    ["Offset of field: _VI_NR_ATTR_S::enBitWidth"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enBitWidth) - 4usize];
    ["Offset of field: _VI_NR_ATTR_S::enNrRefSource"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enNrRefSource) - 8usize];
    ["Offset of field: _VI_NR_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enCompressMode) - 12usize];
};
pub type VI_NR_ATTR_S = _VI_NR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_ATTR_S {
    pub enPipeBypassMode: VI_PIPE_BYPASS_MODE_E,
    pub bYuvSkip: CVI_BOOL,
    pub bIspBypass: CVI_BOOL,
    pub u32MaxW: CVI_U32,
    pub u32MaxH: CVI_U32,
    pub enPixFmt: PIXEL_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enBitWidth: DATA_BITWIDTH_E,
    pub bNrEn: CVI_BOOL,
    pub bSharpenEn: CVI_BOOL,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub bDiscardProPic: CVI_BOOL,
    pub bYuvBypassPath: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_ATTR_S"][::std::mem::size_of::<_VI_PIPE_ATTR_S>() - 44usize];
    ["Alignment of _VI_PIPE_ATTR_S"][::std::mem::align_of::<_VI_PIPE_ATTR_S>() - 4usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enPipeBypassMode"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enPipeBypassMode) - 0usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bYuvSkip"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bYuvSkip) - 4usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bIspBypass"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bIspBypass) - 5usize];
    ["Offset of field: _VI_PIPE_ATTR_S::u32MaxW"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, u32MaxW) - 8usize];
    ["Offset of field: _VI_PIPE_ATTR_S::u32MaxH"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, u32MaxH) - 12usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enPixFmt"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enPixFmt) - 16usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enCompressMode) - 20usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enBitWidth"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enBitWidth) - 24usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bNrEn"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bNrEn) - 28usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bSharpenEn"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bSharpenEn) - 29usize];
    ["Offset of field: _VI_PIPE_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, stFrameRate) - 32usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bDiscardProPic"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bDiscardProPic) - 40usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bYuvBypassPath"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bYuvBypassPath) - 41usize];
};
pub type VI_PIPE_ATTR_S = _VI_PIPE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_MANUAL_ATTR_S {
    pub au16TextureStr: [CVI_U16; 32usize],
    pub au16EdgeStr: [CVI_U16; 32usize],
    pub u16TextureFreq: CVI_U16,
    pub u16EdgeFreq: CVI_U16,
    pub u8OverShoot: CVI_U8,
    pub u8UnderShoot: CVI_U8,
    pub u8ShootSupStr: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_MANUAL_ATTR_S>() - 136usize];
    ["Alignment of _VI_PIPE_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::au16TextureStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, au16TextureStr) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::au16EdgeStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, au16EdgeStr) - 64usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u16TextureFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u16TextureFreq) - 128usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u16EdgeFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u16EdgeFreq) - 130usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8OverShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8OverShoot) - 132usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8UnderShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8UnderShoot) - 133usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8ShootSupStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8ShootSupStr) - 134usize];
};
pub type VI_PIPE_SHARPEN_MANUAL_ATTR_S = _VI_PIPE_SHARPEN_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_AUTO_ATTR_S {
    pub au16TextureStr: [[CVI_U16; 16usize]; 32usize],
    pub au16EdgeStr: [[CVI_U16; 16usize]; 32usize],
    pub au16TextureFreq: [CVI_U16; 16usize],
    pub au16EdgeFreq: [CVI_U16; 16usize],
    pub au8OverShoot: [CVI_U8; 16usize],
    pub au8UnderShoot: [CVI_U8; 16usize],
    pub au8ShootSupStr: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_AUTO_ATTR_S>() - 2160usize];
    ["Alignment of _VI_PIPE_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16TextureStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16TextureStr) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16EdgeStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16EdgeStr) - 1024usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16TextureFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16TextureFreq) - 2048usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16EdgeFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16EdgeFreq) - 2080usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8OverShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8OverShoot) - 2112usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8UnderShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8UnderShoot) - 2128usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8ShootSupStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8ShootSupStr) - 2144usize];
};
pub type VI_PIPE_SHARPEN_AUTO_ATTR_S = _VI_PIPE_SHARPEN_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_ATTR_S {
    pub enOpType: OPERATION_MODE_E,
    pub au8LumaWgt: [CVI_U8; 32usize],
    pub stSharpenManualAttr: VI_PIPE_SHARPEN_MANUAL_ATTR_S,
    pub stSharpenAutoAttr: VI_PIPE_SHARPEN_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_ATTR_S>() - 2332usize];
    ["Alignment of _VI_PIPE_SHARPEN_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, enOpType) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::au8LumaWgt"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, au8LumaWgt) - 4usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::stSharpenManualAttr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, stSharpenManualAttr) - 36usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::stSharpenAutoAttr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, stSharpenAutoAttr) - 172usize];
};
pub type VI_PIPE_SHARPEN_ATTR_S = _VI_PIPE_SHARPEN_ATTR_S;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_NONE: _VI_PIPE_REPEAT_MODE_E = 0;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_ONCE: _VI_PIPE_REPEAT_MODE_E = 1;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_BUTT: _VI_PIPE_REPEAT_MODE_E = 2;
pub type _VI_PIPE_REPEAT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_REPEAT_MODE_E as VI_PIPE_REPEAT_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aIEy {
    pub IES: CVI_U8,
    pub IESS: CVI_U8,
    pub IEDZ: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aIEy"][::std::mem::size_of::<tV59aIEy>() - 4usize];
    ["Alignment of tV59aIEy"][::std::mem::align_of::<tV59aIEy>() - 2usize];
    ["Offset of field: tV59aIEy::IES"][::std::mem::offset_of!(tV59aIEy, IES) - 0usize];
    ["Offset of field: tV59aIEy::IESS"][::std::mem::offset_of!(tV59aIEy, IESS) - 1usize];
    ["Offset of field: tV59aIEy::IEDZ"][::std::mem::offset_of!(tV59aIEy, IEDZ) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aSFy {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub STH: [CVI_U16; 3usize],
    pub SBS: [CVI_U16; 3usize],
    pub SDS: [CVI_U16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aSFy"][::std::mem::size_of::<tV59aSFy>() - 20usize];
    ["Alignment of tV59aSFy"][::std::mem::align_of::<tV59aSFy>() - 2usize];
    ["Offset of field: tV59aSFy::STH"][::std::mem::offset_of!(tV59aSFy, STH) - 2usize];
    ["Offset of field: tV59aSFy::SBS"][::std::mem::offset_of!(tV59aSFy, SBS) - 8usize];
    ["Offset of field: tV59aSFy::SDS"][::std::mem::offset_of!(tV59aSFy, SDS) - 14usize];
};
impl tV59aSFy {
    #[inline]
    pub fn SBF(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SBF(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn STR(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_STR(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn STHp(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_STHp(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SFT(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_SFT(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn kPro(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_kPro(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SBF: CVI_U8,
        STR: CVI_U8,
        STHp: CVI_U8,
        SFT: CVI_U8,
        kPro: CVI_U8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SBF: u8 = unsafe { ::std::mem::transmute(SBF) };
            SBF as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let STR: u8 = unsafe { ::std::mem::transmute(STR) };
            STR as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let STHp: u8 = unsafe { ::std::mem::transmute(STHp) };
            STHp as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let SFT: u8 = unsafe { ::std::mem::transmute(SFT) };
            SFT as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let kPro: u8 = unsafe { ::std::mem::transmute(kPro) };
            kPro as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aMDy {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aMDy"][::std::mem::size_of::<tV59aMDy>() - 4usize];
    ["Alignment of tV59aMDy"][::std::mem::align_of::<tV59aMDy>() - 2usize];
};
impl tV59aMDy {
    #[inline]
    pub fn MATH(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_MATH(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn MATE(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_MATE(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MATW(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_MATW(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn MASW(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_MASW(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MABW(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_MABW(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn MAXN(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_MAXN(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MATH: CVI_U16,
        MATE: CVI_U16,
        MATW: CVI_U16,
        MASW: CVI_U8,
        MABW: CVI_U8,
        MAXN: CVI_U8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let MATH: u16 = unsafe { ::std::mem::transmute(MATH) };
            MATH as u64
        });
        __bindgen_bitfield_unit.set(10usize, 4u8, {
            let MATE: u16 = unsafe { ::std::mem::transmute(MATE) };
            MATE as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let MATW: u16 = unsafe { ::std::mem::transmute(MATW) };
            MATW as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let MASW: u8 = unsafe { ::std::mem::transmute(MASW) };
            MASW as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let MABW: u8 = unsafe { ::std::mem::transmute(MABW) };
            MABW as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let MAXN: u8 = unsafe { ::std::mem::transmute(MAXN) };
            MAXN as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aTFy {
    pub TFR: [CVI_U8; 4usize],
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aTFy"][::std::mem::size_of::<tV59aTFy>() - 8usize];
    ["Alignment of tV59aTFy"][::std::mem::align_of::<tV59aTFy>() - 2usize];
    ["Offset of field: tV59aTFy::TFR"][::std::mem::offset_of!(tV59aTFy, TFR) - 0usize];
};
impl tV59aTFy {
    #[inline]
    pub fn TDZ(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_TDZ(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn TDX(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_TDX(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn TFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_TFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        TDZ: CVI_U16,
        TDX: CVI_U16,
        TFS: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 14u8, {
            let TDZ: u16 = unsafe { ::std::mem::transmute(TDZ) };
            TDZ as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let TDX: u16 = unsafe { ::std::mem::transmute(TDX) };
            TDX as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let TFS: u16 = unsafe { ::std::mem::transmute(TFS) };
            TFS as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aNRc {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aNRc"][::std::mem::size_of::<tV59aNRc>() - 6usize];
    ["Alignment of tV59aNRc"][::std::mem::align_of::<tV59aNRc>() - 2usize];
};
impl tV59aNRc {
    #[inline]
    pub fn SFC(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_SFC(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn TFC(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_TFC(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn CSFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_CSFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn CSFk(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_CSFk(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn CTFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_CTFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn CIIR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_CIIR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn CTFR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_CTFR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SFC: CVI_U16,
        TFC: CVI_U16,
        CSFS: CVI_U16,
        CSFk: CVI_U16,
        CTFS: CVI_U16,
        CIIR: CVI_U16,
        CTFR: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let SFC: u16 = unsafe { ::std::mem::transmute(SFC) };
            SFC as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let TFC: u16 = unsafe { ::std::mem::transmute(TFC) };
            TFC as u64
        });
        __bindgen_bitfield_unit.set(16usize, 14u8, {
            let CSFS: u16 = unsafe { ::std::mem::transmute(CSFS) };
            CSFS as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let CSFk: u16 = unsafe { ::std::mem::transmute(CSFk) };
            CSFk as u64
        });
        __bindgen_bitfield_unit.set(32usize, 4u8, {
            let CTFS: u16 = unsafe { ::std::mem::transmute(CTFS) };
            CTFS as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let CIIR: u16 = unsafe { ::std::mem::transmute(CIIR) };
            CIIR as u64
        });
        __bindgen_bitfield_unit.set(37usize, 11u8, {
            let CTFR: u16 = unsafe { ::std::mem::transmute(CTFR) };
            CTFR as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VI_PIPE_NRX_PARAM_V1_S {
    pub IEy: tV59aIEy,
    pub SFy: [tV59aSFy; 5usize],
    pub MDy: [tV59aMDy; 2usize],
    pub TFy: [tV59aTFy; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub HdgIES: CVI_U8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub IEyEx: [CVI_U8; 4usize],
    pub SFRi: [CVI_U8; 4usize],
    pub SFRk: [CVI_U8; 4usize],
    pub SBSk2: [CVI_U16; 32usize],
    pub SBSk3: [CVI_U16; 32usize],
    pub SDSk2: [CVI_U16; 32usize],
    pub SDSk3: [CVI_U16; 32usize],
    pub BriThr: [CVI_U16; 16usize],
    pub NRc: tV59aNRc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VI_PIPE_NRX_PARAM_V1_S"][::std::mem::size_of::<VI_PIPE_NRX_PARAM_V1_S>() - 438usize];
    ["Alignment of VI_PIPE_NRX_PARAM_V1_S"]
        [::std::mem::align_of::<VI_PIPE_NRX_PARAM_V1_S>() - 2usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::IEy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, IEy) - 0usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFy) - 4usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::MDy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, MDy) - 104usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::TFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, TFy) - 112usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::HdgIES"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, HdgIES) - 130usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::IEyEx"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, IEyEx) - 132usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFRi"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFRi) - 136usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFRk"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFRk) - 140usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SBSk2"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SBSk2) - 144usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SBSk3"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SBSk3) - 208usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SDSk2"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SDSk2) - 272usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SDSk3"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SDSk3) - 336usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::BriThr"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, BriThr) - 400usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::NRc"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, NRc) - 432usize];
};
impl VI_PIPE_NRX_PARAM_V1_S {
    #[inline]
    pub fn HdgType(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_HdgType(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn BriType(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_BriType(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgMode(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_HdgMode(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn kTab2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kTab2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgWnd(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_HdgWnd(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn kTab3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kTab3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgSFR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_HdgSFR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nOut(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_nOut(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        HdgType: CVI_U16,
        BriType: CVI_U16,
        HdgMode: CVI_U16,
        kTab2: CVI_U16,
        HdgWnd: CVI_U16,
        kTab3: CVI_U16,
        HdgSFR: CVI_U16,
        nOut: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let HdgType: u16 = unsafe { ::std::mem::transmute(HdgType) };
            HdgType as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let BriType: u16 = unsafe { ::std::mem::transmute(BriType) };
            BriType as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let HdgMode: u16 = unsafe { ::std::mem::transmute(HdgMode) };
            HdgMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let kTab2: u16 = unsafe { ::std::mem::transmute(kTab2) };
            kTab2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let HdgWnd: u16 = unsafe { ::std::mem::transmute(HdgWnd) };
            HdgWnd as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let kTab3: u16 = unsafe { ::std::mem::transmute(kTab3) };
            kTab3 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 4u8, {
            let HdgSFR: u16 = unsafe { ::std::mem::transmute(HdgSFR) };
            HdgSFR as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let nOut: u16 = unsafe { ::std::mem::transmute(nOut) };
            nOut as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn nRef(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nRef(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IEyMode(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IEyMode(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(nRef: CVI_U8, IEyMode: CVI_U8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nRef: u8 = unsafe { ::std::mem::transmute(nRef) };
            nRef as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IEyMode: u8 = unsafe { ::std::mem::transmute(IEyMode) };
            IEyMode as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const _VI_NR_VERSION_E_VI_NR_V1: _VI_NR_VERSION_E = 1;
pub const _VI_NR_VERSION_E_VI_NR_V2: _VI_NR_VERSION_E = 2;
pub const _VI_NR_VERSION_E_VI_NR_V3: _VI_NR_VERSION_E = 3;
pub const _VI_NR_VERSION_E_VI_NR_V4: _VI_NR_VERSION_E = 4;
pub const _VI_NR_VERSION_E_VI_NR_BUTT: _VI_NR_VERSION_E = 5;
pub type _VI_NR_VERSION_E = ::std::os::raw::c_uint;
pub use self::_VI_NR_VERSION_E as VI_NR_VERSION_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_MANUAL_V1_S {
    pub stNRXParamV1: VI_PIPE_NRX_PARAM_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_MANUAL_V1_S"][::std::mem::size_of::<_NRX_PARAM_MANUAL_V1_S>() - 438usize];
    ["Alignment of _NRX_PARAM_MANUAL_V1_S"]
        [::std::mem::align_of::<_NRX_PARAM_MANUAL_V1_S>() - 2usize];
    ["Offset of field: _NRX_PARAM_MANUAL_V1_S::stNRXParamV1"]
        [::std::mem::offset_of!(_NRX_PARAM_MANUAL_V1_S, stNRXParamV1) - 0usize];
};
pub type NRX_PARAM_MANUAL_V1_S = _NRX_PARAM_MANUAL_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_AUTO_V1_S {
    pub u32ParamNum: CVI_U32,
    pub pau32ISO: *mut CVI_U32,
    pub pastNRXParamV1: *mut VI_PIPE_NRX_PARAM_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_AUTO_V1_S"][::std::mem::size_of::<_NRX_PARAM_AUTO_V1_S>() - 24usize];
    ["Alignment of _NRX_PARAM_AUTO_V1_S"][::std::mem::align_of::<_NRX_PARAM_AUTO_V1_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::u32ParamNum"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, u32ParamNum) - 0usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::pau32ISO"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, pau32ISO) - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::pastNRXParamV1"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, pastNRXParamV1) - 16usize];
};
pub type NRX_PARAM_AUTO_V1_S = _NRX_PARAM_AUTO_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_V1_S {
    pub enOptMode: OPERATION_MODE_E,
    pub stNRXManualV1: NRX_PARAM_MANUAL_V1_S,
    pub stNRXAutoV1: NRX_PARAM_AUTO_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_V1_S"][::std::mem::size_of::<_NRX_PARAM_V1_S>() - 472usize];
    ["Alignment of _NRX_PARAM_V1_S"][::std::mem::align_of::<_NRX_PARAM_V1_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_V1_S::enOptMode"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, enOptMode) - 0usize];
    ["Offset of field: _NRX_PARAM_V1_S::stNRXManualV1"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, stNRXManualV1) - 4usize];
    ["Offset of field: _NRX_PARAM_V1_S::stNRXAutoV1"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, stNRXAutoV1) - 448usize];
};
pub type NRX_PARAM_V1_S = _NRX_PARAM_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV500_VI_IEy {
    pub IES0: CVI_U8,
    pub IES1: CVI_U8,
    pub IES2: CVI_U8,
    pub IES3: CVI_U8,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV500_VI_IEy"][::std::mem::size_of::<tV500_VI_IEy>() - 6usize];
    ["Alignment of tV500_VI_IEy"][::std::mem::align_of::<tV500_VI_IEy>() - 2usize];
    ["Offset of field: tV500_VI_IEy::IES0"][::std::mem::offset_of!(tV500_VI_IEy, IES0) - 0usize];
    ["Offset of field: tV500_VI_IEy::IES1"][::std::mem::offset_of!(tV500_VI_IEy, IES1) - 1usize];
    ["Offset of field: tV500_VI_IEy::IES2"][::std::mem::offset_of!(tV500_VI_IEy, IES2) - 2usize];
    ["Offset of field: tV500_VI_IEy::IES3"][::std::mem::offset_of!(tV500_VI_IEy, IES3) - 3usize];
};
impl tV500_VI_IEy {
    #[inline]
    pub fn IEDZ(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_IEDZ(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn _rb_(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set__rb_(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(IEDZ: CVI_U16, _rb_: CVI_U16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let IEDZ: u16 = unsafe { ::std::mem::transmute(IEDZ) };
            IEDZ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let _rb_: u16 = unsafe { ::std::mem::transmute(_rb_) };
            _rb_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV500_VI_SFy {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub DeRate: CVI_U8,
    pub SFR6: [CVI_U8; 3usize],
    pub SFS1: CVI_U8,
    pub SFT1: CVI_U8,
    pub SBR1: CVI_U8,
    pub SFS2: CVI_U8,
    pub SFT2: CVI_U8,
    pub SBR2: CVI_U8,
    pub SFS4: CVI_U8,
    pub SFT4: CVI_U8,
    pub SBR4: CVI_U8,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 6usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV500_VI_SFy"][::std::mem::size_of::<tV500_VI_SFy>() - 24usize];
    ["Alignment of tV500_VI_SFy"][::std::mem::align_of::<tV500_VI_SFy>() - 2usize];
    ["Offset of field: tV500_VI_SFy::DeRate"]
        [::std::mem::offset_of!(tV500_VI_SFy, DeRate) - 4usize];
    ["Offset of field: tV500_VI_SFy::SFR6"][::std::mem::offset_of!(tV500_VI_SFy, SFR6) - 5usize];
    ["Offset of field: tV500_VI_SFy::SFS1"][::std::mem::offset_of!(tV500_VI_SFy, SFS1) - 8usize];
    ["Offset of field: tV500_VI_SFy::SFT1"][::std::mem::offset_of!(tV500_VI_SFy, SFT1) - 9usize];
    ["Offset of field: tV500_VI_SFy::SBR1"][::std::mem::offset_of!(tV500_VI_SFy, SBR1) - 10usize];
    ["Offset of field: tV500_VI_SFy::SFS2"][::std::mem::offset_of!(tV500_VI_SFy, SFS2) - 11usize];
    ["Offset of field: tV500_VI_SFy::SFT2"][::std::mem::offset_of!(tV500_VI_SFy, SFT2) - 12usize];
    ["Offset of field: tV500_VI_SFy::SBR2"][::std::mem::offset_of!(tV500_VI_SFy, SBR2) - 13usize];
    ["Offset of field: tV500_VI_SFy::SFS4"][::std::mem::offset_of!(tV500_VI_SFy, SFS4) - 14usize];
    ["Offset of field: tV500_VI_SFy::SFT4"][::std::mem::offset_of!(tV500_VI_SFy, SFT4) - 15usize];
    ["Offset of field: tV500_VI_SFy::SBR4"][::std::mem::offset_of!(tV500_VI_SFy, SBR4) - 16usize];
};
impl tV500_VI_SFy {
    #[inline]
    pub fn SPN6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_SPN6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn SFR(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_SFR(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SBN6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_SBN6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn PBR6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_PBR6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SRT0(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_SRT0(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SRT1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_SRT1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn JMODE(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_JMODE(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn DeIdx(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_DeIdx(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SPN6: CVI_U8,
        SFR: CVI_U8,
        SBN6: CVI_U8,
        PBR6: CVI_U8,
        SRT0: CVI_U16,
        SRT1: CVI_U16,
        JMODE: CVI_U16,
        DeIdx: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let SPN6: u8 = unsafe { ::std::mem::transmute(SPN6) };
            SPN6 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let SFR: u8 = unsafe { ::std::mem::transmute(SFR) };
            SFR as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let SBN6: u8 = unsafe { ::std::mem::transmute(SBN6) };
            SBN6 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let PBR6: u8 = unsafe { ::std::mem::transmute(PBR6) };
            PBR6 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 5u8, {
            let SRT0: u16 = unsafe { ::std::mem::transmute(SRT0) };
            SRT0 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 5u8, {
            let SRT1: u16 = unsafe { ::std::mem::transmute(SRT1) };
            SRT1 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 3u8, {
            let JMODE: u16 = unsafe { ::std::mem::transmute(JMODE) };
            JMODE as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let DeIdx: u16 = unsafe { ::std::mem::transmute(DeIdx) };
            DeIdx as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn STH1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(9usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn NRyEn(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_NRyEn(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN0(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN0(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn STH2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(25usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(25usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn BWSF4(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(28usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_BWSF4(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn kMode(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(29usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_kMode(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn STH3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(32usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(32usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(41usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(41usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn TriTh(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(44usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_TriTh(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _rb0_(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(45usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set__rb0_(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(45usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        STH1: CVI_U16,
        SFN1: CVI_U16,
        NRyEn: CVI_U16,
        SFN0: CVI_U16,
        STH2: CVI_U16,
        SFN2: CVI_U16,
        BWSF4: CVI_U16,
        kMode: CVI_U16,
        STH3: CVI_U16,
        SFN3: CVI_U16,
        TriTh: CVI_U16,
        _rb0_: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let STH1: u16 = unsafe { ::std::mem::transmute(STH1) };
            STH1 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let SFN1: u16 = unsafe { ::std::mem::transmute(SFN1) };
            SFN1 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let NRyEn: u16 = unsafe { ::std::mem::transmute(NRyEn) };
            NRyEn as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let SFN0: u16 = unsafe { ::std::mem::transmute(SFN0) };
            SFN0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let STH2: u16 = unsafe { ::std::mem::transmute(STH2) };
            STH2 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 3u8, {
            let SFN2: u16 = unsafe { ::std::mem::transmute(SFN2) };
            SFN2 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let BWSF4: u16 = unsafe { ::std::mem::transmute(BWSF4) };
            BWSF4 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let kMode: u16 = unsafe { ::std::mem::transmute(kMode) };
            kMode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 9u8, {
            let STH3: u16 = unsafe { ::std::mem::transmute(STH3) };
            STH3 as u64
        });
        __bindgen_bitfield_unit.set(41usize, 3u8, {
            let SFN3: u16 = unsafe { ::std::mem::transmute(SFN3) };
            SFN3 as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let TriTh: u16 = unsafe { ::std::mem::transmute(TriTh) };
            TriTh as u64
        });
        __bindgen_bitfield_unit.set(45usize, 3u8, {
            let _rb0_: u16 = unsafe { ::std::mem::transmute(_rb0_) };
            _rb0_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VI_PIPE_NRX_PARAM_V2_S {
    pub IEy: tV500_VI_IEy,
    pub SFy: tV500_VI_SFy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VI_PIPE_NRX_PARAM_V2_S"][::std::mem::size_of::<VI_PIPE_NRX_PARAM_V2_S>() - 30usize];
    ["Alignment of VI_PIPE_NRX_PARAM_V2_S"]
        [::std::mem::align_of::<VI_PIPE_NRX_PARAM_V2_S>() - 2usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V2_S::IEy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V2_S, IEy) - 0usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V2_S::SFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V2_S, SFy) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_MANUAL_V2_S {
    pub stNRXParamV2: VI_PIPE_NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_MANUAL_V2_S"][::std::mem::size_of::<_NRX_PARAM_MANUAL_V2_S>() - 30usize];
    ["Alignment of _NRX_PARAM_MANUAL_V2_S"]
        [::std::mem::align_of::<_NRX_PARAM_MANUAL_V2_S>() - 2usize];
    ["Offset of field: _NRX_PARAM_MANUAL_V2_S::stNRXParamV2"]
        [::std::mem::offset_of!(_NRX_PARAM_MANUAL_V2_S, stNRXParamV2) - 0usize];
};
pub type NRX_PARAM_MANUAL_V2_S = _NRX_PARAM_MANUAL_V2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_AUTO_V2_S {
    pub u32ParamNum: CVI_U32,
    pub pau32ISO: *mut CVI_U32,
    pub pastNRXParamV2: *mut VI_PIPE_NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_AUTO_V2_S"][::std::mem::size_of::<_NRX_PARAM_AUTO_V2_S>() - 24usize];
    ["Alignment of _NRX_PARAM_AUTO_V2_S"][::std::mem::align_of::<_NRX_PARAM_AUTO_V2_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::u32ParamNum"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, u32ParamNum) - 0usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::pau32ISO"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, pau32ISO) - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::pastNRXParamV2"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, pastNRXParamV2) - 16usize];
};
pub type NRX_PARAM_AUTO_V2_S = _NRX_PARAM_AUTO_V2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_V2_S {
    pub enOptMode: OPERATION_MODE_E,
    pub stNRXManualV2: NRX_PARAM_MANUAL_V2_S,
    pub stNRXAutoV2: NRX_PARAM_AUTO_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_V2_S"][::std::mem::size_of::<_NRX_PARAM_V2_S>() - 64usize];
    ["Alignment of _NRX_PARAM_V2_S"][::std::mem::align_of::<_NRX_PARAM_V2_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_V2_S::enOptMode"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, enOptMode) - 0usize];
    ["Offset of field: _NRX_PARAM_V2_S::stNRXManualV2"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, stNRXManualV2) - 4usize];
    ["Offset of field: _NRX_PARAM_V2_S::stNRXAutoV2"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, stNRXAutoV2) - 40usize];
};
pub type NRX_PARAM_V2_S = _NRX_PARAM_V2_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VI_PIPE_NRX_PARAM_S {
    pub enNRVersion: VI_NR_VERSION_E,
    pub __bindgen_anon_1: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VI_PIPE_NRX_PARAM_S__bindgen_ty_1 {
    pub stNRXParamV1: NRX_PARAM_V1_S,
    pub stNRXParamV2: NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_NRX_PARAM_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VI_PIPE_NRX_PARAM_S__bindgen_ty_1>() - 472usize];
    ["Alignment of _VI_PIPE_NRX_PARAM_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VI_PIPE_NRX_PARAM_S__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1::stNRXParamV1"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S__bindgen_ty_1, stNRXParamV1) - 0usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1::stNRXParamV2"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S__bindgen_ty_1, stNRXParamV2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_NRX_PARAM_S"][::std::mem::size_of::<_VI_PIPE_NRX_PARAM_S>() - 480usize];
    ["Alignment of _VI_PIPE_NRX_PARAM_S"][::std::mem::align_of::<_VI_PIPE_NRX_PARAM_S>() - 8usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S::enNRVersion"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S, enNRVersion) - 0usize];
};
pub type VI_PIPE_NRX_PARAM_S = _VI_PIPE_NRX_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CHN_ATTR_S {
    pub stSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub bMirror: CVI_BOOL,
    pub bFlip: CVI_BOOL,
    pub u32Depth: CVI_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub u32BindVbPool: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CHN_ATTR_S"][::std::mem::size_of::<_VI_CHN_ATTR_S>() - 44usize];
    ["Alignment of _VI_CHN_ATTR_S"][::std::mem::align_of::<_VI_CHN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_CHN_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, stSize) - 0usize];
    ["Offset of field: _VI_CHN_ATTR_S::enPixelFormat"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enPixelFormat) - 8usize];
    ["Offset of field: _VI_CHN_ATTR_S::enDynamicRange"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enDynamicRange) - 12usize];
    ["Offset of field: _VI_CHN_ATTR_S::enVideoFormat"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enVideoFormat) - 16usize];
    ["Offset of field: _VI_CHN_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enCompressMode) - 20usize];
    ["Offset of field: _VI_CHN_ATTR_S::bMirror"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, bMirror) - 24usize];
    ["Offset of field: _VI_CHN_ATTR_S::bFlip"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, bFlip) - 25usize];
    ["Offset of field: _VI_CHN_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, u32Depth) - 28usize];
    ["Offset of field: _VI_CHN_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, stFrameRate) - 32usize];
    ["Offset of field: _VI_CHN_ATTR_S::u32BindVbPool"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, u32BindVbPool) - 40usize];
};
pub type VI_CHN_ATTR_S = _VI_CHN_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_STATUS_S {
    pub bEnable: CVI_BOOL,
    pub u32IntCnt: CVI_U32,
    pub u32FrameRate: CVI_U32,
    pub u32LostFrame: CVI_U32,
    pub u32VbFail: CVI_U32,
    pub stSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_STATUS_S"][::std::mem::size_of::<_VI_PIPE_STATUS_S>() - 28usize];
    ["Alignment of _VI_PIPE_STATUS_S"][::std::mem::align_of::<_VI_PIPE_STATUS_S>() - 4usize];
    ["Offset of field: _VI_PIPE_STATUS_S::bEnable"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, bEnable) - 0usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32IntCnt"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32IntCnt) - 4usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32FrameRate"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32FrameRate) - 8usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32LostFrame"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32LostFrame) - 12usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32VbFail"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32VbFail) - 16usize];
    ["Offset of field: _VI_PIPE_STATUS_S::stSize"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, stSize) - 20usize];
};
pub type VI_PIPE_STATUS_S = _VI_PIPE_STATUS_S;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_ONCE: _VI_VS_SIGNAL_MODE_E = 0;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_FREQ: _VI_VS_SIGNAL_MODE_E = 1;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_MODE_BUTT: _VI_VS_SIGNAL_MODE_E = 2;
pub type _VI_VS_SIGNAL_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_VS_SIGNAL_MODE_E as VI_VS_SIGNAL_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_VS_SIGNAL_ATTR_S {
    pub enMode: VI_VS_SIGNAL_MODE_E,
    pub u32StartTime: CVI_U32,
    pub u32Duration: CVI_U32,
    pub u32CapFrmIndex: CVI_U32,
    pub u32Interval: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_VS_SIGNAL_ATTR_S"][::std::mem::size_of::<_VI_VS_SIGNAL_ATTR_S>() - 20usize];
    ["Alignment of _VI_VS_SIGNAL_ATTR_S"][::std::mem::align_of::<_VI_VS_SIGNAL_ATTR_S>() - 4usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::enMode"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, enMode) - 0usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32StartTime"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32StartTime) - 4usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32Duration"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32Duration) - 8usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32CapFrmIndex"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32CapFrmIndex) - 12usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32Interval"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32Interval) - 16usize];
};
pub type VI_VS_SIGNAL_ATTR_S = _VI_VS_SIGNAL_ATTR_S;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_TAIL: _VI_EXT_CHN_SOURCE_E = 0;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_HEAD: _VI_EXT_CHN_SOURCE_E = 1;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_BUTT: _VI_EXT_CHN_SOURCE_E = 2;
pub type _VI_EXT_CHN_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_EXT_CHN_SOURCE_E as VI_EXT_CHN_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_EXT_CHN_ATTR_S {
    pub enSource: VI_EXT_CHN_SOURCE_E,
    pub s32BindChn: VI_CHN,
    pub stSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Depth: CVI_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_EXT_CHN_ATTR_S"][::std::mem::size_of::<_VI_EXT_CHN_ATTR_S>() - 32usize];
    ["Alignment of _VI_EXT_CHN_ATTR_S"][::std::mem::align_of::<_VI_EXT_CHN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::enSource"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, enSource) - 0usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::s32BindChn"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, s32BindChn) - 4usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, stSize) - 8usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::enPixelFormat"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, enPixelFormat) - 16usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, u32Depth) - 20usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, stFrameRate) - 24usize];
};
pub type VI_EXT_CHN_ATTR_S = _VI_EXT_CHN_ATTR_S;
pub const _VI_CROP_COORDINATE_E_VI_CROP_RATIO_COOR: _VI_CROP_COORDINATE_E = 0;
pub const _VI_CROP_COORDINATE_E_VI_CROP_ABS_COOR: _VI_CROP_COORDINATE_E = 1;
pub const _VI_CROP_COORDINATE_E_VI_CROP_BUTT: _VI_CROP_COORDINATE_E = 2;
pub type _VI_CROP_COORDINATE_E = ::std::os::raw::c_uint;
pub use self::_VI_CROP_COORDINATE_E as VI_CROP_COORDINATE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub enCropCoordinate: VI_CROP_COORDINATE_E,
    pub stCropRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CROP_INFO_S"][::std::mem::size_of::<_VI_CROP_INFO_S>() - 24usize];
    ["Alignment of _VI_CROP_INFO_S"][::std::mem::align_of::<_VI_CROP_INFO_S>() - 4usize];
    ["Offset of field: _VI_CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _VI_CROP_INFO_S::enCropCoordinate"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, enCropCoordinate) - 4usize];
    ["Offset of field: _VI_CROP_INFO_S::stCropRect"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, stCropRect) - 8usize];
};
pub type VI_CROP_INFO_S = _VI_CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_LDC_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub stAttr: LDC_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_LDC_ATTR_S"][::std::mem::size_of::<_VI_LDC_ATTR_S>() - 32usize];
    ["Alignment of _VI_LDC_ATTR_S"][::std::mem::align_of::<_VI_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _VI_LDC_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_LDC_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_LDC_ATTR_S::stAttr"]
        [::std::mem::offset_of!(_VI_LDC_ATTR_S, stAttr) - 4usize];
};
pub type VI_LDC_ATTR_S = _VI_LDC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CHN_STATUS_S {
    pub bEnable: CVI_BOOL,
    pub u32FrameRate: CVI_U32,
    pub u64PrevTime: CVI_U64,
    pub u32FrameNum: CVI_U32,
    pub u32LostFrame: CVI_U32,
    pub u32VbFail: CVI_U32,
    pub u32IntCnt: CVI_U32,
    pub u32RecvPic: CVI_U32,
    pub u32TotalMemByte: CVI_U32,
    pub stSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CHN_STATUS_S"][::std::mem::size_of::<_VI_CHN_STATUS_S>() - 48usize];
    ["Alignment of _VI_CHN_STATUS_S"][::std::mem::align_of::<_VI_CHN_STATUS_S>() - 8usize];
    ["Offset of field: _VI_CHN_STATUS_S::bEnable"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, bEnable) - 0usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32FrameRate"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32FrameRate) - 4usize];
    ["Offset of field: _VI_CHN_STATUS_S::u64PrevTime"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u64PrevTime) - 8usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32FrameNum"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32FrameNum) - 16usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32LostFrame"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32LostFrame) - 20usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32VbFail"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32VbFail) - 24usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32IntCnt"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32IntCnt) - 28usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32RecvPic"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32RecvPic) - 32usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32TotalMemByte"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32TotalMemByte) - 36usize];
    ["Offset of field: _VI_CHN_STATUS_S::stSize"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, stSize) - 40usize];
};
pub type VI_CHN_STATUS_S = _VI_CHN_STATUS_S;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_RAW: _VI_DUMP_TYPE_E = 0;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_YUV: _VI_DUMP_TYPE_E = 1;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_IR: _VI_DUMP_TYPE_E = 2;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_BUTT: _VI_DUMP_TYPE_E = 3;
pub type _VI_DUMP_TYPE_E = ::std::os::raw::c_uint;
pub use self::_VI_DUMP_TYPE_E as VI_DUMP_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DUMP_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub u32Depth: CVI_U32,
    pub enDumpType: VI_DUMP_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DUMP_ATTR_S"][::std::mem::size_of::<_VI_DUMP_ATTR_S>() - 12usize];
    ["Alignment of _VI_DUMP_ATTR_S"][::std::mem::align_of::<_VI_DUMP_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DUMP_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_DUMP_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, u32Depth) - 4usize];
    ["Offset of field: _VI_DUMP_ATTR_S::enDumpType"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, enDumpType) - 8usize];
};
pub type VI_DUMP_ATTR_S = _VI_DUMP_ATTR_S;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_DEV: _VI_PIPE_FRAME_SOURCE_E = 0;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_USER_FE: _VI_PIPE_FRAME_SOURCE_E = 1;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_USER_BE: _VI_PIPE_FRAME_SOURCE_E = 2;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_BUTT: _VI_PIPE_FRAME_SOURCE_E = 3;
pub type _VI_PIPE_FRAME_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_FRAME_SOURCE_E as VI_PIPE_FRAME_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_RAW_INFO_S {
    pub stVideoFrame: VIDEO_FRAME_INFO_S,
    pub stIspInfo: ISP_CONFIG_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_RAW_INFO_S"][::std::mem::size_of::<_VI_RAW_INFO_S>() - 208usize];
    ["Alignment of _VI_RAW_INFO_S"][::std::mem::align_of::<_VI_RAW_INFO_S>() - 8usize];
    ["Offset of field: _VI_RAW_INFO_S::stVideoFrame"]
        [::std::mem::offset_of!(_VI_RAW_INFO_S, stVideoFrame) - 0usize];
    ["Offset of field: _VI_RAW_INFO_S::stIspInfo"]
        [::std::mem::offset_of!(_VI_RAW_INFO_S, stIspInfo) - 152usize];
};
pub type VI_RAW_INFO_S = _VI_RAW_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_MOD_PARAM_S {
    pub s32DetectErrFrame: CVI_S32,
    pub u32DropErrFrame: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_MOD_PARAM_S"][::std::mem::size_of::<_VI_MOD_PARAM_S>() - 8usize];
    ["Alignment of _VI_MOD_PARAM_S"][::std::mem::align_of::<_VI_MOD_PARAM_S>() - 4usize];
    ["Offset of field: _VI_MOD_PARAM_S::s32DetectErrFrame"]
        [::std::mem::offset_of!(_VI_MOD_PARAM_S, s32DetectErrFrame) - 0usize];
    ["Offset of field: _VI_MOD_PARAM_S::u32DropErrFrame"]
        [::std::mem::offset_of!(_VI_MOD_PARAM_S, u32DropErrFrame) - 4usize];
};
pub type VI_MOD_PARAM_S = _VI_MOD_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_TIMING_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub s32FrmRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_TIMING_ATTR_S"][::std::mem::size_of::<_VI_DEV_TIMING_ATTR_S>() - 8usize];
    ["Alignment of _VI_DEV_TIMING_ATTR_S"]
        [::std::mem::align_of::<_VI_DEV_TIMING_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DEV_TIMING_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_DEV_TIMING_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_DEV_TIMING_ATTR_S::s32FrmRate"]
        [::std::mem::offset_of!(_VI_DEV_TIMING_ATTR_S, s32FrmRate) - 4usize];
};
pub type VI_DEV_TIMING_ATTR_S = _VI_DEV_TIMING_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_EARLY_INTERRUPT_S {
    pub bEnable: CVI_BOOL,
    pub u32LineCnt: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_EARLY_INTERRUPT_S"][::std::mem::size_of::<_VI_EARLY_INTERRUPT_S>() - 8usize];
    ["Alignment of _VI_EARLY_INTERRUPT_S"]
        [::std::mem::align_of::<_VI_EARLY_INTERRUPT_S>() - 4usize];
    ["Offset of field: _VI_EARLY_INTERRUPT_S::bEnable"]
        [::std::mem::offset_of!(_VI_EARLY_INTERRUPT_S, bEnable) - 0usize];
    ["Offset of field: _VI_EARLY_INTERRUPT_S::u32LineCnt"]
        [::std::mem::offset_of!(_VI_EARLY_INTERRUPT_S, u32LineCnt) - 4usize];
};
pub type VI_EARLY_INTERRUPT_S = _VI_EARLY_INTERRUPT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MLSC_GAIN_LUT_S {
    pub RGain: *mut CVI_U16,
    pub GGain: *mut CVI_U16,
    pub BGain: *mut CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MLSC_GAIN_LUT_S"][::std::mem::size_of::<_MLSC_GAIN_LUT_S>() - 24usize];
    ["Alignment of _MLSC_GAIN_LUT_S"][::std::mem::align_of::<_MLSC_GAIN_LUT_S>() - 8usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::RGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, RGain) - 0usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::GGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, GGain) - 8usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::BGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, BGain) - 16usize];
};
pub type MLSC_GAIN_LUT_S = _MLSC_GAIN_LUT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DUMP_REGISTER_TABLE_S {
    pub MlscGainLut: MLSC_GAIN_LUT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DUMP_REGISTER_TABLE_S"]
        [::std::mem::size_of::<_VI_DUMP_REGISTER_TABLE_S>() - 24usize];
    ["Alignment of _VI_DUMP_REGISTER_TABLE_S"]
        [::std::mem::align_of::<_VI_DUMP_REGISTER_TABLE_S>() - 8usize];
    ["Offset of field: _VI_DUMP_REGISTER_TABLE_S::MlscGainLut"]
        [::std::mem::offset_of!(_VI_DUMP_REGISTER_TABLE_S, MlscGainLut) - 0usize];
};
pub type VI_DUMP_REGISTER_TABLE_S = _VI_DUMP_REGISTER_TABLE_S;
pub type pfnViDevPmOps = ::std::option::Option<
    unsafe extern "C" fn(pvData: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PM_OPS_S {
    pub pfnSnsSuspend: pfnViDevPmOps,
    pub pfnSnsResume: pfnViDevPmOps,
    pub pfnMipiSuspend: pfnViDevPmOps,
    pub pfnMipiResume: pfnViDevPmOps,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PM_OPS_S"][::std::mem::size_of::<_VI_PM_OPS_S>() - 32usize];
    ["Alignment of _VI_PM_OPS_S"][::std::mem::align_of::<_VI_PM_OPS_S>() - 8usize];
    ["Offset of field: _VI_PM_OPS_S::pfnSnsSuspend"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnSnsSuspend) - 0usize];
    ["Offset of field: _VI_PM_OPS_S::pfnSnsResume"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnSnsResume) - 8usize];
    ["Offset of field: _VI_PM_OPS_S::pfnMipiSuspend"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnMipiSuspend) - 16usize];
    ["Offset of field: _VI_PM_OPS_S::pfnMipiResume"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnMipiResume) - 24usize];
};
pub type VI_PM_OPS_S = _VI_PM_OPS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_SMOOTH_RAW_DUMP_INFO_S {
    pub ViPipe: VI_PIPE,
    pub u8BlkCnt: CVI_U8,
    pub phy_addr_list: *mut CVI_U64,
    pub stCropRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_SMOOTH_RAW_DUMP_INFO_S"]
        [::std::mem::size_of::<_VI_SMOOTH_RAW_DUMP_INFO_S>() - 32usize];
    ["Alignment of _VI_SMOOTH_RAW_DUMP_INFO_S"]
        [::std::mem::align_of::<_VI_SMOOTH_RAW_DUMP_INFO_S>() - 8usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::ViPipe"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, ViPipe) - 0usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::u8BlkCnt"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, u8BlkCnt) - 4usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::phy_addr_list"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, phy_addr_list) - 8usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::stCropRect"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, stCropRect) - 16usize];
};
pub type VI_SMOOTH_RAW_DUMP_INFO_S = _VI_SMOOTH_RAW_DUMP_INFO_S;
pub const _ISP_BAYER_FORMAT_E_BAYER_BGGR: _ISP_BAYER_FORMAT_E = 0;
pub const _ISP_BAYER_FORMAT_E_BAYER_GBRG: _ISP_BAYER_FORMAT_E = 1;
pub const _ISP_BAYER_FORMAT_E_BAYER_GRBG: _ISP_BAYER_FORMAT_E = 2;
pub const _ISP_BAYER_FORMAT_E_BAYER_RGGB: _ISP_BAYER_FORMAT_E = 3;
pub const _ISP_BAYER_FORMAT_E_BAYER_GRGBI: _ISP_BAYER_FORMAT_E = 8;
pub const _ISP_BAYER_FORMAT_E_BAYER_RGBGI: _ISP_BAYER_FORMAT_E = 9;
pub const _ISP_BAYER_FORMAT_E_BAYER_GBGRI: _ISP_BAYER_FORMAT_E = 10;
pub const _ISP_BAYER_FORMAT_E_BAYER_BGRGI: _ISP_BAYER_FORMAT_E = 11;
pub const _ISP_BAYER_FORMAT_E_BAYER_IGRGB: _ISP_BAYER_FORMAT_E = 12;
pub const _ISP_BAYER_FORMAT_E_BAYER_IRGBG: _ISP_BAYER_FORMAT_E = 13;
pub const _ISP_BAYER_FORMAT_E_BAYER_IBGRG: _ISP_BAYER_FORMAT_E = 14;
pub const _ISP_BAYER_FORMAT_E_BAYER_IGBGR: _ISP_BAYER_FORMAT_E = 15;
pub const _ISP_BAYER_FORMAT_E_BAYER_BUTT: _ISP_BAYER_FORMAT_E = 16;
pub type _ISP_BAYER_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_ISP_BAYER_FORMAT_E as ISP_BAYER_FORMAT_E;
pub const _ISP_OP_TYPE_E_OP_TYPE_AUTO: _ISP_OP_TYPE_E = 0;
pub const _ISP_OP_TYPE_E_OP_TYPE_MANUAL: _ISP_OP_TYPE_E = 1;
pub const _ISP_OP_TYPE_E_OP_TYPE_BUTT: _ISP_OP_TYPE_E = 2;
pub type _ISP_OP_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_OP_TYPE_E as ISP_OP_TYPE_E;
pub const _ISP_FMW_STATE_E_ISP_FMW_STATE_RUN: _ISP_FMW_STATE_E = 0;
pub const _ISP_FMW_STATE_E_ISP_FMW_STATE_FREEZE: _ISP_FMW_STATE_E = 1;
pub const _ISP_FMW_STATE_E_ISP_FMW_STATE_BUTT: _ISP_FMW_STATE_E = 2;
pub type _ISP_FMW_STATE_E = ::std::os::raw::c_uint;
pub use self::_ISP_FMW_STATE_E as ISP_FMW_STATE_E;
pub const _ISP_CHANNEL_LIST_E_ISP_CHANNEL_LE: _ISP_CHANNEL_LIST_E = 0;
pub const _ISP_CHANNEL_LIST_E_ISP_CHANNEL_SE: _ISP_CHANNEL_LIST_E = 1;
pub const _ISP_CHANNEL_LIST_E_ISP_CHANNEL_MAX_NUM: _ISP_CHANNEL_LIST_E = 2;
pub type _ISP_CHANNEL_LIST_E = ::std::os::raw::c_uint;
pub use self::_ISP_CHANNEL_LIST_E as ISP_CHANNEL_LIST_E;
pub const _ISP_BAYER_CHANNEL_E_ISP_BAYER_CHN_R: _ISP_BAYER_CHANNEL_E = 0;
pub const _ISP_BAYER_CHANNEL_E_ISP_BAYER_CHN_GR: _ISP_BAYER_CHANNEL_E = 1;
pub const _ISP_BAYER_CHANNEL_E_ISP_BAYER_CHN_GB: _ISP_BAYER_CHANNEL_E = 2;
pub const _ISP_BAYER_CHANNEL_E_ISP_BAYER_CHN_B: _ISP_BAYER_CHANNEL_E = 3;
pub const _ISP_BAYER_CHANNEL_E_ISP_BAYER_CHN_NUM: _ISP_BAYER_CHANNEL_E = 4;
pub type _ISP_BAYER_CHANNEL_E = ::std::os::raw::c_uint;
pub use self::_ISP_BAYER_CHANNEL_E as ISP_BAYER_CHANNEL_E;
pub const _ISP_SNS_TYPE_E_SNS_I2C_TYPE: _ISP_SNS_TYPE_E = 0;
pub const _ISP_SNS_TYPE_E_SNS_SSP_TYPE: _ISP_SNS_TYPE_E = 1;
pub const _ISP_SNS_TYPE_E_SNS_TYPE_BUTT: _ISP_SNS_TYPE_E = 2;
pub type _ISP_SNS_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_SNS_TYPE_E as ISP_SNS_TYPE_E;
pub const _ISP_WDR_FRAME_IDX_E_ISP_WDR_FRAME_IDX_1: _ISP_WDR_FRAME_IDX_E = 0;
pub const _ISP_WDR_FRAME_IDX_E_ISP_WDR_FRAME_IDX_2: _ISP_WDR_FRAME_IDX_E = 1;
pub const _ISP_WDR_FRAME_IDX_E_ISP_WDR_FRAME_IDX_3: _ISP_WDR_FRAME_IDX_E = 2;
pub const _ISP_WDR_FRAME_IDX_E_ISP_WDR_FRAME_IDX_4: _ISP_WDR_FRAME_IDX_E = 3;
pub const _ISP_WDR_FRAME_IDX_E_ISP_WDR_FRAME_IDX_SIZE: _ISP_WDR_FRAME_IDX_E = 4;
pub type _ISP_WDR_FRAME_IDX_E = ::std::os::raw::c_uint;
pub use self::_ISP_WDR_FRAME_IDX_E as ISP_WDR_FRAME_IDX_E;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ISP_SNS_COMMBUS_U {
    pub s8I2cDev: CVI_S8,
    pub s8SspDev: _ISP_SNS_COMMBUS_U__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_COMMBUS_U__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_COMMBUS_U__bindgen_ty_1"]
        [::std::mem::size_of::<_ISP_SNS_COMMBUS_U__bindgen_ty_1>() - 1usize];
    ["Alignment of _ISP_SNS_COMMBUS_U__bindgen_ty_1"]
        [::std::mem::align_of::<_ISP_SNS_COMMBUS_U__bindgen_ty_1>() - 1usize];
};
impl _ISP_SNS_COMMBUS_U__bindgen_ty_1 {
    #[inline]
    pub fn bit4SspDev(&self) -> CVI_S8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bit4SspDev(&mut self, val: CVI_S8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn bit4SspCs(&self) -> CVI_S8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_bit4SspCs(&mut self, val: CVI_S8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit4SspDev: CVI_S8,
        bit4SspCs: CVI_S8,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let bit4SspDev: u8 = unsafe { ::std::mem::transmute(bit4SspDev) };
            bit4SspDev as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let bit4SspCs: u8 = unsafe { ::std::mem::transmute(bit4SspCs) };
            bit4SspCs as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_COMMBUS_U"][::std::mem::size_of::<_ISP_SNS_COMMBUS_U>() - 1usize];
    ["Alignment of _ISP_SNS_COMMBUS_U"][::std::mem::align_of::<_ISP_SNS_COMMBUS_U>() - 1usize];
    ["Offset of field: _ISP_SNS_COMMBUS_U::s8I2cDev"]
        [::std::mem::offset_of!(_ISP_SNS_COMMBUS_U, s8I2cDev) - 0usize];
    ["Offset of field: _ISP_SNS_COMMBUS_U::s8SspDev"]
        [::std::mem::offset_of!(_ISP_SNS_COMMBUS_U, s8SspDev) - 0usize];
};
pub type ISP_SNS_COMMBUS_U = _ISP_SNS_COMMBUS_U;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_I2C_DATA_S {
    pub bUpdate: CVI_BOOL,
    pub bDropFrm: CVI_BOOL,
    pub bvblankUpdate: CVI_BOOL,
    pub u8DelayFrmNum: CVI_U8,
    pub u8DropFrmNum: CVI_U8,
    pub u8IntPos: CVI_U8,
    pub u8DevAddr: CVI_U8,
    pub u32RegAddr: CVI_U32,
    pub u32AddrByteNum: CVI_U32,
    pub u32Data: CVI_U32,
    pub u32DataByteNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_I2C_DATA_S"][::std::mem::size_of::<_ISP_I2C_DATA_S>() - 24usize];
    ["Alignment of _ISP_I2C_DATA_S"][::std::mem::align_of::<_ISP_I2C_DATA_S>() - 4usize];
    ["Offset of field: _ISP_I2C_DATA_S::bUpdate"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, bUpdate) - 0usize];
    ["Offset of field: _ISP_I2C_DATA_S::bDropFrm"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, bDropFrm) - 1usize];
    ["Offset of field: _ISP_I2C_DATA_S::bvblankUpdate"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, bvblankUpdate) - 2usize];
    ["Offset of field: _ISP_I2C_DATA_S::u8DelayFrmNum"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u8DelayFrmNum) - 3usize];
    ["Offset of field: _ISP_I2C_DATA_S::u8DropFrmNum"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u8DropFrmNum) - 4usize];
    ["Offset of field: _ISP_I2C_DATA_S::u8IntPos"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u8IntPos) - 5usize];
    ["Offset of field: _ISP_I2C_DATA_S::u8DevAddr"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u8DevAddr) - 6usize];
    ["Offset of field: _ISP_I2C_DATA_S::u32RegAddr"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u32RegAddr) - 8usize];
    ["Offset of field: _ISP_I2C_DATA_S::u32AddrByteNum"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u32AddrByteNum) - 12usize];
    ["Offset of field: _ISP_I2C_DATA_S::u32Data"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u32Data) - 16usize];
    ["Offset of field: _ISP_I2C_DATA_S::u32DataByteNum"]
        [::std::mem::offset_of!(_ISP_I2C_DATA_S, u32DataByteNum) - 20usize];
};
pub type ISP_I2C_DATA_S = _ISP_I2C_DATA_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SSP_DATA_S {
    pub bUpdate: CVI_BOOL,
    pub u8DelayFrmNum: CVI_U8,
    pub u8IntPos: CVI_U8,
    pub u32DevAddr: CVI_U32,
    pub u32DevAddrByteNum: CVI_U32,
    pub u32RegAddr: CVI_U32,
    pub u32RegAddrByteNum: CVI_U32,
    pub u32Data: CVI_U32,
    pub u32DataByteNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SSP_DATA_S"][::std::mem::size_of::<_ISP_SSP_DATA_S>() - 28usize];
    ["Alignment of _ISP_SSP_DATA_S"][::std::mem::align_of::<_ISP_SSP_DATA_S>() - 4usize];
    ["Offset of field: _ISP_SSP_DATA_S::bUpdate"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, bUpdate) - 0usize];
    ["Offset of field: _ISP_SSP_DATA_S::u8DelayFrmNum"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u8DelayFrmNum) - 1usize];
    ["Offset of field: _ISP_SSP_DATA_S::u8IntPos"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u8IntPos) - 2usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32DevAddr"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32DevAddr) - 4usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32DevAddrByteNum"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32DevAddrByteNum) - 8usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32RegAddr"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32RegAddr) - 12usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32RegAddrByteNum"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32RegAddrByteNum) - 16usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32Data"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32Data) - 20usize];
    ["Offset of field: _ISP_SSP_DATA_S::u32DataByteNum"]
        [::std::mem::offset_of!(_ISP_SSP_DATA_S, u32DataByteNum) - 24usize];
};
pub type ISP_SSP_DATA_S = _ISP_SSP_DATA_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ISP_SNS_REGS_INFO_S {
    pub enSnsType: ISP_SNS_TYPE_E,
    pub u32RegNum: CVI_U32,
    pub u8Cfg2ValidDelayMax: CVI_U8,
    pub unComBus: ISP_SNS_COMMBUS_U,
    pub __bindgen_anon_1: _ISP_SNS_REGS_INFO_S__bindgen_ty_1,
    pub stSlvSync: _ISP_SNS_REGS_INFO_S__bindgen_ty_2,
    pub bConfig: CVI_BOOL,
    pub use_snsr_sram: CVI_U8,
    pub need_update: CVI_U8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ISP_SNS_REGS_INFO_S__bindgen_ty_1 {
    pub astI2cData: [ISP_I2C_DATA_S; 32usize],
    pub astSspData: [ISP_SSP_DATA_S; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_REGS_INFO_S__bindgen_ty_1"]
        [::std::mem::size_of::<_ISP_SNS_REGS_INFO_S__bindgen_ty_1>() - 896usize];
    ["Alignment of _ISP_SNS_REGS_INFO_S__bindgen_ty_1"]
        [::std::mem::align_of::<_ISP_SNS_REGS_INFO_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_1::astI2cData"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_1, astI2cData) - 0usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_1::astSspData"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_1, astSspData) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_REGS_INFO_S__bindgen_ty_2 {
    pub bUpdate: CVI_BOOL,
    pub u8DelayFrmNum: CVI_U8,
    pub u32SlaveVsTime: CVI_U32,
    pub u32SlaveBindDev: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_REGS_INFO_S__bindgen_ty_2"]
        [::std::mem::size_of::<_ISP_SNS_REGS_INFO_S__bindgen_ty_2>() - 12usize];
    ["Alignment of _ISP_SNS_REGS_INFO_S__bindgen_ty_2"]
        [::std::mem::align_of::<_ISP_SNS_REGS_INFO_S__bindgen_ty_2>() - 4usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_2::bUpdate"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_2, bUpdate) - 0usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_2::u8DelayFrmNum"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_2, u8DelayFrmNum) - 1usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_2::u32SlaveVsTime"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_2, u32SlaveVsTime) - 4usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S__bindgen_ty_2::u32SlaveBindDev"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S__bindgen_ty_2, u32SlaveBindDev) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_REGS_INFO_S"][::std::mem::size_of::<_ISP_SNS_REGS_INFO_S>() - 924usize];
    ["Alignment of _ISP_SNS_REGS_INFO_S"][::std::mem::align_of::<_ISP_SNS_REGS_INFO_S>() - 4usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::enSnsType"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, enSnsType) - 0usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::u32RegNum"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, u32RegNum) - 4usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::u8Cfg2ValidDelayMax"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, u8Cfg2ValidDelayMax) - 8usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::unComBus"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, unComBus) - 9usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::stSlvSync"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, stSlvSync) - 908usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::bConfig"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, bConfig) - 920usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::use_snsr_sram"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, use_snsr_sram) - 921usize];
    ["Offset of field: _ISP_SNS_REGS_INFO_S::need_update"]
        [::std::mem::offset_of!(_ISP_SNS_REGS_INFO_S, need_update) - 922usize];
};
pub type ISP_SNS_REGS_INFO_S = _ISP_SNS_REGS_INFO_S;
pub const _ISP_VD_TYPE_E_ISP_VD_FE_START: _ISP_VD_TYPE_E = 0;
pub const _ISP_VD_TYPE_E_ISP_VD_FE_END: _ISP_VD_TYPE_E = 1;
pub const _ISP_VD_TYPE_E_ISP_VD_BE_END: _ISP_VD_TYPE_E = 2;
pub const _ISP_VD_TYPE_E_ISP_VD_MAX: _ISP_VD_TYPE_E = 3;
pub type _ISP_VD_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_VD_TYPE_E as ISP_VD_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MANUAL_WDR_ATTR_S {
    pub devno: CVI_S32,
    pub manual_en: CVI_S32,
    pub l2s_distance: CVI_S16,
    pub lsef_length: CVI_S16,
    pub discard_padding_lines: CVI_S32,
    pub update: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MANUAL_WDR_ATTR_S"][::std::mem::size_of::<_ISP_MANUAL_WDR_ATTR_S>() - 20usize];
    ["Alignment of _ISP_MANUAL_WDR_ATTR_S"]
        [::std::mem::align_of::<_ISP_MANUAL_WDR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::devno"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, devno) - 0usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::manual_en"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, manual_en) - 4usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::l2s_distance"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, l2s_distance) - 8usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::lsef_length"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, lsef_length) - 10usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::discard_padding_lines"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, discard_padding_lines) - 12usize];
    ["Offset of field: _ISP_MANUAL_WDR_ATTR_S::update"]
        [::std::mem::offset_of!(_ISP_MANUAL_WDR_ATTR_S, update) - 16usize];
};
pub type ISP_MANUAL_WDR_ATTR_S = _ISP_MANUAL_WDR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_CIF_INFO_S {
    pub wdr_manual: ISP_MANUAL_WDR_ATTR_S,
    pub u8DelayFrmNum: CVI_U8,
    pub need_update: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_CIF_INFO_S"][::std::mem::size_of::<_ISP_SNS_CIF_INFO_S>() - 24usize];
    ["Alignment of _ISP_SNS_CIF_INFO_S"][::std::mem::align_of::<_ISP_SNS_CIF_INFO_S>() - 4usize];
    ["Offset of field: _ISP_SNS_CIF_INFO_S::wdr_manual"]
        [::std::mem::offset_of!(_ISP_SNS_CIF_INFO_S, wdr_manual) - 0usize];
    ["Offset of field: _ISP_SNS_CIF_INFO_S::u8DelayFrmNum"]
        [::std::mem::offset_of!(_ISP_SNS_CIF_INFO_S, u8DelayFrmNum) - 20usize];
    ["Offset of field: _ISP_SNS_CIF_INFO_S::need_update"]
        [::std::mem::offset_of!(_ISP_SNS_CIF_INFO_S, need_update) - 21usize];
};
pub type ISP_SNS_CIF_INFO_S = _ISP_SNS_CIF_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WDR_SIZE_S {
    pub stWndRect: RECT_S,
    pub stSnsSize: SIZE_S,
    pub stMaxSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WDR_SIZE_S"][::std::mem::size_of::<_ISP_WDR_SIZE_S>() - 32usize];
    ["Alignment of _ISP_WDR_SIZE_S"][::std::mem::align_of::<_ISP_WDR_SIZE_S>() - 4usize];
    ["Offset of field: _ISP_WDR_SIZE_S::stWndRect"]
        [::std::mem::offset_of!(_ISP_WDR_SIZE_S, stWndRect) - 0usize];
    ["Offset of field: _ISP_WDR_SIZE_S::stSnsSize"]
        [::std::mem::offset_of!(_ISP_WDR_SIZE_S, stSnsSize) - 16usize];
    ["Offset of field: _ISP_WDR_SIZE_S::stMaxSize"]
        [::std::mem::offset_of!(_ISP_WDR_SIZE_S, stMaxSize) - 24usize];
};
pub type ISP_WDR_SIZE_S = _ISP_WDR_SIZE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_ISP_INFO_S {
    pub frm_num: CVI_U32,
    pub img_size: [ISP_WDR_SIZE_S; 2usize],
    pub u8DelayFrmNum: CVI_U8,
    pub need_update: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_ISP_INFO_S"][::std::mem::size_of::<_ISP_SNS_ISP_INFO_S>() - 72usize];
    ["Alignment of _ISP_SNS_ISP_INFO_S"][::std::mem::align_of::<_ISP_SNS_ISP_INFO_S>() - 4usize];
    ["Offset of field: _ISP_SNS_ISP_INFO_S::frm_num"]
        [::std::mem::offset_of!(_ISP_SNS_ISP_INFO_S, frm_num) - 0usize];
    ["Offset of field: _ISP_SNS_ISP_INFO_S::img_size"]
        [::std::mem::offset_of!(_ISP_SNS_ISP_INFO_S, img_size) - 4usize];
    ["Offset of field: _ISP_SNS_ISP_INFO_S::u8DelayFrmNum"]
        [::std::mem::offset_of!(_ISP_SNS_ISP_INFO_S, u8DelayFrmNum) - 68usize];
    ["Offset of field: _ISP_SNS_ISP_INFO_S::need_update"]
        [::std::mem::offset_of!(_ISP_SNS_ISP_INFO_S, need_update) - 69usize];
};
pub type ISP_SNS_ISP_INFO_S = _ISP_SNS_ISP_INFO_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ISP_SNS_SYNC_INFO_S {
    pub snsCfg: ISP_SNS_REGS_INFO_S,
    pub ispCfg: ISP_SNS_ISP_INFO_S,
    pub cifCfg: ISP_SNS_CIF_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_SYNC_INFO_S"][::std::mem::size_of::<_ISP_SNS_SYNC_INFO_S>() - 1020usize];
    ["Alignment of _ISP_SNS_SYNC_INFO_S"][::std::mem::align_of::<_ISP_SNS_SYNC_INFO_S>() - 4usize];
    ["Offset of field: _ISP_SNS_SYNC_INFO_S::snsCfg"]
        [::std::mem::offset_of!(_ISP_SNS_SYNC_INFO_S, snsCfg) - 0usize];
    ["Offset of field: _ISP_SNS_SYNC_INFO_S::ispCfg"]
        [::std::mem::offset_of!(_ISP_SNS_SYNC_INFO_S, ispCfg) - 924usize];
    ["Offset of field: _ISP_SNS_SYNC_INFO_S::cifCfg"]
        [::std::mem::offset_of!(_ISP_SNS_SYNC_INFO_S, cifCfg) - 996usize];
};
pub type ISP_SNS_SYNC_INFO_S = _ISP_SNS_SYNC_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_PUB_ATTR_S {
    pub stWndRect: RECT_S,
    pub stSnsSize: SIZE_S,
    pub f32FrameRate: CVI_FLOAT,
    pub enBayer: ISP_BAYER_FORMAT_E,
    pub enWDRMode: WDR_MODE_E,
    pub u8SnsMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_PUB_ATTR_S"][::std::mem::size_of::<_ISP_PUB_ATTR_S>() - 40usize];
    ["Alignment of _ISP_PUB_ATTR_S"][::std::mem::align_of::<_ISP_PUB_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_PUB_ATTR_S::stWndRect"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, stWndRect) - 0usize];
    ["Offset of field: _ISP_PUB_ATTR_S::stSnsSize"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, stSnsSize) - 16usize];
    ["Offset of field: _ISP_PUB_ATTR_S::f32FrameRate"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, f32FrameRate) - 24usize];
    ["Offset of field: _ISP_PUB_ATTR_S::enBayer"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, enBayer) - 28usize];
    ["Offset of field: _ISP_PUB_ATTR_S::enWDRMode"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, enWDRMode) - 32usize];
    ["Offset of field: _ISP_PUB_ATTR_S::u8SnsMode"]
        [::std::mem::offset_of!(_ISP_PUB_ATTR_S, u8SnsMode) - 36usize];
};
pub type ISP_PUB_ATTR_S = _ISP_PUB_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CTRL_PARAM_S {
    pub u32AEStatIntvl: CVI_U32,
    pub u32AWBStatIntvl: CVI_U32,
    pub u32AFStatIntvl: CVI_U32,
    pub u32ProcParam: CVI_U32,
    pub u32ProcLevel: CVI_U32,
    pub u32UpdatePos: CVI_U32,
    pub u32IntTimeOut: CVI_U32,
    pub u32PwmNumber: CVI_U32,
    pub u32PortIntDelay: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CTRL_PARAM_S"][::std::mem::size_of::<_ISP_CTRL_PARAM_S>() - 36usize];
    ["Alignment of _ISP_CTRL_PARAM_S"][::std::mem::align_of::<_ISP_CTRL_PARAM_S>() - 4usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32AEStatIntvl"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32AEStatIntvl) - 0usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32AWBStatIntvl"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32AWBStatIntvl) - 4usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32AFStatIntvl"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32AFStatIntvl) - 8usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32ProcParam"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32ProcParam) - 12usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32ProcLevel"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32ProcLevel) - 16usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32UpdatePos"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32UpdatePos) - 20usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32IntTimeOut"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32IntTimeOut) - 24usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32PwmNumber"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32PwmNumber) - 28usize];
    ["Offset of field: _ISP_CTRL_PARAM_S::u32PortIntDelay"]
        [::std::mem::offset_of!(_ISP_CTRL_PARAM_S, u32PortIntDelay) - 32usize];
};
pub type ISP_CTRL_PARAM_S = _ISP_CTRL_PARAM_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ISP_MODULE_CTRL_U {
    pub u64Key: CVI_U64,
    pub __bindgen_anon_1: _ISP_MODULE_CTRL_U__bindgen_ty_1,
}
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MODULE_CTRL_U__bindgen_ty_1 {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MODULE_CTRL_U__bindgen_ty_1"]
        [::std::mem::size_of::<_ISP_MODULE_CTRL_U__bindgen_ty_1>() - 8usize];
    ["Alignment of _ISP_MODULE_CTRL_U__bindgen_ty_1"]
        [::std::mem::align_of::<_ISP_MODULE_CTRL_U__bindgen_ty_1>() - 8usize];
};
impl _ISP_MODULE_CTRL_U__bindgen_ty_1 {
    #[inline]
    pub fn bitBypassBlc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassBlc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassRlsc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassRlsc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassFpn(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassFpn(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDpc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDpc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCrosstalk(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCrosstalk(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassWBGain(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassWBGain(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDis(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDis(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassBnr(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassBnr(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDemosaic(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDemosaic(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassRgbcac(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassRgbcac(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassLcac(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassLcac(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassMlsc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassMlsc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCcm(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCcm(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassFusion(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassFusion(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDrc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDrc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassGamma(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassGamma(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDehaze(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDehaze(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassClut(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassClut(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCsc(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(18usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCsc(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(18usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassDci(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(19usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassDci(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(19usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassLdci(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassLdci(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCa(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCa(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassPreyee(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(22usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassPreyee(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(22usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassMotion(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassMotion(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypass3dnr(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypass3dnr(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassYnr(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(25usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassYnr(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(25usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCnr(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCnr(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCac(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCac(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassCa2(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(28usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassCa2(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassYee(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassYee(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassYcontrast(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassYcontrast(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitBypassMono(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bitBypassMono(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bitRsv(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 32u8) as u64) }
    }
    #[inline]
    pub fn set_bitRsv(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 32u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bitBypassBlc: CVI_U64,
        bitBypassRlsc: CVI_U64,
        bitBypassFpn: CVI_U64,
        bitBypassDpc: CVI_U64,
        bitBypassCrosstalk: CVI_U64,
        bitBypassWBGain: CVI_U64,
        bitBypassDis: CVI_U64,
        bitBypassBnr: CVI_U64,
        bitBypassDemosaic: CVI_U64,
        bitBypassRgbcac: CVI_U64,
        bitBypassLcac: CVI_U64,
        bitBypassMlsc: CVI_U64,
        bitBypassCcm: CVI_U64,
        bitBypassFusion: CVI_U64,
        bitBypassDrc: CVI_U64,
        bitBypassGamma: CVI_U64,
        bitBypassDehaze: CVI_U64,
        bitBypassClut: CVI_U64,
        bitBypassCsc: CVI_U64,
        bitBypassDci: CVI_U64,
        bitBypassLdci: CVI_U64,
        bitBypassCa: CVI_U64,
        bitBypassPreyee: CVI_U64,
        bitBypassMotion: CVI_U64,
        bitBypass3dnr: CVI_U64,
        bitBypassYnr: CVI_U64,
        bitBypassCnr: CVI_U64,
        bitBypassCac: CVI_U64,
        bitBypassCa2: CVI_U64,
        bitBypassYee: CVI_U64,
        bitBypassYcontrast: CVI_U64,
        bitBypassMono: CVI_U64,
        bitRsv: CVI_U64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bitBypassBlc: u64 = unsafe { ::std::mem::transmute(bitBypassBlc) };
            bitBypassBlc as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bitBypassRlsc: u64 = unsafe { ::std::mem::transmute(bitBypassRlsc) };
            bitBypassRlsc as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bitBypassFpn: u64 = unsafe { ::std::mem::transmute(bitBypassFpn) };
            bitBypassFpn as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bitBypassDpc: u64 = unsafe { ::std::mem::transmute(bitBypassDpc) };
            bitBypassDpc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bitBypassCrosstalk: u64 = unsafe { ::std::mem::transmute(bitBypassCrosstalk) };
            bitBypassCrosstalk as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let bitBypassWBGain: u64 = unsafe { ::std::mem::transmute(bitBypassWBGain) };
            bitBypassWBGain as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let bitBypassDis: u64 = unsafe { ::std::mem::transmute(bitBypassDis) };
            bitBypassDis as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let bitBypassBnr: u64 = unsafe { ::std::mem::transmute(bitBypassBnr) };
            bitBypassBnr as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let bitBypassDemosaic: u64 = unsafe { ::std::mem::transmute(bitBypassDemosaic) };
            bitBypassDemosaic as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let bitBypassRgbcac: u64 = unsafe { ::std::mem::transmute(bitBypassRgbcac) };
            bitBypassRgbcac as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let bitBypassLcac: u64 = unsafe { ::std::mem::transmute(bitBypassLcac) };
            bitBypassLcac as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let bitBypassMlsc: u64 = unsafe { ::std::mem::transmute(bitBypassMlsc) };
            bitBypassMlsc as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let bitBypassCcm: u64 = unsafe { ::std::mem::transmute(bitBypassCcm) };
            bitBypassCcm as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let bitBypassFusion: u64 = unsafe { ::std::mem::transmute(bitBypassFusion) };
            bitBypassFusion as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let bitBypassDrc: u64 = unsafe { ::std::mem::transmute(bitBypassDrc) };
            bitBypassDrc as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let bitBypassGamma: u64 = unsafe { ::std::mem::transmute(bitBypassGamma) };
            bitBypassGamma as u64
        });
        __bindgen_bitfield_unit.set(16usize, 1u8, {
            let bitBypassDehaze: u64 = unsafe { ::std::mem::transmute(bitBypassDehaze) };
            bitBypassDehaze as u64
        });
        __bindgen_bitfield_unit.set(17usize, 1u8, {
            let bitBypassClut: u64 = unsafe { ::std::mem::transmute(bitBypassClut) };
            bitBypassClut as u64
        });
        __bindgen_bitfield_unit.set(18usize, 1u8, {
            let bitBypassCsc: u64 = unsafe { ::std::mem::transmute(bitBypassCsc) };
            bitBypassCsc as u64
        });
        __bindgen_bitfield_unit.set(19usize, 1u8, {
            let bitBypassDci: u64 = unsafe { ::std::mem::transmute(bitBypassDci) };
            bitBypassDci as u64
        });
        __bindgen_bitfield_unit.set(20usize, 1u8, {
            let bitBypassLdci: u64 = unsafe { ::std::mem::transmute(bitBypassLdci) };
            bitBypassLdci as u64
        });
        __bindgen_bitfield_unit.set(21usize, 1u8, {
            let bitBypassCa: u64 = unsafe { ::std::mem::transmute(bitBypassCa) };
            bitBypassCa as u64
        });
        __bindgen_bitfield_unit.set(22usize, 1u8, {
            let bitBypassPreyee: u64 = unsafe { ::std::mem::transmute(bitBypassPreyee) };
            bitBypassPreyee as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let bitBypassMotion: u64 = unsafe { ::std::mem::transmute(bitBypassMotion) };
            bitBypassMotion as u64
        });
        __bindgen_bitfield_unit.set(24usize, 1u8, {
            let bitBypass3dnr: u64 = unsafe { ::std::mem::transmute(bitBypass3dnr) };
            bitBypass3dnr as u64
        });
        __bindgen_bitfield_unit.set(25usize, 1u8, {
            let bitBypassYnr: u64 = unsafe { ::std::mem::transmute(bitBypassYnr) };
            bitBypassYnr as u64
        });
        __bindgen_bitfield_unit.set(26usize, 1u8, {
            let bitBypassCnr: u64 = unsafe { ::std::mem::transmute(bitBypassCnr) };
            bitBypassCnr as u64
        });
        __bindgen_bitfield_unit.set(27usize, 1u8, {
            let bitBypassCac: u64 = unsafe { ::std::mem::transmute(bitBypassCac) };
            bitBypassCac as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let bitBypassCa2: u64 = unsafe { ::std::mem::transmute(bitBypassCa2) };
            bitBypassCa2 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 1u8, {
            let bitBypassYee: u64 = unsafe { ::std::mem::transmute(bitBypassYee) };
            bitBypassYee as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let bitBypassYcontrast: u64 = unsafe { ::std::mem::transmute(bitBypassYcontrast) };
            bitBypassYcontrast as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let bitBypassMono: u64 = unsafe { ::std::mem::transmute(bitBypassMono) };
            bitBypassMono as u64
        });
        __bindgen_bitfield_unit.set(32usize, 32u8, {
            let bitRsv: u64 = unsafe { ::std::mem::transmute(bitRsv) };
            bitRsv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MODULE_CTRL_U"][::std::mem::size_of::<_ISP_MODULE_CTRL_U>() - 8usize];
    ["Alignment of _ISP_MODULE_CTRL_U"][::std::mem::align_of::<_ISP_MODULE_CTRL_U>() - 8usize];
    ["Offset of field: _ISP_MODULE_CTRL_U::u64Key"]
        [::std::mem::offset_of!(_ISP_MODULE_CTRL_U, u64Key) - 0usize];
};
pub type ISP_MODULE_CTRL_U = _ISP_MODULE_CTRL_U;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _ISP_STATISTICS_CTRL_U {
    pub u64Key: CVI_U64,
    pub __bindgen_anon_1: _ISP_STATISTICS_CTRL_U__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_STATISTICS_CTRL_U__bindgen_ty_1 {
    pub _bitfield_align_1: [u64; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_STATISTICS_CTRL_U__bindgen_ty_1"]
        [::std::mem::size_of::<_ISP_STATISTICS_CTRL_U__bindgen_ty_1>() - 8usize];
    ["Alignment of _ISP_STATISTICS_CTRL_U__bindgen_ty_1"]
        [::std::mem::align_of::<_ISP_STATISTICS_CTRL_U__bindgen_ty_1>() - 8usize];
};
impl _ISP_STATISTICS_CTRL_U__bindgen_ty_1 {
    #[inline]
    pub fn bit1FEAeGloStat(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bit1FEAeGloStat(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1FEAeLocStat(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bit1FEAeLocStat(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1AwbStat1(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bit1AwbStat1(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1AwbStat2(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bit1AwbStat2(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit1FEAfStat(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_bit1FEAfStat(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bit14Rsv(&self) -> CVI_U64 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 59u8) as u64) }
    }
    #[inline]
    pub fn set_bit14Rsv(&mut self, val: CVI_U64) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 59u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bit1FEAeGloStat: CVI_U64,
        bit1FEAeLocStat: CVI_U64,
        bit1AwbStat1: CVI_U64,
        bit1AwbStat2: CVI_U64,
        bit1FEAfStat: CVI_U64,
        bit14Rsv: CVI_U64,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let bit1FEAeGloStat: u64 = unsafe { ::std::mem::transmute(bit1FEAeGloStat) };
            bit1FEAeGloStat as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let bit1FEAeLocStat: u64 = unsafe { ::std::mem::transmute(bit1FEAeLocStat) };
            bit1FEAeLocStat as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let bit1AwbStat1: u64 = unsafe { ::std::mem::transmute(bit1AwbStat1) };
            bit1AwbStat1 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let bit1AwbStat2: u64 = unsafe { ::std::mem::transmute(bit1AwbStat2) };
            bit1AwbStat2 as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let bit1FEAfStat: u64 = unsafe { ::std::mem::transmute(bit1FEAfStat) };
            bit1FEAfStat as u64
        });
        __bindgen_bitfield_unit.set(5usize, 59u8, {
            let bit14Rsv: u64 = unsafe { ::std::mem::transmute(bit14Rsv) };
            bit14Rsv as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_STATISTICS_CTRL_U"][::std::mem::size_of::<_ISP_STATISTICS_CTRL_U>() - 8usize];
    ["Alignment of _ISP_STATISTICS_CTRL_U"]
        [::std::mem::align_of::<_ISP_STATISTICS_CTRL_U>() - 8usize];
    ["Offset of field: _ISP_STATISTICS_CTRL_U::u64Key"]
        [::std::mem::offset_of!(_ISP_STATISTICS_CTRL_U, u64Key) - 0usize];
};
pub type ISP_STATISTICS_CTRL_U = _ISP_STATISTICS_CTRL_U;
pub const _ISP_AE_STAT_MODE_E_ISP_AE_MODE_BUTT: _ISP_AE_STAT_MODE_E = 0;
pub type _ISP_AE_STAT_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_STAT_MODE_E as ISP_AE_STAT_MODE_E;
pub const _ISP_AE_SWITCH_E_ISP_AE_SWITCH_BUTT: _ISP_AE_SWITCH_E = 0;
pub type _ISP_AE_SWITCH_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_SWITCH_E as ISP_AE_SWITCH_E;
pub const _ISP_AE_FOUR_PLANE_MODE_E_ISP_AE_FOUR_PLANE_MODE_BUTT: _ISP_AE_FOUR_PLANE_MODE_E = 0;
pub type _ISP_AE_FOUR_PLANE_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_FOUR_PLANE_MODE_E as ISP_AE_FOUR_PLANE_MODE_E;
pub const _ISP_AE_HIST_SKIP_E_ISP_AE_HIST_SKIP_BUTT: _ISP_AE_HIST_SKIP_E = 0;
pub type _ISP_AE_HIST_SKIP_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_HIST_SKIP_E as ISP_AE_HIST_SKIP_E;
pub const _ISP_AE_HIST_OFFSET_X_E_ISP_AE_HIST_OFFSET_X_BUTT: _ISP_AE_HIST_OFFSET_X_E = 0;
pub type _ISP_AE_HIST_OFFSET_X_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_HIST_OFFSET_X_E as ISP_AE_HIST_OFFSET_X_E;
pub const _ISP_AE_HIST_OFFSET_Y_E_ISP_AE_HIST_OFFSET_Y_BUTT: _ISP_AE_HIST_OFFSET_Y_E = 0;
pub type _ISP_AE_HIST_OFFSET_Y_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_HIST_OFFSET_Y_E as ISP_AE_HIST_OFFSET_Y_E;
pub const _ISP_AE_ANTIFLICKER_FREQUENCE_E_AE_FREQUENCE_60HZ: _ISP_AE_ANTIFLICKER_FREQUENCE_E = 0;
pub const _ISP_AE_ANTIFLICKER_FREQUENCE_E_AE_FREQUENCE_50HZ: _ISP_AE_ANTIFLICKER_FREQUENCE_E = 1;
pub type _ISP_AE_ANTIFLICKER_FREQUENCE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_ANTIFLICKER_FREQUENCE_E as ISP_AE_ANTIFLICKER_FREQUENCE_E;
pub const _ISP_AE_METER_MODE_E_AE_METER_MULTI: _ISP_AE_METER_MODE_E = 0;
pub const _ISP_AE_METER_MODE_E_AE_METER_AVERAGE: _ISP_AE_METER_MODE_E = 1;
pub const _ISP_AE_METER_MODE_E_AE_METER_HIGHLIGHT_PRIORITY: _ISP_AE_METER_MODE_E = 2;
pub const _ISP_AE_METER_MODE_E_AE_METER_FISHEYE: _ISP_AE_METER_MODE_E = 3;
pub type _ISP_AE_METER_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_METER_MODE_E as ISP_AE_METER_MODE_E;
pub const _ISP_AE_IR_CUT_FORCE_STATUS_AE_IR_CUT_FORCE_AUTO: _ISP_AE_IR_CUT_FORCE_STATUS = 0;
pub const _ISP_AE_IR_CUT_FORCE_STATUS_AE_IR_CUT_FORCE_ON: _ISP_AE_IR_CUT_FORCE_STATUS = 1;
pub const _ISP_AE_IR_CUT_FORCE_STATUS_AE_IR_CUT_FORCE_OFF: _ISP_AE_IR_CUT_FORCE_STATUS = 2;
pub type _ISP_AE_IR_CUT_FORCE_STATUS = ::std::os::raw::c_uint;
pub use self::_ISP_AE_IR_CUT_FORCE_STATUS as ISP_AE_IR_CUT_FORCE_STATUS;
pub const _ISP_AE_GAIN_TYPE_E_AE_TYPE_GAIN: _ISP_AE_GAIN_TYPE_E = 0;
pub const _ISP_AE_GAIN_TYPE_E_AE_TYPE_ISO: _ISP_AE_GAIN_TYPE_E = 1;
pub const _ISP_AE_GAIN_TYPE_E_AE_TYPE_BUTT: _ISP_AE_GAIN_TYPE_E = 2;
pub type _ISP_AE_GAIN_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_GAIN_TYPE_E as ISP_AE_GAIN_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_HIST_CONFIG_S {
    pub enHistSkipX: ISP_AE_HIST_SKIP_E,
    pub enHistSkipY: ISP_AE_HIST_SKIP_E,
    pub enHistOffsetX: ISP_AE_HIST_OFFSET_X_E,
    pub enHistOffsetY: ISP_AE_HIST_OFFSET_Y_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_HIST_CONFIG_S"][::std::mem::size_of::<_ISP_AE_HIST_CONFIG_S>() - 16usize];
    ["Alignment of _ISP_AE_HIST_CONFIG_S"]
        [::std::mem::align_of::<_ISP_AE_HIST_CONFIG_S>() - 4usize];
    ["Offset of field: _ISP_AE_HIST_CONFIG_S::enHistSkipX"]
        [::std::mem::offset_of!(_ISP_AE_HIST_CONFIG_S, enHistSkipX) - 0usize];
    ["Offset of field: _ISP_AE_HIST_CONFIG_S::enHistSkipY"]
        [::std::mem::offset_of!(_ISP_AE_HIST_CONFIG_S, enHistSkipY) - 4usize];
    ["Offset of field: _ISP_AE_HIST_CONFIG_S::enHistOffsetX"]
        [::std::mem::offset_of!(_ISP_AE_HIST_CONFIG_S, enHistOffsetX) - 8usize];
    ["Offset of field: _ISP_AE_HIST_CONFIG_S::enHistOffsetY"]
        [::std::mem::offset_of!(_ISP_AE_HIST_CONFIG_S, enHistOffsetY) - 12usize];
};
pub type ISP_AE_HIST_CONFIG_S = _ISP_AE_HIST_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_3AWIN_CONFIG_S {
    pub winWidth: CVI_U16,
    pub winHeight: CVI_U16,
    pub winXOffset: CVI_U16,
    pub winYOffset: CVI_U16,
    pub winXNum: CVI_U8,
    pub winYNum: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_3AWIN_CONFIG_S"][::std::mem::size_of::<_ISP_3AWIN_CONFIG_S>() - 10usize];
    ["Alignment of _ISP_3AWIN_CONFIG_S"][::std::mem::align_of::<_ISP_3AWIN_CONFIG_S>() - 2usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winWidth"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winWidth) - 0usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winHeight"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winHeight) - 2usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winXOffset"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winXOffset) - 4usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winYOffset"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winYOffset) - 6usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winXNum"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winXNum) - 8usize];
    ["Offset of field: _ISP_3AWIN_CONFIG_S::winYNum"]
        [::std::mem::offset_of!(_ISP_3AWIN_CONFIG_S, winYNum) - 9usize];
};
pub type ISP_3AWIN_CONFIG_S = _ISP_3AWIN_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_CROP_S {
    pub bEnable: CVI_BOOL,
    pub u16X: CVI_U16,
    pub u16Y: CVI_U16,
    pub u16W: CVI_U16,
    pub u16H: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_CROP_S"][::std::mem::size_of::<_ISP_AE_CROP_S>() - 10usize];
    ["Alignment of _ISP_AE_CROP_S"][::std::mem::align_of::<_ISP_AE_CROP_S>() - 2usize];
    ["Offset of field: _ISP_AE_CROP_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AE_CROP_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AE_CROP_S::u16X"]
        [::std::mem::offset_of!(_ISP_AE_CROP_S, u16X) - 2usize];
    ["Offset of field: _ISP_AE_CROP_S::u16Y"]
        [::std::mem::offset_of!(_ISP_AE_CROP_S, u16Y) - 4usize];
    ["Offset of field: _ISP_AE_CROP_S::u16W"]
        [::std::mem::offset_of!(_ISP_AE_CROP_S, u16W) - 6usize];
    ["Offset of field: _ISP_AE_CROP_S::u16H"]
        [::std::mem::offset_of!(_ISP_AE_CROP_S, u16H) - 8usize];
};
pub type ISP_AE_CROP_S = _ISP_AE_CROP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_FACE_CROP_S {
    pub bEnable: CVI_BOOL,
    pub u16X: CVI_U16,
    pub u16Y: CVI_U16,
    pub u16W: CVI_U8,
    pub u16H: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_FACE_CROP_S"][::std::mem::size_of::<_ISP_AE_FACE_CROP_S>() - 8usize];
    ["Alignment of _ISP_AE_FACE_CROP_S"][::std::mem::align_of::<_ISP_AE_FACE_CROP_S>() - 2usize];
    ["Offset of field: _ISP_AE_FACE_CROP_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AE_FACE_CROP_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AE_FACE_CROP_S::u16X"]
        [::std::mem::offset_of!(_ISP_AE_FACE_CROP_S, u16X) - 2usize];
    ["Offset of field: _ISP_AE_FACE_CROP_S::u16Y"]
        [::std::mem::offset_of!(_ISP_AE_FACE_CROP_S, u16Y) - 4usize];
    ["Offset of field: _ISP_AE_FACE_CROP_S::u16W"]
        [::std::mem::offset_of!(_ISP_AE_FACE_CROP_S, u16W) - 6usize];
    ["Offset of field: _ISP_AE_FACE_CROP_S::u16H"]
        [::std::mem::offset_of!(_ISP_AE_FACE_CROP_S, u16H) - 7usize];
};
pub type ISP_AE_FACE_CROP_S = _ISP_AE_FACE_CROP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_STATISTICS_CFG_S {
    pub bHisStatisticsEnable: CVI_BOOL,
    pub stCrop: [ISP_AE_CROP_S; 1usize],
    pub stFaceCrop: [ISP_AE_FACE_CROP_S; 4usize],
    pub fast2A_ena: CVI_BOOL,
    pub fast2A_ae_low: CVI_U8,
    pub fast2A_ae_high: CVI_U8,
    pub fast2A_awb_top: CVI_U16,
    pub fast2A_awb_bot: CVI_U16,
    pub over_exp_thr: CVI_U16,
    pub au8Weight: [[CVI_U8; 17usize]; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_STATISTICS_CFG_S"]
        [::std::mem::size_of::<_ISP_AE_STATISTICS_CFG_S>() - 310usize];
    ["Alignment of _ISP_AE_STATISTICS_CFG_S"]
        [::std::mem::align_of::<_ISP_AE_STATISTICS_CFG_S>() - 2usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::bHisStatisticsEnable"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, bHisStatisticsEnable) - 0usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::stCrop"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, stCrop) - 2usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::stFaceCrop"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, stFaceCrop) - 12usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::fast2A_ena"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, fast2A_ena) - 44usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::fast2A_ae_low"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, fast2A_ae_low) - 45usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::fast2A_ae_high"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, fast2A_ae_high) - 46usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::fast2A_awb_top"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, fast2A_awb_top) - 48usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::fast2A_awb_bot"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, fast2A_awb_bot) - 50usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::over_exp_thr"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, over_exp_thr) - 52usize];
    ["Offset of field: _ISP_AE_STATISTICS_CFG_S::au8Weight"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_CFG_S, au8Weight) - 54usize];
};
pub type ISP_AE_STATISTICS_CFG_S = _ISP_AE_STATISTICS_CFG_S;
pub const _ISP_IRIS_TYPE_E_ISP_IRIS_DC_TYPE: _ISP_IRIS_TYPE_E = 0;
pub const _ISP_IRIS_TYPE_E_ISP_IRIS_P_TYPE: _ISP_IRIS_TYPE_E = 1;
pub const _ISP_IRIS_TYPE_E_ISP_IRIS_TYPE_BUTT: _ISP_IRIS_TYPE_E = 2;
pub type _ISP_IRIS_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_IRIS_TYPE_E as ISP_IRIS_TYPE_E;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_32_0: _ISP_IRIS_F_NO_E = 0;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_22_0: _ISP_IRIS_F_NO_E = 1;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_16_0: _ISP_IRIS_F_NO_E = 2;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_11_0: _ISP_IRIS_F_NO_E = 3;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_8_0: _ISP_IRIS_F_NO_E = 4;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_5_6: _ISP_IRIS_F_NO_E = 5;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_4_0: _ISP_IRIS_F_NO_E = 6;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_2_8: _ISP_IRIS_F_NO_E = 7;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_2_0: _ISP_IRIS_F_NO_E = 8;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_1_4: _ISP_IRIS_F_NO_E = 9;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_1_0: _ISP_IRIS_F_NO_E = 10;
pub const _ISP_IRIS_F_NO_E_ISP_IRIS_F_NO_BUTT: _ISP_IRIS_F_NO_E = 11;
pub type _ISP_IRIS_F_NO_E = ::std::os::raw::c_uint;
pub use self::_ISP_IRIS_F_NO_E as ISP_IRIS_F_NO_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCIRIS_ATTR_S {
    pub s32Kp: CVI_S32,
    pub s32Ki: CVI_S32,
    pub s32Kd: CVI_S32,
    pub u32MinPwmDuty: CVI_U32,
    pub u32MaxPwmDuty: CVI_U32,
    pub u32OpenPwmDuty: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCIRIS_ATTR_S"][::std::mem::size_of::<_ISP_DCIRIS_ATTR_S>() - 24usize];
    ["Alignment of _ISP_DCIRIS_ATTR_S"][::std::mem::align_of::<_ISP_DCIRIS_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::s32Kp"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, s32Kp) - 0usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::s32Ki"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, s32Ki) - 4usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::s32Kd"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, s32Kd) - 8usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::u32MinPwmDuty"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, u32MinPwmDuty) - 12usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::u32MaxPwmDuty"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, u32MaxPwmDuty) - 16usize];
    ["Offset of field: _ISP_DCIRIS_ATTR_S::u32OpenPwmDuty"]
        [::std::mem::offset_of!(_ISP_DCIRIS_ATTR_S, u32OpenPwmDuty) - 20usize];
};
pub type ISP_DCIRIS_ATTR_S = _ISP_DCIRIS_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_PIRIS_ATTR_S {
    pub bStepFNOTableChange: CVI_BOOL,
    pub bZeroIsMax: CVI_BOOL,
    pub u16TotalStep: CVI_U16,
    pub u16StepCount: CVI_U16,
    pub au16StepFNOTable: [CVI_U16; 1024usize],
    pub enMaxIrisFNOTarget: ISP_IRIS_F_NO_E,
    pub enMinIrisFNOTarget: ISP_IRIS_F_NO_E,
    pub bFNOExValid: CVI_BOOL,
    pub u32MaxIrisFNOTarget: CVI_U32,
    pub u32MinIrisFNOTarget: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_PIRIS_ATTR_S"][::std::mem::size_of::<_ISP_PIRIS_ATTR_S>() - 2076usize];
    ["Alignment of _ISP_PIRIS_ATTR_S"][::std::mem::align_of::<_ISP_PIRIS_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::bStepFNOTableChange"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, bStepFNOTableChange) - 0usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::bZeroIsMax"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, bZeroIsMax) - 1usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::u16TotalStep"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, u16TotalStep) - 2usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::u16StepCount"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, u16StepCount) - 4usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::au16StepFNOTable"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, au16StepFNOTable) - 6usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::enMaxIrisFNOTarget"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, enMaxIrisFNOTarget) - 2056usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::enMinIrisFNOTarget"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, enMinIrisFNOTarget) - 2060usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::bFNOExValid"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, bFNOExValid) - 2064usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::u32MaxIrisFNOTarget"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, u32MaxIrisFNOTarget) - 2068usize];
    ["Offset of field: _ISP_PIRIS_ATTR_S::u32MinIrisFNOTarget"]
        [::std::mem::offset_of!(_ISP_PIRIS_ATTR_S, u32MinIrisFNOTarget) - 2072usize];
};
pub type ISP_PIRIS_ATTR_S = _ISP_PIRIS_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MI_ATTR_S {
    pub u32HoldValue: CVI_U32,
    pub enIrisFNO: ISP_IRIS_F_NO_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MI_ATTR_S"][::std::mem::size_of::<_ISP_MI_ATTR_S>() - 8usize];
    ["Alignment of _ISP_MI_ATTR_S"][::std::mem::align_of::<_ISP_MI_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_MI_ATTR_S::u32HoldValue"]
        [::std::mem::offset_of!(_ISP_MI_ATTR_S, u32HoldValue) - 0usize];
    ["Offset of field: _ISP_MI_ATTR_S::enIrisFNO"]
        [::std::mem::offset_of!(_ISP_MI_ATTR_S, enIrisFNO) - 4usize];
};
pub type ISP_MI_ATTR_S = _ISP_MI_ATTR_S;
pub const _ISP_IRIS_STATUS_E_ISP_IRIS_KEEP: _ISP_IRIS_STATUS_E = 0;
pub const _ISP_IRIS_STATUS_E_ISP_IRIS_OPEN: _ISP_IRIS_STATUS_E = 1;
pub const _ISP_IRIS_STATUS_E_ISP_IRIS_CLOSE: _ISP_IRIS_STATUS_E = 2;
pub const _ISP_IRIS_STATUS_E_ISP_IRIS_BUTT: _ISP_IRIS_STATUS_E = 3;
pub type _ISP_IRIS_STATUS_E = ::std::os::raw::c_uint;
pub use self::_ISP_IRIS_STATUS_E as ISP_IRIS_STATUS_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_IRIS_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub enIrisType: ISP_IRIS_TYPE_E,
    pub enIrisStatus: ISP_IRIS_STATUS_E,
    pub stMIAttr: ISP_MI_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_IRIS_ATTR_S"][::std::mem::size_of::<_ISP_IRIS_ATTR_S>() - 24usize];
    ["Alignment of _ISP_IRIS_ATTR_S"][::std::mem::align_of::<_ISP_IRIS_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_IRIS_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_IRIS_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_IRIS_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_IRIS_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_IRIS_ATTR_S::enIrisType"]
        [::std::mem::offset_of!(_ISP_IRIS_ATTR_S, enIrisType) - 8usize];
    ["Offset of field: _ISP_IRIS_ATTR_S::enIrisStatus"]
        [::std::mem::offset_of!(_ISP_IRIS_ATTR_S, enIrisStatus) - 12usize];
    ["Offset of field: _ISP_IRIS_ATTR_S::stMIAttr"]
        [::std::mem::offset_of!(_ISP_IRIS_ATTR_S, stMIAttr) - 16usize];
};
pub type ISP_IRIS_ATTR_S = _ISP_IRIS_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_ROUTE_NODE_S {
    pub u32IntTime: CVI_U32,
    pub u32SysGain: CVI_U32,
    pub enIrisFNO: ISP_IRIS_F_NO_E,
    pub u32IrisFNOLin: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_ROUTE_NODE_S"][::std::mem::size_of::<_ISP_AE_ROUTE_NODE_S>() - 16usize];
    ["Alignment of _ISP_AE_ROUTE_NODE_S"][::std::mem::align_of::<_ISP_AE_ROUTE_NODE_S>() - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_NODE_S::u32IntTime"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_NODE_S, u32IntTime) - 0usize];
    ["Offset of field: _ISP_AE_ROUTE_NODE_S::u32SysGain"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_NODE_S, u32SysGain) - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_NODE_S::enIrisFNO"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_NODE_S, enIrisFNO) - 8usize];
    ["Offset of field: _ISP_AE_ROUTE_NODE_S::u32IrisFNOLin"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_NODE_S, u32IrisFNOLin) - 12usize];
};
pub type ISP_AE_ROUTE_NODE_S = _ISP_AE_ROUTE_NODE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_ROUTE_S {
    pub u32TotalNum: CVI_U32,
    pub astRouteNode: [ISP_AE_ROUTE_NODE_S; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_ROUTE_S"][::std::mem::size_of::<_ISP_AE_ROUTE_S>() - 260usize];
    ["Alignment of _ISP_AE_ROUTE_S"][::std::mem::align_of::<_ISP_AE_ROUTE_S>() - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_S::u32TotalNum"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_S, u32TotalNum) - 0usize];
    ["Offset of field: _ISP_AE_ROUTE_S::astRouteNode"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_S, astRouteNode) - 4usize];
};
pub type ISP_AE_ROUTE_S = _ISP_AE_ROUTE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_ROUTE_EX_NODE_S {
    pub u32IntTime: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub enIrisFNO: ISP_IRIS_F_NO_E,
    pub u32IrisFNOLin: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_ROUTE_EX_NODE_S"][::std::mem::size_of::<_ISP_AE_ROUTE_EX_NODE_S>() - 24usize];
    ["Alignment of _ISP_AE_ROUTE_EX_NODE_S"]
        [::std::mem::align_of::<_ISP_AE_ROUTE_EX_NODE_S>() - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::u32IntTime"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, u32IntTime) - 0usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::u32Again"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, u32Again) - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, u32Dgain) - 8usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, u32IspDgain) - 12usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::enIrisFNO"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, enIrisFNO) - 16usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_NODE_S::u32IrisFNOLin"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_NODE_S, u32IrisFNOLin) - 20usize];
};
pub type ISP_AE_ROUTE_EX_NODE_S = _ISP_AE_ROUTE_EX_NODE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_ROUTE_EX_S {
    pub u32TotalNum: CVI_U32,
    pub astRouteExNode: [ISP_AE_ROUTE_EX_NODE_S; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_ROUTE_EX_S"][::std::mem::size_of::<_ISP_AE_ROUTE_EX_S>() - 388usize];
    ["Alignment of _ISP_AE_ROUTE_EX_S"][::std::mem::align_of::<_ISP_AE_ROUTE_EX_S>() - 4usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_S::u32TotalNum"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_S, u32TotalNum) - 0usize];
    ["Offset of field: _ISP_AE_ROUTE_EX_S::astRouteExNode"]
        [::std::mem::offset_of!(_ISP_AE_ROUTE_EX_S, astRouteExNode) - 4usize];
};
pub type ISP_AE_ROUTE_EX_S = _ISP_AE_ROUTE_EX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_EXP_INFO_S {
    pub u32ExpTime: CVI_U32,
    pub u32ShortExpTime: CVI_U32,
    pub u32MedianExpTime: CVI_U32,
    pub u32LongExpTime: CVI_U32,
    pub u32AGain: CVI_U32,
    pub u32DGain: CVI_U32,
    pub u32ISPDGain: CVI_U32,
    pub u32Exposure: CVI_U32,
    pub bExposureIsMAX: CVI_BOOL,
    pub s16HistError: CVI_S16,
    pub au32AE_Hist256Value: [CVI_U32; 256usize],
    pub u8AveLum: CVI_U8,
    pub u32LinesPer500ms: CVI_U32,
    pub u32PirisFNO: CVI_U32,
    pub u32Fps: CVI_U32,
    pub u32ISO: CVI_U32,
    pub u32ISOCalibrate: CVI_U32,
    pub u32RefExpRatio: CVI_U32,
    pub u32FirstStableTime: CVI_U32,
    pub stAERoute: ISP_AE_ROUTE_S,
    pub stAERouteEx: ISP_AE_ROUTE_EX_S,
    pub u8WDRShortAveLuma: CVI_U8,
    pub u32WDRExpRatio: CVI_U32,
    pub u8LEFrameAvgLuma: CVI_U8,
    pub u8SEFrameAvgLuma: CVI_U8,
    pub fLightValue: CVI_FLOAT,
    pub u32AGainSF: CVI_U32,
    pub u32DGainSF: CVI_U32,
    pub u32ISPDGainSF: CVI_U32,
    pub u32ISOSF: CVI_U32,
    pub stAERouteSF: ISP_AE_ROUTE_S,
    pub stAERouteSFEx: ISP_AE_ROUTE_EX_S,
    pub bGainSepStatus: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_EXP_INFO_S"][::std::mem::size_of::<_ISP_EXP_INFO_S>() - 2424usize];
    ["Alignment of _ISP_EXP_INFO_S"][::std::mem::align_of::<_ISP_EXP_INFO_S>() - 4usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ExpTime"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ExpTime) - 0usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ShortExpTime"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ShortExpTime) - 4usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32MedianExpTime"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32MedianExpTime) - 8usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32LongExpTime"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32LongExpTime) - 12usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32AGain"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32AGain) - 16usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32DGain"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32DGain) - 20usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ISPDGain"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ISPDGain) - 24usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32Exposure"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32Exposure) - 28usize];
    ["Offset of field: _ISP_EXP_INFO_S::bExposureIsMAX"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, bExposureIsMAX) - 32usize];
    ["Offset of field: _ISP_EXP_INFO_S::s16HistError"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, s16HistError) - 34usize];
    ["Offset of field: _ISP_EXP_INFO_S::au32AE_Hist256Value"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, au32AE_Hist256Value) - 36usize];
    ["Offset of field: _ISP_EXP_INFO_S::u8AveLum"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u8AveLum) - 1060usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32LinesPer500ms"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32LinesPer500ms) - 1064usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32PirisFNO"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32PirisFNO) - 1068usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32Fps"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32Fps) - 1072usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ISO) - 1076usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ISOCalibrate"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ISOCalibrate) - 1080usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32RefExpRatio"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32RefExpRatio) - 1084usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32FirstStableTime"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32FirstStableTime) - 1088usize];
    ["Offset of field: _ISP_EXP_INFO_S::stAERoute"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, stAERoute) - 1092usize];
    ["Offset of field: _ISP_EXP_INFO_S::stAERouteEx"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, stAERouteEx) - 1352usize];
    ["Offset of field: _ISP_EXP_INFO_S::u8WDRShortAveLuma"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u8WDRShortAveLuma) - 1740usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32WDRExpRatio"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32WDRExpRatio) - 1744usize];
    ["Offset of field: _ISP_EXP_INFO_S::u8LEFrameAvgLuma"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u8LEFrameAvgLuma) - 1748usize];
    ["Offset of field: _ISP_EXP_INFO_S::u8SEFrameAvgLuma"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u8SEFrameAvgLuma) - 1749usize];
    ["Offset of field: _ISP_EXP_INFO_S::fLightValue"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, fLightValue) - 1752usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32AGainSF"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32AGainSF) - 1756usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32DGainSF"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32DGainSF) - 1760usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ISPDGainSF"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ISPDGainSF) - 1764usize];
    ["Offset of field: _ISP_EXP_INFO_S::u32ISOSF"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, u32ISOSF) - 1768usize];
    ["Offset of field: _ISP_EXP_INFO_S::stAERouteSF"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, stAERouteSF) - 1772usize];
    ["Offset of field: _ISP_EXP_INFO_S::stAERouteSFEx"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, stAERouteSFEx) - 2032usize];
    ["Offset of field: _ISP_EXP_INFO_S::bGainSepStatus"]
        [::std::mem::offset_of!(_ISP_EXP_INFO_S, bGainSepStatus) - 2420usize];
};
pub type ISP_EXP_INFO_S = _ISP_EXP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SMART_ROI_S {
    pub bEnable: CVI_BOOL,
    pub bAvailable: CVI_BOOL,
    pub u8Luma: CVI_U8,
    pub u8Num: CVI_U8,
    pub u16PosX: [CVI_U16; 3usize],
    pub u16PosY: [CVI_U16; 3usize],
    pub u16Width: [CVI_U16; 3usize],
    pub u16Height: [CVI_U16; 3usize],
    pub u16FrameWidth: CVI_U16,
    pub u16FrameHeight: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SMART_ROI_S"][::std::mem::size_of::<_ISP_SMART_ROI_S>() - 32usize];
    ["Alignment of _ISP_SMART_ROI_S"][::std::mem::align_of::<_ISP_SMART_ROI_S>() - 2usize];
    ["Offset of field: _ISP_SMART_ROI_S::bEnable"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, bEnable) - 0usize];
    ["Offset of field: _ISP_SMART_ROI_S::bAvailable"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, bAvailable) - 1usize];
    ["Offset of field: _ISP_SMART_ROI_S::u8Luma"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u8Luma) - 2usize];
    ["Offset of field: _ISP_SMART_ROI_S::u8Num"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u8Num) - 3usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16PosX"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16PosX) - 4usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16PosY"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16PosY) - 10usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16Width"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16Width) - 16usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16Height"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16Height) - 22usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16FrameWidth"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16FrameWidth) - 28usize];
    ["Offset of field: _ISP_SMART_ROI_S::u16FrameHeight"]
        [::std::mem::offset_of!(_ISP_SMART_ROI_S, u16FrameHeight) - 30usize];
};
pub type ISP_SMART_ROI_S = _ISP_SMART_ROI_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SMART_INFO_S {
    pub stROI: [ISP_SMART_ROI_S; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SMART_INFO_S"][::std::mem::size_of::<_ISP_SMART_INFO_S>() - 64usize];
    ["Alignment of _ISP_SMART_INFO_S"][::std::mem::align_of::<_ISP_SMART_INFO_S>() - 2usize];
    ["Offset of field: _ISP_SMART_INFO_S::stROI"]
        [::std::mem::offset_of!(_ISP_SMART_INFO_S, stROI) - 0usize];
};
pub type ISP_SMART_INFO_S = _ISP_SMART_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WDR_EXPOSURE_ATTR_S {
    pub enExpRatioType: ISP_OP_TYPE_E,
    pub au32ExpRatio: [CVI_U32; 3usize],
    pub u32ExpRatioMax: CVI_U32,
    pub u32ExpRatioMin: CVI_U32,
    pub u16Tolerance: CVI_U16,
    pub u16Speed: CVI_U16,
    pub u16RatioBias: CVI_U16,
    pub u8SECompensation: CVI_U8,
    pub u16SEHisThr: CVI_U16,
    pub u16SEHisCntRatio1: CVI_U16,
    pub u16SEHisCntRatio2: CVI_U16,
    pub u16SEHis255CntThr1: CVI_U16,
    pub u16SEHis255CntThr2: CVI_U16,
    pub au8LEAdjustTargetMin: [CVI_U8; 21usize],
    pub au8LEAdjustTargetMax: [CVI_U8; 21usize],
    pub au8SEAdjustTargetMin: [CVI_U8; 21usize],
    pub au8SEAdjustTargetMax: [CVI_U8; 21usize],
    pub u8AdjustTargetDetectFrmNum: CVI_U8,
    pub u32DiffPixelNum: CVI_U32,
    pub u16LELowBinThr: CVI_U16,
    pub u16LEHighBinThr: CVI_U16,
    pub u16SELowBinThr: CVI_U16,
    pub u16SEHighBinThr: CVI_U16,
    pub au8FrameAvgLumaMin: [CVI_U8; 21usize],
    pub au8FrameAvgLumaMax: [CVI_U8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WDR_EXPOSURE_ATTR_S"]
        [::std::mem::size_of::<_ISP_WDR_EXPOSURE_ATTR_S>() - 184usize];
    ["Alignment of _ISP_WDR_EXPOSURE_ATTR_S"]
        [::std::mem::align_of::<_ISP_WDR_EXPOSURE_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::enExpRatioType"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, enExpRatioType) - 0usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au32ExpRatio"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au32ExpRatio) - 4usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u32ExpRatioMax"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u32ExpRatioMax) - 16usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u32ExpRatioMin"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u32ExpRatioMin) - 20usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16Tolerance"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16Tolerance) - 24usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16Speed"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16Speed) - 26usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16RatioBias"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16RatioBias) - 28usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u8SECompensation"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u8SECompensation) - 30usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHisThr"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHisThr) - 32usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHisCntRatio1"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHisCntRatio1) - 34usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHisCntRatio2"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHisCntRatio2) - 36usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHis255CntThr1"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHis255CntThr1) - 38usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHis255CntThr2"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHis255CntThr2) - 40usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8LEAdjustTargetMin"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8LEAdjustTargetMin) - 42usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8LEAdjustTargetMax"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8LEAdjustTargetMax) - 63usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8SEAdjustTargetMin"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8SEAdjustTargetMin) - 84usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8SEAdjustTargetMax"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8SEAdjustTargetMax) - 105usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u8AdjustTargetDetectFrmNum"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u8AdjustTargetDetectFrmNum) - 126usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u32DiffPixelNum"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u32DiffPixelNum) - 128usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16LELowBinThr"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16LELowBinThr) - 132usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16LEHighBinThr"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16LEHighBinThr) - 134usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SELowBinThr"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SELowBinThr) - 136usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::u16SEHighBinThr"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, u16SEHighBinThr) - 138usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8FrameAvgLumaMin"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8FrameAvgLumaMin) - 140usize];
    ["Offset of field: _ISP_WDR_EXPOSURE_ATTR_S::au8FrameAvgLumaMax"]
        [::std::mem::offset_of!(_ISP_WDR_EXPOSURE_ATTR_S, au8FrameAvgLumaMax) - 161usize];
};
pub type ISP_WDR_EXPOSURE_ATTR_S = _ISP_WDR_EXPOSURE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SMART_EXPOSURE_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub bIRMode: CVI_BOOL,
    pub enSmartExpType: ISP_OP_TYPE_E,
    pub u8LumaTarget: CVI_U8,
    pub u16ExpCoef: CVI_U16,
    pub u16ExpCoefMax: CVI_U16,
    pub u16ExpCoefMin: CVI_U16,
    pub u8SmartInterval: CVI_U8,
    pub u8SmartSpeed: CVI_U8,
    pub u16SmartDelayNum: CVI_U16,
    pub u8Weight: CVI_U8,
    pub u8NarrowRatio: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SMART_EXPOSURE_ATTR_S"]
        [::std::mem::size_of::<_ISP_SMART_EXPOSURE_ATTR_S>() - 24usize];
    ["Alignment of _ISP_SMART_EXPOSURE_ATTR_S"]
        [::std::mem::align_of::<_ISP_SMART_EXPOSURE_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::bIRMode"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, bIRMode) - 1usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::enSmartExpType"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, enSmartExpType) - 4usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u8LumaTarget"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u8LumaTarget) - 8usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u16ExpCoef"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u16ExpCoef) - 10usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u16ExpCoefMax"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u16ExpCoefMax) - 12usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u16ExpCoefMin"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u16ExpCoefMin) - 14usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u8SmartInterval"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u8SmartInterval) - 16usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u8SmartSpeed"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u8SmartSpeed) - 17usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u16SmartDelayNum"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u16SmartDelayNum) - 18usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u8Weight"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u8Weight) - 20usize];
    ["Offset of field: _ISP_SMART_EXPOSURE_ATTR_S::u8NarrowRatio"]
        [::std::mem::offset_of!(_ISP_SMART_EXPOSURE_ATTR_S, u8NarrowRatio) - 21usize];
};
pub type ISP_SMART_EXPOSURE_ATTR_S = _ISP_SMART_EXPOSURE_ATTR_S;
pub const _ISP_IR_STATUS_E_ISP_IR_STATUS_NORMAL: _ISP_IR_STATUS_E = 0;
pub const _ISP_IR_STATUS_E_ISP_IR_STATUS_IR: _ISP_IR_STATUS_E = 1;
pub const _ISP_IR_STATUS_E_ISP_IR_BUTT: _ISP_IR_STATUS_E = 2;
pub type _ISP_IR_STATUS_E = ::std::os::raw::c_uint;
pub use self::_ISP_IR_STATUS_E as ISP_IR_STATUS_E;
pub const _ISP_IR_SWITCH_STATUS_E_ISP_IR_SWITCH_NONE: _ISP_IR_SWITCH_STATUS_E = 0;
pub const _ISP_IR_SWITCH_STATUS_E_ISP_IR_SWITCH_TO_NORMAL: _ISP_IR_SWITCH_STATUS_E = 1;
pub const _ISP_IR_SWITCH_STATUS_E_ISP_IR_SWITCH_TO_IR: _ISP_IR_SWITCH_STATUS_E = 2;
pub const _ISP_IR_SWITCH_STATUS_E_ISP_IR_SWITCH_BUTT: _ISP_IR_SWITCH_STATUS_E = 3;
pub type _ISP_IR_SWITCH_STATUS_E = ::std::os::raw::c_uint;
pub use self::_ISP_IR_SWITCH_STATUS_E as ISP_IR_SWITCH_STATUS_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_IR_AUTO_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub u32Normal2IrIsoThr: CVI_U32,
    pub u32Ir2NormalIsoThr: CVI_U32,
    pub u32RGMax: CVI_U32,
    pub u32RGMin: CVI_U32,
    pub u32BGMax: CVI_U32,
    pub u32BGMin: CVI_U32,
    pub enIrStatus: ISP_IR_STATUS_E,
    pub enIrSwitch: ISP_IR_SWITCH_STATUS_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_IR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_IR_AUTO_ATTR_S>() - 36usize];
    ["Alignment of _ISP_IR_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_IR_AUTO_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32Normal2IrIsoThr"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32Normal2IrIsoThr) - 4usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32Ir2NormalIsoThr"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32Ir2NormalIsoThr) - 8usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32RGMax"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32RGMax) - 12usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32RGMin"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32RGMin) - 16usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32BGMax"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32BGMax) - 20usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::u32BGMin"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, u32BGMin) - 24usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::enIrStatus"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, enIrStatus) - 28usize];
    ["Offset of field: _ISP_IR_AUTO_ATTR_S::enIrSwitch"]
        [::std::mem::offset_of!(_ISP_IR_AUTO_ATTR_S, enIrSwitch) - 32usize];
};
pub type ISP_IR_AUTO_ATTR_S = _ISP_IR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_CROP_S {
    pub bEnable: CVI_BOOL,
    pub u16X: CVI_U16,
    pub u16Y: CVI_U16,
    pub u16W: CVI_U16,
    pub u16H: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_CROP_S"][::std::mem::size_of::<_ISP_AWB_CROP_S>() - 10usize];
    ["Alignment of _ISP_AWB_CROP_S"][::std::mem::align_of::<_ISP_AWB_CROP_S>() - 2usize];
    ["Offset of field: _ISP_AWB_CROP_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_CROP_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_CROP_S::u16X"]
        [::std::mem::offset_of!(_ISP_AWB_CROP_S, u16X) - 2usize];
    ["Offset of field: _ISP_AWB_CROP_S::u16Y"]
        [::std::mem::offset_of!(_ISP_AWB_CROP_S, u16Y) - 4usize];
    ["Offset of field: _ISP_AWB_CROP_S::u16W"]
        [::std::mem::offset_of!(_ISP_AWB_CROP_S, u16W) - 6usize];
    ["Offset of field: _ISP_AWB_CROP_S::u16H"]
        [::std::mem::offset_of!(_ISP_AWB_CROP_S, u16H) - 8usize];
};
pub type ISP_AWB_CROP_S = _ISP_AWB_CROP_S;
pub const _ISP_AWB_SWITCH_E_ISP_AWB_AFTER_DG: _ISP_AWB_SWITCH_E = 0;
pub const _ISP_AWB_SWITCH_E_ISP_AWB_AFTER_DRC: _ISP_AWB_SWITCH_E = 1;
pub const _ISP_AWB_SWITCH_E_ISP_AWB_SWITCH_BUTT: _ISP_AWB_SWITCH_E = 2;
pub type _ISP_AWB_SWITCH_E = ::std::os::raw::c_uint;
pub use self::_ISP_AWB_SWITCH_E as ISP_AWB_SWITCH_E;
pub const _ISP_AWB_ALG_TYPE_E_AWB_ALG_LOWCOST: _ISP_AWB_ALG_TYPE_E = 0;
pub const _ISP_AWB_ALG_TYPE_E_AWB_ALG_ADVANCE: _ISP_AWB_ALG_TYPE_E = 1;
pub const _ISP_AWB_ALG_TYPE_E_AWB_ALG_BUTT: _ISP_AWB_ALG_TYPE_E = 2;
pub type _ISP_AWB_ALG_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AWB_ALG_TYPE_E as ISP_AWB_ALG_TYPE_E;
pub const _ISP_AWB_MULTI_LS_TYPE_E_AWB_MULTI_LS_SAT: _ISP_AWB_MULTI_LS_TYPE_E = 0;
pub const _ISP_AWB_MULTI_LS_TYPE_E_AWB_MULTI_LS_CCM: _ISP_AWB_MULTI_LS_TYPE_E = 1;
pub const _ISP_AWB_MULTI_LS_TYPE_E_AWB_MULTI_LS_BUTT: _ISP_AWB_MULTI_LS_TYPE_E = 2;
pub type _ISP_AWB_MULTI_LS_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AWB_MULTI_LS_TYPE_E as ISP_AWB_MULTI_LS_TYPE_E;
pub const _ISP_AWB_INDOOR_OUTDOOR_STATUS_E_AWB_INDOOR_MODE: _ISP_AWB_INDOOR_OUTDOOR_STATUS_E = 0;
pub const _ISP_AWB_INDOOR_OUTDOOR_STATUS_E_AWB_OUTDOOR_MODE: _ISP_AWB_INDOOR_OUTDOOR_STATUS_E = 1;
pub const _ISP_AWB_INDOOR_OUTDOOR_STATUS_E_AWB_INDOOR_OUTDOOR_BUTT:
    _ISP_AWB_INDOOR_OUTDOOR_STATUS_E = 2;
pub type _ISP_AWB_INDOOR_OUTDOOR_STATUS_E = ::std::os::raw::c_uint;
pub use self::_ISP_AWB_INDOOR_OUTDOOR_STATUS_E as ISP_AWB_INDOOR_OUTDOOR_STATUS_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WB_STATISTICS_CFG_S {
    pub enAWBSwitch: ISP_AWB_SWITCH_E,
    pub u16ZoneRow: CVI_U16,
    pub u16ZoneCol: CVI_U16,
    pub u16ZoneBin: CVI_U16,
    pub au16HistBinThresh: [CVI_U16; 4usize],
    pub u16WhiteLevel: CVI_U16,
    pub u16BlackLevel: CVI_U16,
    pub u16CbMax: CVI_U16,
    pub u16CbMin: CVI_U16,
    pub u16CrMax: CVI_U16,
    pub u16CrMin: CVI_U16,
    pub stCrop: ISP_AWB_CROP_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WB_STATISTICS_CFG_S"]
        [::std::mem::size_of::<_ISP_WB_STATISTICS_CFG_S>() - 40usize];
    ["Alignment of _ISP_WB_STATISTICS_CFG_S"]
        [::std::mem::align_of::<_ISP_WB_STATISTICS_CFG_S>() - 4usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::enAWBSwitch"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, enAWBSwitch) - 0usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16ZoneRow"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16ZoneRow) - 4usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16ZoneCol"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16ZoneCol) - 6usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16ZoneBin"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16ZoneBin) - 8usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::au16HistBinThresh"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, au16HistBinThresh) - 10usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16WhiteLevel"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16WhiteLevel) - 18usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16BlackLevel"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16BlackLevel) - 20usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16CbMax"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16CbMax) - 22usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16CbMin"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16CbMin) - 24usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16CrMax"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16CrMax) - 26usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::u16CrMin"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, u16CrMin) - 28usize];
    ["Offset of field: _ISP_WB_STATISTICS_CFG_S::stCrop"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_CFG_S, stCrop) - 30usize];
};
pub type ISP_WB_STATISTICS_CFG_S = _ISP_WB_STATISTICS_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_CROP_S {
    pub bEnable: CVI_BOOL,
    pub u16X: CVI_U16,
    pub u16Y: CVI_U16,
    pub u16W: CVI_U16,
    pub u16H: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_CROP_S"][::std::mem::size_of::<_ISP_AF_CROP_S>() - 10usize];
    ["Alignment of _ISP_AF_CROP_S"][::std::mem::align_of::<_ISP_AF_CROP_S>() - 2usize];
    ["Offset of field: _ISP_AF_CROP_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AF_CROP_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AF_CROP_S::u16X"]
        [::std::mem::offset_of!(_ISP_AF_CROP_S, u16X) - 2usize];
    ["Offset of field: _ISP_AF_CROP_S::u16Y"]
        [::std::mem::offset_of!(_ISP_AF_CROP_S, u16Y) - 4usize];
    ["Offset of field: _ISP_AF_CROP_S::u16W"]
        [::std::mem::offset_of!(_ISP_AF_CROP_S, u16W) - 6usize];
    ["Offset of field: _ISP_AF_CROP_S::u16H"]
        [::std::mem::offset_of!(_ISP_AF_CROP_S, u16H) - 8usize];
};
pub type ISP_AF_CROP_S = _ISP_AF_CROP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_RAW_CFG_S {
    pub PreGammaEn: CVI_BOOL,
    pub PreGammaTable: [CVI_U8; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_RAW_CFG_S"][::std::mem::size_of::<_ISP_AF_RAW_CFG_S>() - 257usize];
    ["Alignment of _ISP_AF_RAW_CFG_S"][::std::mem::align_of::<_ISP_AF_RAW_CFG_S>() - 1usize];
    ["Offset of field: _ISP_AF_RAW_CFG_S::PreGammaEn"]
        [::std::mem::offset_of!(_ISP_AF_RAW_CFG_S, PreGammaEn) - 0usize];
    ["Offset of field: _ISP_AF_RAW_CFG_S::PreGammaTable"]
        [::std::mem::offset_of!(_ISP_AF_RAW_CFG_S, PreGammaTable) - 1usize];
};
pub type ISP_AF_RAW_CFG_S = _ISP_AF_RAW_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_PRE_FILTER_CFG_S {
    pub PreFltEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_PRE_FILTER_CFG_S"]
        [::std::mem::size_of::<_ISP_AF_PRE_FILTER_CFG_S>() - 1usize];
    ["Alignment of _ISP_AF_PRE_FILTER_CFG_S"]
        [::std::mem::align_of::<_ISP_AF_PRE_FILTER_CFG_S>() - 1usize];
    ["Offset of field: _ISP_AF_PRE_FILTER_CFG_S::PreFltEn"]
        [::std::mem::offset_of!(_ISP_AF_PRE_FILTER_CFG_S, PreFltEn) - 0usize];
};
pub type ISP_AF_PRE_FILTER_CFG_S = _ISP_AF_PRE_FILTER_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_CFG_S {
    pub bEnable: CVI_BOOL,
    pub u16Hwnd: CVI_U16,
    pub u16Vwnd: CVI_U16,
    pub u8HFltShift: CVI_U8,
    pub s8HVFltLpCoeff: [CVI_S8; 5usize],
    pub stRawCfg: ISP_AF_RAW_CFG_S,
    pub stPreFltCfg: ISP_AF_PRE_FILTER_CFG_S,
    pub stCrop: ISP_AF_CROP_S,
    pub H0FltCoring: CVI_U8,
    pub H1FltCoring: CVI_U8,
    pub V0FltCoring: CVI_U8,
    pub u16HighLumaTh: CVI_U16,
    pub u8ThLow: CVI_U8,
    pub u8ThHigh: CVI_U8,
    pub u8GainLow: CVI_U8,
    pub u8GainHigh: CVI_U8,
    pub u8SlopLow: CVI_U8,
    pub u8SlopHigh: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_CFG_S"][::std::mem::size_of::<_ISP_AF_CFG_S>() - 292usize];
    ["Alignment of _ISP_AF_CFG_S"][::std::mem::align_of::<_ISP_AF_CFG_S>() - 2usize];
    ["Offset of field: _ISP_AF_CFG_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AF_CFG_S::u16Hwnd"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u16Hwnd) - 2usize];
    ["Offset of field: _ISP_AF_CFG_S::u16Vwnd"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u16Vwnd) - 4usize];
    ["Offset of field: _ISP_AF_CFG_S::u8HFltShift"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8HFltShift) - 6usize];
    ["Offset of field: _ISP_AF_CFG_S::s8HVFltLpCoeff"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, s8HVFltLpCoeff) - 7usize];
    ["Offset of field: _ISP_AF_CFG_S::stRawCfg"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, stRawCfg) - 12usize];
    ["Offset of field: _ISP_AF_CFG_S::stPreFltCfg"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, stPreFltCfg) - 269usize];
    ["Offset of field: _ISP_AF_CFG_S::stCrop"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, stCrop) - 270usize];
    ["Offset of field: _ISP_AF_CFG_S::H0FltCoring"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, H0FltCoring) - 280usize];
    ["Offset of field: _ISP_AF_CFG_S::H1FltCoring"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, H1FltCoring) - 281usize];
    ["Offset of field: _ISP_AF_CFG_S::V0FltCoring"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, V0FltCoring) - 282usize];
    ["Offset of field: _ISP_AF_CFG_S::u16HighLumaTh"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u16HighLumaTh) - 284usize];
    ["Offset of field: _ISP_AF_CFG_S::u8ThLow"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8ThLow) - 286usize];
    ["Offset of field: _ISP_AF_CFG_S::u8ThHigh"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8ThHigh) - 287usize];
    ["Offset of field: _ISP_AF_CFG_S::u8GainLow"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8GainLow) - 288usize];
    ["Offset of field: _ISP_AF_CFG_S::u8GainHigh"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8GainHigh) - 289usize];
    ["Offset of field: _ISP_AF_CFG_S::u8SlopLow"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8SlopLow) - 290usize];
    ["Offset of field: _ISP_AF_CFG_S::u8SlopHigh"]
        [::std::mem::offset_of!(_ISP_AF_CFG_S, u8SlopHigh) - 291usize];
};
pub type ISP_AF_CFG_S = _ISP_AF_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_H_PARAM_S {
    pub s8HFltHpCoeff: [CVI_S8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_H_PARAM_S"][::std::mem::size_of::<_ISP_AF_H_PARAM_S>() - 5usize];
    ["Alignment of _ISP_AF_H_PARAM_S"][::std::mem::align_of::<_ISP_AF_H_PARAM_S>() - 1usize];
    ["Offset of field: _ISP_AF_H_PARAM_S::s8HFltHpCoeff"]
        [::std::mem::offset_of!(_ISP_AF_H_PARAM_S, s8HFltHpCoeff) - 0usize];
};
pub type ISP_AF_H_PARAM_S = _ISP_AF_H_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_V_PARAM_S {
    pub s8VFltHpCoeff: [CVI_S8; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_V_PARAM_S"][::std::mem::size_of::<_ISP_AF_V_PARAM_S>() - 3usize];
    ["Alignment of _ISP_AF_V_PARAM_S"][::std::mem::align_of::<_ISP_AF_V_PARAM_S>() - 1usize];
    ["Offset of field: _ISP_AF_V_PARAM_S::s8VFltHpCoeff"]
        [::std::mem::offset_of!(_ISP_AF_V_PARAM_S, s8VFltHpCoeff) - 0usize];
};
pub type ISP_AF_V_PARAM_S = _ISP_AF_V_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FOCUS_STATISTICS_CFG_S {
    pub stConfig: ISP_AF_CFG_S,
    pub stHParam_FIR0: ISP_AF_H_PARAM_S,
    pub stHParam_FIR1: ISP_AF_H_PARAM_S,
    pub stVParam_FIR: ISP_AF_V_PARAM_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FOCUS_STATISTICS_CFG_S"]
        [::std::mem::size_of::<_ISP_FOCUS_STATISTICS_CFG_S>() - 306usize];
    ["Alignment of _ISP_FOCUS_STATISTICS_CFG_S"]
        [::std::mem::align_of::<_ISP_FOCUS_STATISTICS_CFG_S>() - 2usize];
    ["Offset of field: _ISP_FOCUS_STATISTICS_CFG_S::stConfig"]
        [::std::mem::offset_of!(_ISP_FOCUS_STATISTICS_CFG_S, stConfig) - 0usize];
    ["Offset of field: _ISP_FOCUS_STATISTICS_CFG_S::stHParam_FIR0"]
        [::std::mem::offset_of!(_ISP_FOCUS_STATISTICS_CFG_S, stHParam_FIR0) - 292usize];
    ["Offset of field: _ISP_FOCUS_STATISTICS_CFG_S::stHParam_FIR1"]
        [::std::mem::offset_of!(_ISP_FOCUS_STATISTICS_CFG_S, stHParam_FIR1) - 297usize];
    ["Offset of field: _ISP_FOCUS_STATISTICS_CFG_S::stVParam_FIR"]
        [::std::mem::offset_of!(_ISP_FOCUS_STATISTICS_CFG_S, stVParam_FIR) - 302usize];
};
pub type ISP_FOCUS_STATISTICS_CFG_S = _ISP_FOCUS_STATISTICS_CFG_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ISP_STATISTICS_CFG_S {
    pub unKey: ISP_STATISTICS_CTRL_U,
    pub stAECfg: ISP_AE_STATISTICS_CFG_S,
    pub stWBCfg: ISP_WB_STATISTICS_CFG_S,
    pub stFocusCfg: ISP_FOCUS_STATISTICS_CFG_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_STATISTICS_CFG_S"][::std::mem::size_of::<_ISP_STATISTICS_CFG_S>() - 672usize];
    ["Alignment of _ISP_STATISTICS_CFG_S"]
        [::std::mem::align_of::<_ISP_STATISTICS_CFG_S>() - 8usize];
    ["Offset of field: _ISP_STATISTICS_CFG_S::unKey"]
        [::std::mem::offset_of!(_ISP_STATISTICS_CFG_S, unKey) - 0usize];
    ["Offset of field: _ISP_STATISTICS_CFG_S::stAECfg"]
        [::std::mem::offset_of!(_ISP_STATISTICS_CFG_S, stAECfg) - 8usize];
    ["Offset of field: _ISP_STATISTICS_CFG_S::stWBCfg"]
        [::std::mem::offset_of!(_ISP_STATISTICS_CFG_S, stWBCfg) - 320usize];
    ["Offset of field: _ISP_STATISTICS_CFG_S::stFocusCfg"]
        [::std::mem::offset_of!(_ISP_STATISTICS_CFG_S, stFocusCfg) - 360usize];
};
pub type ISP_STATISTICS_CFG_S = _ISP_STATISTICS_CFG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_GRID_INFO_S {
    pub au16GridYPos: [CVI_U16; 31usize],
    pub au16GridXPos: [CVI_U16; 35usize],
    pub u8Status: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_GRID_INFO_S"][::std::mem::size_of::<_ISP_AE_GRID_INFO_S>() - 134usize];
    ["Alignment of _ISP_AE_GRID_INFO_S"][::std::mem::align_of::<_ISP_AE_GRID_INFO_S>() - 2usize];
    ["Offset of field: _ISP_AE_GRID_INFO_S::au16GridYPos"]
        [::std::mem::offset_of!(_ISP_AE_GRID_INFO_S, au16GridYPos) - 0usize];
    ["Offset of field: _ISP_AE_GRID_INFO_S::au16GridXPos"]
        [::std::mem::offset_of!(_ISP_AE_GRID_INFO_S, au16GridXPos) - 62usize];
    ["Offset of field: _ISP_AE_GRID_INFO_S::u8Status"]
        [::std::mem::offset_of!(_ISP_AE_GRID_INFO_S, u8Status) - 132usize];
};
pub type ISP_AE_GRID_INFO_S = _ISP_AE_GRID_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_STATISTICS_S {
    pub au32FEHist1024Value: [[[CVI_U32; 256usize]; 1usize]; 2usize],
    pub au16FEGlobalAvg: [[[CVI_U16; 4usize]; 1usize]; 2usize],
    pub au16FEZoneAvg: [[[[[CVI_U16; 4usize]; 34usize]; 30usize]; 1usize]; 2usize],
    pub au32BEHist1024Value: [CVI_U32; 256usize],
    pub au16BEGlobalAvg: [CVI_U16; 4usize],
    pub au16BEZoneAvg: [[[CVI_U16; 4usize]; 34usize]; 30usize],
    pub stFEGridInfo: ISP_AE_GRID_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_STATISTICS_S"][::std::mem::size_of::<_ISP_AE_STATISTICS_S>() - 27712usize];
    ["Alignment of _ISP_AE_STATISTICS_S"][::std::mem::align_of::<_ISP_AE_STATISTICS_S>() - 4usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au32FEHist1024Value"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au32FEHist1024Value) - 0usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au16FEGlobalAvg"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au16FEGlobalAvg) - 2048usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au16FEZoneAvg"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au16FEZoneAvg) - 2064usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au32BEHist1024Value"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au32BEHist1024Value) - 18384usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au16BEGlobalAvg"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au16BEGlobalAvg) - 19408usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::au16BEZoneAvg"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, au16BEZoneAvg) - 19416usize];
    ["Offset of field: _ISP_AE_STATISTICS_S::stFEGridInfo"]
        [::std::mem::offset_of!(_ISP_AE_STATISTICS_S, stFEGridInfo) - 27576usize];
};
pub type ISP_AE_STATISTICS_S = _ISP_AE_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_GRID_INFO_S {
    pub au16GridYPos: [CVI_U16; 31usize],
    pub au16GridXPos: [CVI_U16; 35usize],
    pub u8Status: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_GRID_INFO_S"][::std::mem::size_of::<_ISP_AWB_GRID_INFO_S>() - 134usize];
    ["Alignment of _ISP_AWB_GRID_INFO_S"][::std::mem::align_of::<_ISP_AWB_GRID_INFO_S>() - 2usize];
    ["Offset of field: _ISP_AWB_GRID_INFO_S::au16GridYPos"]
        [::std::mem::offset_of!(_ISP_AWB_GRID_INFO_S, au16GridYPos) - 0usize];
    ["Offset of field: _ISP_AWB_GRID_INFO_S::au16GridXPos"]
        [::std::mem::offset_of!(_ISP_AWB_GRID_INFO_S, au16GridXPos) - 62usize];
    ["Offset of field: _ISP_AWB_GRID_INFO_S::u8Status"]
        [::std::mem::offset_of!(_ISP_AWB_GRID_INFO_S, u8Status) - 132usize];
};
pub type ISP_AWB_GRID_INFO_S = _ISP_AWB_GRID_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WB_STATISTICS_S {
    pub u16GlobalR: CVI_U16,
    pub u16GlobalG: CVI_U16,
    pub u16GlobalB: CVI_U16,
    pub u16CountAll: CVI_U16,
    pub au16ZoneAvgR: [CVI_U16; 1020usize],
    pub au16ZoneAvgG: [CVI_U16; 1020usize],
    pub au16ZoneAvgB: [CVI_U16; 1020usize],
    pub au16ZoneCountAll: [CVI_U16; 1020usize],
    pub stGridInfo: ISP_AWB_GRID_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WB_STATISTICS_S"][::std::mem::size_of::<_ISP_WB_STATISTICS_S>() - 8302usize];
    ["Alignment of _ISP_WB_STATISTICS_S"][::std::mem::align_of::<_ISP_WB_STATISTICS_S>() - 2usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::u16GlobalR"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, u16GlobalR) - 0usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::u16GlobalG"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, u16GlobalG) - 2usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::u16GlobalB"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, u16GlobalB) - 4usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::u16CountAll"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, u16CountAll) - 6usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::au16ZoneAvgR"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, au16ZoneAvgR) - 8usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::au16ZoneAvgG"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, au16ZoneAvgG) - 2048usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::au16ZoneAvgB"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, au16ZoneAvgB) - 4088usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::au16ZoneCountAll"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, au16ZoneCountAll) - 6128usize];
    ["Offset of field: _ISP_WB_STATISTICS_S::stGridInfo"]
        [::std::mem::offset_of!(_ISP_WB_STATISTICS_S, stGridInfo) - 8168usize];
};
pub type ISP_WB_STATISTICS_S = _ISP_WB_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FOCUS_ZONE_S {
    pub u16HlCnt: CVI_U16,
    pub u64h0: CVI_U64,
    pub u64h1: CVI_U64,
    pub u32v0: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FOCUS_ZONE_S"][::std::mem::size_of::<_ISP_FOCUS_ZONE_S>() - 32usize];
    ["Alignment of _ISP_FOCUS_ZONE_S"][::std::mem::align_of::<_ISP_FOCUS_ZONE_S>() - 8usize];
    ["Offset of field: _ISP_FOCUS_ZONE_S::u16HlCnt"]
        [::std::mem::offset_of!(_ISP_FOCUS_ZONE_S, u16HlCnt) - 0usize];
    ["Offset of field: _ISP_FOCUS_ZONE_S::u64h0"]
        [::std::mem::offset_of!(_ISP_FOCUS_ZONE_S, u64h0) - 8usize];
    ["Offset of field: _ISP_FOCUS_ZONE_S::u64h1"]
        [::std::mem::offset_of!(_ISP_FOCUS_ZONE_S, u64h1) - 16usize];
    ["Offset of field: _ISP_FOCUS_ZONE_S::u32v0"]
        [::std::mem::offset_of!(_ISP_FOCUS_ZONE_S, u32v0) - 24usize];
};
pub type ISP_FOCUS_ZONE_S = _ISP_FOCUS_ZONE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FE_FOCUS_STATISTICS_S {
    pub stZoneMetrics: [[ISP_FOCUS_ZONE_S; 17usize]; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FE_FOCUS_STATISTICS_S"]
        [::std::mem::size_of::<_ISP_FE_FOCUS_STATISTICS_S>() - 8160usize];
    ["Alignment of _ISP_FE_FOCUS_STATISTICS_S"]
        [::std::mem::align_of::<_ISP_FE_FOCUS_STATISTICS_S>() - 8usize];
    ["Offset of field: _ISP_FE_FOCUS_STATISTICS_S::stZoneMetrics"]
        [::std::mem::offset_of!(_ISP_FE_FOCUS_STATISTICS_S, stZoneMetrics) - 0usize];
};
pub type ISP_FE_FOCUS_STATISTICS_S = _ISP_FE_FOCUS_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_STATISTICS_S {
    pub stFEAFStat: ISP_FE_FOCUS_STATISTICS_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_STATISTICS_S"][::std::mem::size_of::<_ISP_AF_STATISTICS_S>() - 8160usize];
    ["Alignment of _ISP_AF_STATISTICS_S"][::std::mem::align_of::<_ISP_AF_STATISTICS_S>() - 8usize];
    ["Offset of field: _ISP_AF_STATISTICS_S::stFEAFStat"]
        [::std::mem::offset_of!(_ISP_AF_STATISTICS_S, stFEAFStat) - 0usize];
};
pub type ISP_AF_STATISTICS_S = _ISP_AF_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MG_STATISTICS_S {
    pub au16ZoneAvg: [[[CVI_U16; 4usize]; 17usize]; 15usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MG_STATISTICS_S"][::std::mem::size_of::<_ISP_MG_STATISTICS_S>() - 2040usize];
    ["Alignment of _ISP_MG_STATISTICS_S"][::std::mem::align_of::<_ISP_MG_STATISTICS_S>() - 2usize];
    ["Offset of field: _ISP_MG_STATISTICS_S::au16ZoneAvg"]
        [::std::mem::offset_of!(_ISP_MG_STATISTICS_S, au16ZoneAvg) - 0usize];
};
pub type ISP_MG_STATISTICS_S = _ISP_MG_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_LightBox_Gain_S {
    pub u16AvgRgain: CVI_U16,
    pub u16AvgBgain: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_LightBox_Gain_S"]
        [::std::mem::size_of::<_ISP_AWB_LightBox_Gain_S>() - 4usize];
    ["Alignment of _ISP_AWB_LightBox_Gain_S"]
        [::std::mem::align_of::<_ISP_AWB_LightBox_Gain_S>() - 2usize];
    ["Offset of field: _ISP_AWB_LightBox_Gain_S::u16AvgRgain"]
        [::std::mem::offset_of!(_ISP_AWB_LightBox_Gain_S, u16AvgRgain) - 0usize];
    ["Offset of field: _ISP_AWB_LightBox_Gain_S::u16AvgBgain"]
        [::std::mem::offset_of!(_ISP_AWB_LightBox_Gain_S, u16AvgBgain) - 2usize];
};
pub type ISP_AWB_LightBox_Gain_S = _ISP_AWB_LightBox_Gain_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_Calibration_Gain_S {
    pub u16AvgRgain: [CVI_U16; 3usize],
    pub u16AvgBgain: [CVI_U16; 3usize],
    pub u16ColorTemperature: [CVI_U16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_Calibration_Gain_S"]
        [::std::mem::size_of::<_ISP_AWB_Calibration_Gain_S>() - 18usize];
    ["Alignment of _ISP_AWB_Calibration_Gain_S"]
        [::std::mem::align_of::<_ISP_AWB_Calibration_Gain_S>() - 2usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S::u16AvgRgain"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S, u16AvgRgain) - 0usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S::u16AvgBgain"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S, u16AvgBgain) - 6usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S::u16ColorTemperature"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S, u16ColorTemperature) - 12usize];
};
pub type ISP_AWB_Calibration_Gain_S = _ISP_AWB_Calibration_Gain_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_Calibration_Gain_S_EX {
    pub u16AvgRgain: [CVI_U16; 10usize],
    pub u16AvgBgain: [CVI_U16; 10usize],
    pub u16ColorTemperature: [CVI_U16; 10usize],
    pub u8Weight: [CVI_U8; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_Calibration_Gain_S_EX"]
        [::std::mem::size_of::<_ISP_AWB_Calibration_Gain_S_EX>() - 70usize];
    ["Alignment of _ISP_AWB_Calibration_Gain_S_EX"]
        [::std::mem::align_of::<_ISP_AWB_Calibration_Gain_S_EX>() - 2usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S_EX::u16AvgRgain"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S_EX, u16AvgRgain) - 0usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S_EX::u16AvgBgain"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S_EX, u16AvgBgain) - 20usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S_EX::u16ColorTemperature"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S_EX, u16ColorTemperature) - 40usize];
    ["Offset of field: _ISP_AWB_Calibration_Gain_S_EX::u8Weight"]
        [::std::mem::offset_of!(_ISP_AWB_Calibration_Gain_S_EX, u8Weight) - 60usize];
};
pub type ISP_AWB_Calibration_Gain_S_EX = _ISP_AWB_Calibration_Gain_S_EX;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_LUM_HISTGRAM_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub au8HistThresh: [CVI_U8; 6usize],
    pub au16HistWt: [CVI_U16; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_LUM_HISTGRAM_ATTR_S"]
        [::std::mem::size_of::<_ISP_AWB_LUM_HISTGRAM_ATTR_S>() - 28usize];
    ["Alignment of _ISP_AWB_LUM_HISTGRAM_ATTR_S"]
        [::std::mem::align_of::<_ISP_AWB_LUM_HISTGRAM_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_AWB_LUM_HISTGRAM_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_LUM_HISTGRAM_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_LUM_HISTGRAM_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_AWB_LUM_HISTGRAM_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_AWB_LUM_HISTGRAM_ATTR_S::au8HistThresh"]
        [::std::mem::offset_of!(_ISP_AWB_LUM_HISTGRAM_ATTR_S, au8HistThresh) - 8usize];
    ["Offset of field: _ISP_AWB_LUM_HISTGRAM_ATTR_S::au16HistWt"]
        [::std::mem::offset_of!(_ISP_AWB_LUM_HISTGRAM_ATTR_S, au16HistWt) - 14usize];
};
pub type ISP_AWB_LUM_HISTGRAM_ATTR_S = _ISP_AWB_LUM_HISTGRAM_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_CT_LIMIT_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub u16HighRgLimit: CVI_U16,
    pub u16HighBgLimit: CVI_U16,
    pub u16LowRgLimit: CVI_U16,
    pub u16LowBgLimit: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_CT_LIMIT_ATTR_S"]
        [::std::mem::size_of::<_ISP_AWB_CT_LIMIT_ATTR_S>() - 16usize];
    ["Alignment of _ISP_AWB_CT_LIMIT_ATTR_S"]
        [::std::mem::align_of::<_ISP_AWB_CT_LIMIT_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::u16HighRgLimit"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, u16HighRgLimit) - 8usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::u16HighBgLimit"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, u16HighBgLimit) - 10usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::u16LowRgLimit"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, u16LowRgLimit) - 12usize];
    ["Offset of field: _ISP_AWB_CT_LIMIT_ATTR_S::u16LowBgLimit"]
        [::std::mem::offset_of!(_ISP_AWB_CT_LIMIT_ATTR_S, u16LowBgLimit) - 14usize];
};
pub type ISP_AWB_CT_LIMIT_ATTR_S = _ISP_AWB_CT_LIMIT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_CBCR_TRACK_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub au16CrMax: [CVI_U16; 16usize],
    pub au16CrMin: [CVI_U16; 16usize],
    pub au16CbMax: [CVI_U16; 16usize],
    pub au16CbMin: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_CBCR_TRACK_ATTR_S"]
        [::std::mem::size_of::<_ISP_AWB_CBCR_TRACK_ATTR_S>() - 130usize];
    ["Alignment of _ISP_AWB_CBCR_TRACK_ATTR_S"]
        [::std::mem::align_of::<_ISP_AWB_CBCR_TRACK_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_AWB_CBCR_TRACK_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_CBCR_TRACK_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_CBCR_TRACK_ATTR_S::au16CrMax"]
        [::std::mem::offset_of!(_ISP_AWB_CBCR_TRACK_ATTR_S, au16CrMax) - 2usize];
    ["Offset of field: _ISP_AWB_CBCR_TRACK_ATTR_S::au16CrMin"]
        [::std::mem::offset_of!(_ISP_AWB_CBCR_TRACK_ATTR_S, au16CrMin) - 34usize];
    ["Offset of field: _ISP_AWB_CBCR_TRACK_ATTR_S::au16CbMax"]
        [::std::mem::offset_of!(_ISP_AWB_CBCR_TRACK_ATTR_S, au16CbMax) - 66usize];
    ["Offset of field: _ISP_AWB_CBCR_TRACK_ATTR_S::au16CbMin"]
        [::std::mem::offset_of!(_ISP_AWB_CBCR_TRACK_ATTR_S, au16CbMin) - 98usize];
};
pub type ISP_AWB_CBCR_TRACK_ATTR_S = _ISP_AWB_CBCR_TRACK_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_IN_OUT_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub enOutdoorStatus: ISP_AWB_INDOOR_OUTDOOR_STATUS_E,
    pub u32OutThresh: CVI_U32,
    pub u16LowStart: CVI_U16,
    pub u16LowStop: CVI_U16,
    pub u16HighStart: CVI_U16,
    pub u16HighStop: CVI_U16,
    pub bGreenEnhanceEn: CVI_BOOL,
    pub u8OutShiftLimit: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_IN_OUT_ATTR_S"][::std::mem::size_of::<_ISP_AWB_IN_OUT_ATTR_S>() - 28usize];
    ["Alignment of _ISP_AWB_IN_OUT_ATTR_S"]
        [::std::mem::align_of::<_ISP_AWB_IN_OUT_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::enOutdoorStatus"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, enOutdoorStatus) - 8usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u32OutThresh"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u32OutThresh) - 12usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u16LowStart"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u16LowStart) - 16usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u16LowStop"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u16LowStop) - 18usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u16HighStart"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u16HighStart) - 20usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u16HighStop"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u16HighStop) - 22usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::bGreenEnhanceEn"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, bGreenEnhanceEn) - 24usize];
    ["Offset of field: _ISP_AWB_IN_OUT_ATTR_S::u8OutShiftLimit"]
        [::std::mem::offset_of!(_ISP_AWB_IN_OUT_ATTR_S, u8OutShiftLimit) - 25usize];
};
pub type ISP_AWB_IN_OUT_ATTR_S = _ISP_AWB_IN_OUT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S {
    pub u16WhiteRgain: CVI_U16,
    pub u16WhiteBgain: CVI_U16,
    pub u16ExpQuant: CVI_U16,
    pub u8LightStatus: CVI_U8,
    pub u8Radius: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S"]
        [::std::mem::size_of::<_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S>() - 8usize];
    ["Alignment of _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S"]
        [::std::mem::align_of::<_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S>() - 2usize];
    ["Offset of field: _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S::u16WhiteRgain"]
        [::std::mem::offset_of!(_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S, u16WhiteRgain) - 0usize];
    ["Offset of field: _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S::u16WhiteBgain"]
        [::std::mem::offset_of!(_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S, u16WhiteBgain) - 2usize];
    ["Offset of field: _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S::u16ExpQuant"]
        [::std::mem::offset_of!(_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S, u16ExpQuant) - 4usize];
    ["Offset of field: _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S::u8LightStatus"]
        [::std::mem::offset_of!(_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S, u8LightStatus) - 6usize];
    ["Offset of field: _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S::u8Radius"]
        [::std::mem::offset_of!(_ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S, u8Radius) - 7usize];
};
pub type ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S = _ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_INTERFERNCE_S {
    pub u8Mode: CVI_U8,
    pub u8Limit: CVI_U8,
    pub u8Radius: CVI_U8,
    pub u8Ratio: CVI_U8,
    pub u8Distance: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_INTERFERNCE_S"]
        [::std::mem::size_of::<ST_ISP_AWB_INTERFERNCE_S>() - 5usize];
    ["Alignment of ST_ISP_AWB_INTERFERNCE_S"]
        [::std::mem::align_of::<ST_ISP_AWB_INTERFERNCE_S>() - 1usize];
    ["Offset of field: ST_ISP_AWB_INTERFERNCE_S::u8Mode"]
        [::std::mem::offset_of!(ST_ISP_AWB_INTERFERNCE_S, u8Mode) - 0usize];
    ["Offset of field: ST_ISP_AWB_INTERFERNCE_S::u8Limit"]
        [::std::mem::offset_of!(ST_ISP_AWB_INTERFERNCE_S, u8Limit) - 1usize];
    ["Offset of field: ST_ISP_AWB_INTERFERNCE_S::u8Radius"]
        [::std::mem::offset_of!(ST_ISP_AWB_INTERFERNCE_S, u8Radius) - 2usize];
    ["Offset of field: ST_ISP_AWB_INTERFERNCE_S::u8Ratio"]
        [::std::mem::offset_of!(ST_ISP_AWB_INTERFERNCE_S, u8Ratio) - 3usize];
    ["Offset of field: ST_ISP_AWB_INTERFERNCE_S::u8Distance"]
        [::std::mem::offset_of!(ST_ISP_AWB_INTERFERNCE_S, u8Distance) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_SKIN_S {
    pub u8Mode: CVI_U8,
    pub u16RgainDiff: CVI_U16,
    pub u16BgainDiff: CVI_U16,
    pub u8Radius: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_SKIN_S"][::std::mem::size_of::<ST_ISP_AWB_SKIN_S>() - 8usize];
    ["Alignment of ST_ISP_AWB_SKIN_S"][::std::mem::align_of::<ST_ISP_AWB_SKIN_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_SKIN_S::u8Mode"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKIN_S, u8Mode) - 0usize];
    ["Offset of field: ST_ISP_AWB_SKIN_S::u16RgainDiff"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKIN_S, u16RgainDiff) - 2usize];
    ["Offset of field: ST_ISP_AWB_SKIN_S::u16BgainDiff"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKIN_S, u16BgainDiff) - 4usize];
    ["Offset of field: ST_ISP_AWB_SKIN_S::u8Radius"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKIN_S, u8Radius) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_SKY_S {
    pub u8Mode: CVI_U8,
    pub u8ThrLv: CVI_U8,
    pub u16Rgain: CVI_U16,
    pub u16Bgain: CVI_U16,
    pub u16MapRgain: CVI_U16,
    pub u16MapBgain: CVI_U16,
    pub u8Radius: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_SKY_S"][::std::mem::size_of::<ST_ISP_AWB_SKY_S>() - 12usize];
    ["Alignment of ST_ISP_AWB_SKY_S"][::std::mem::align_of::<ST_ISP_AWB_SKY_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u8Mode"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u8Mode) - 0usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u8ThrLv"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u8ThrLv) - 1usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u16Rgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u16Rgain) - 2usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u16Bgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u16Bgain) - 4usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u16MapRgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u16MapRgain) - 6usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u16MapBgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u16MapBgain) - 8usize];
    ["Offset of field: ST_ISP_AWB_SKY_S::u8Radius"]
        [::std::mem::offset_of!(ST_ISP_AWB_SKY_S, u8Radius) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_GRASS_S {
    pub u8Mode: CVI_U8,
    pub u8ThrLv: CVI_U8,
    pub u16Rgain: CVI_U16,
    pub u16Bgain: CVI_U16,
    pub u16MapRgain: CVI_U16,
    pub u16MapBgain: CVI_U16,
    pub u8Radius: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_GRASS_S"][::std::mem::size_of::<ST_ISP_AWB_GRASS_S>() - 12usize];
    ["Alignment of ST_ISP_AWB_GRASS_S"][::std::mem::align_of::<ST_ISP_AWB_GRASS_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u8Mode"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u8Mode) - 0usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u8ThrLv"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u8ThrLv) - 1usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u16Rgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u16Rgain) - 2usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u16Bgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u16Bgain) - 4usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u16MapRgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u16MapRgain) - 6usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u16MapBgain"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u16MapBgain) - 8usize];
    ["Offset of field: ST_ISP_AWB_GRASS_S::u8Radius"]
        [::std::mem::offset_of!(ST_ISP_AWB_GRASS_S, u8Radius) - 10usize];
};
pub const ISP_AWB_TEMP_E_ISP_AWB_COLORTEMP_LOW: ISP_AWB_TEMP_E = 0;
pub const ISP_AWB_TEMP_E_ISP_AWB_COLORTEMP_HIGH: ISP_AWB_TEMP_E = 1;
pub const ISP_AWB_TEMP_E_ISP_AWB_COLORTEMP_NUM: ISP_AWB_TEMP_E = 2;
pub type ISP_AWB_TEMP_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_SHIFT_LV_S {
    pub u8LowLvMode: CVI_U8,
    pub u16LowLvCT: [CVI_U16; 2usize],
    pub u16LowLvThr: [CVI_U16; 2usize],
    pub u16LowLvRatio: [CVI_U16; 2usize],
    pub u8HighLvMode: CVI_U8,
    pub u16HighLvCT: [CVI_U16; 2usize],
    pub u16HighLvThr: [CVI_U16; 2usize],
    pub u16HighLvRatio: [CVI_U16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_SHIFT_LV_S"][::std::mem::size_of::<ST_ISP_AWB_SHIFT_LV_S>() - 28usize];
    ["Alignment of ST_ISP_AWB_SHIFT_LV_S"]
        [::std::mem::align_of::<ST_ISP_AWB_SHIFT_LV_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u8LowLvMode"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u8LowLvMode) - 0usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16LowLvCT"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16LowLvCT) - 2usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16LowLvThr"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16LowLvThr) - 6usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16LowLvRatio"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16LowLvRatio) - 10usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u8HighLvMode"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u8HighLvMode) - 14usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16HighLvCT"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16HighLvCT) - 16usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16HighLvThr"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16HighLvThr) - 20usize];
    ["Offset of field: ST_ISP_AWB_SHIFT_LV_S::u16HighLvRatio"]
        [::std::mem::offset_of!(ST_ISP_AWB_SHIFT_LV_S, u16HighLvRatio) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_REGION_S {
    pub u16Region1: CVI_U16,
    pub u16Region2: CVI_U16,
    pub u16Region3: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_REGION_S"][::std::mem::size_of::<ST_ISP_AWB_REGION_S>() - 6usize];
    ["Alignment of ST_ISP_AWB_REGION_S"][::std::mem::align_of::<ST_ISP_AWB_REGION_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_REGION_S::u16Region1"]
        [::std::mem::offset_of!(ST_ISP_AWB_REGION_S, u16Region1) - 0usize];
    ["Offset of field: ST_ISP_AWB_REGION_S::u16Region2"]
        [::std::mem::offset_of!(ST_ISP_AWB_REGION_S, u16Region2) - 2usize];
    ["Offset of field: ST_ISP_AWB_REGION_S::u16Region3"]
        [::std::mem::offset_of!(ST_ISP_AWB_REGION_S, u16Region3) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ST_ISP_AWB_CT_WGT_S {
    pub bEnable: CVI_BOOL,
    pub au16MultiCTBin: [CVI_U16; 8usize],
    pub s8ThrLv: [CVI_S8; 4usize],
    pub au16MultiCTWt: [[CVI_U16; 8usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ST_ISP_AWB_CT_WGT_S"][::std::mem::size_of::<ST_ISP_AWB_CT_WGT_S>() - 86usize];
    ["Alignment of ST_ISP_AWB_CT_WGT_S"][::std::mem::align_of::<ST_ISP_AWB_CT_WGT_S>() - 2usize];
    ["Offset of field: ST_ISP_AWB_CT_WGT_S::bEnable"]
        [::std::mem::offset_of!(ST_ISP_AWB_CT_WGT_S, bEnable) - 0usize];
    ["Offset of field: ST_ISP_AWB_CT_WGT_S::au16MultiCTBin"]
        [::std::mem::offset_of!(ST_ISP_AWB_CT_WGT_S, au16MultiCTBin) - 2usize];
    ["Offset of field: ST_ISP_AWB_CT_WGT_S::s8ThrLv"]
        [::std::mem::offset_of!(ST_ISP_AWB_CT_WGT_S, s8ThrLv) - 18usize];
    ["Offset of field: ST_ISP_AWB_CT_WGT_S::au16MultiCTWt"]
        [::std::mem::offset_of!(ST_ISP_AWB_CT_WGT_S, au16MultiCTWt) - 22usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub u16RefColorTemp: CVI_U16,
    pub au16StaticWB: [CVI_U16; 4usize],
    pub as32CurvePara: [CVI_S32; 6usize],
    pub enAlgType: ISP_AWB_ALG_TYPE_E,
    pub u8RGStrength: CVI_U8,
    pub u8BGStrength: CVI_U8,
    pub u16Speed: CVI_U16,
    pub u16ZoneSel: CVI_U16,
    pub u16HighColorTemp: CVI_U16,
    pub u16LowColorTemp: CVI_U16,
    pub stCTLimit: ISP_AWB_CT_LIMIT_ATTR_S,
    pub bShiftLimitEn: CVI_BOOL,
    pub u16ShiftLimit: [CVI_U16; 8usize],
    pub bGainNormEn: CVI_BOOL,
    pub bNaturalCastEn: CVI_BOOL,
    pub stCbCrTrack: ISP_AWB_CBCR_TRACK_ATTR_S,
    pub stLumaHist: ISP_AWB_LUM_HISTGRAM_ATTR_S,
    pub bAWBZoneWtEn: CVI_BOOL,
    pub au8ZoneWt: [CVI_U8; 1024usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_ATTR_S"][::std::mem::size_of::<_ISP_AWB_ATTR_S>() - 1276usize];
    ["Alignment of _ISP_AWB_ATTR_S"][::std::mem::align_of::<_ISP_AWB_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_AWB_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16RefColorTemp"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16RefColorTemp) - 2usize];
    ["Offset of field: _ISP_AWB_ATTR_S::au16StaticWB"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, au16StaticWB) - 4usize];
    ["Offset of field: _ISP_AWB_ATTR_S::as32CurvePara"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, as32CurvePara) - 12usize];
    ["Offset of field: _ISP_AWB_ATTR_S::enAlgType"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, enAlgType) - 36usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u8RGStrength"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u8RGStrength) - 40usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u8BGStrength"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u8BGStrength) - 41usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16Speed"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16Speed) - 42usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16ZoneSel"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16ZoneSel) - 44usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16HighColorTemp"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16HighColorTemp) - 46usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16LowColorTemp"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16LowColorTemp) - 48usize];
    ["Offset of field: _ISP_AWB_ATTR_S::stCTLimit"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, stCTLimit) - 52usize];
    ["Offset of field: _ISP_AWB_ATTR_S::bShiftLimitEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, bShiftLimitEn) - 68usize];
    ["Offset of field: _ISP_AWB_ATTR_S::u16ShiftLimit"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, u16ShiftLimit) - 70usize];
    ["Offset of field: _ISP_AWB_ATTR_S::bGainNormEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, bGainNormEn) - 86usize];
    ["Offset of field: _ISP_AWB_ATTR_S::bNaturalCastEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, bNaturalCastEn) - 87usize];
    ["Offset of field: _ISP_AWB_ATTR_S::stCbCrTrack"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, stCbCrTrack) - 88usize];
    ["Offset of field: _ISP_AWB_ATTR_S::stLumaHist"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, stLumaHist) - 220usize];
    ["Offset of field: _ISP_AWB_ATTR_S::bAWBZoneWtEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, bAWBZoneWtEn) - 248usize];
    ["Offset of field: _ISP_AWB_ATTR_S::au8ZoneWt"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_S, au8ZoneWt) - 249usize];
};
pub type ISP_AWB_ATTR_S = _ISP_AWB_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_ATTR_EX_S {
    pub u8Tolerance: CVI_U8,
    pub u8ZoneRadius: CVI_U8,
    pub u16CurveLLimit: CVI_U16,
    pub u16CurveRLimit: CVI_U16,
    pub bExtraLightEn: CVI_BOOL,
    pub stLightInfo: [ISP_AWB_EXTRA_LIGHTSOURCE_INFO_S; 4usize],
    pub stInOrOut: ISP_AWB_IN_OUT_ATTR_S,
    pub bMultiLightSourceEn: CVI_BOOL,
    pub enMultiLSType: ISP_AWB_MULTI_LS_TYPE_E,
    pub u16MultiLSScaler: CVI_U16,
    pub au16MultiCTBin: [CVI_U16; 8usize],
    pub au16MultiCTWt: [CVI_U16; 8usize],
    pub bFineTunEn: CVI_BOOL,
    pub u8FineTunStrength: CVI_U8,
    pub stInterfernce: ST_ISP_AWB_INTERFERNCE_S,
    pub stSkin: ST_ISP_AWB_SKIN_S,
    pub stSky: ST_ISP_AWB_SKY_S,
    pub stGrass: ST_ISP_AWB_GRASS_S,
    pub stCtLv: ST_ISP_AWB_CT_WGT_S,
    pub stShiftLv: ST_ISP_AWB_SHIFT_LV_S,
    pub stRegion: ST_ISP_AWB_REGION_S,
    pub adjBgainMode: CVI_U8,
    pub reserve: [CVI_U8; 239usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_ATTR_EX_S"][::std::mem::size_of::<_ISP_AWB_ATTR_EX_S>() - 512usize];
    ["Alignment of _ISP_AWB_ATTR_EX_S"][::std::mem::align_of::<_ISP_AWB_ATTR_EX_S>() - 4usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u8Tolerance"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u8Tolerance) - 0usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u8ZoneRadius"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u8ZoneRadius) - 1usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u16CurveLLimit"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u16CurveLLimit) - 2usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u16CurveRLimit"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u16CurveRLimit) - 4usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::bExtraLightEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, bExtraLightEn) - 6usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stLightInfo"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stLightInfo) - 8usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stInOrOut"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stInOrOut) - 40usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::bMultiLightSourceEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, bMultiLightSourceEn) - 68usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::enMultiLSType"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, enMultiLSType) - 72usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u16MultiLSScaler"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u16MultiLSScaler) - 76usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::au16MultiCTBin"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, au16MultiCTBin) - 78usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::au16MultiCTWt"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, au16MultiCTWt) - 94usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::bFineTunEn"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, bFineTunEn) - 110usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::u8FineTunStrength"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, u8FineTunStrength) - 111usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stInterfernce"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stInterfernce) - 112usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stSkin"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stSkin) - 118usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stSky"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stSky) - 126usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stGrass"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stGrass) - 138usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stCtLv"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stCtLv) - 150usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stShiftLv"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stShiftLv) - 236usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::stRegion"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, stRegion) - 264usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::adjBgainMode"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, adjBgainMode) - 270usize];
    ["Offset of field: _ISP_AWB_ATTR_EX_S::reserve"]
        [::std::mem::offset_of!(_ISP_AWB_ATTR_EX_S, reserve) - 271usize];
};
pub type ISP_AWB_ATTR_EX_S = _ISP_AWB_ATTR_EX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MWB_ATTR_S {
    pub u16Rgain: CVI_U16,
    pub u16Grgain: CVI_U16,
    pub u16Gbgain: CVI_U16,
    pub u16Bgain: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MWB_ATTR_S"][::std::mem::size_of::<_ISP_MWB_ATTR_S>() - 8usize];
    ["Alignment of _ISP_MWB_ATTR_S"][::std::mem::align_of::<_ISP_MWB_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_MWB_ATTR_S::u16Rgain"]
        [::std::mem::offset_of!(_ISP_MWB_ATTR_S, u16Rgain) - 0usize];
    ["Offset of field: _ISP_MWB_ATTR_S::u16Grgain"]
        [::std::mem::offset_of!(_ISP_MWB_ATTR_S, u16Grgain) - 2usize];
    ["Offset of field: _ISP_MWB_ATTR_S::u16Gbgain"]
        [::std::mem::offset_of!(_ISP_MWB_ATTR_S, u16Gbgain) - 4usize];
    ["Offset of field: _ISP_MWB_ATTR_S::u16Bgain"]
        [::std::mem::offset_of!(_ISP_MWB_ATTR_S, u16Bgain) - 6usize];
};
pub type ISP_MWB_ATTR_S = _ISP_MWB_ATTR_S;
pub const _ISP_AWB_ALG_E_ALG_AWB: _ISP_AWB_ALG_E = 0;
pub const _ISP_AWB_ALG_E_ALG_AWB_SPEC: _ISP_AWB_ALG_E = 1;
pub const _ISP_AWB_ALG_E_ALG_BUTT: _ISP_AWB_ALG_E = 2;
pub type _ISP_AWB_ALG_E = ::std::os::raw::c_uint;
pub use self::_ISP_AWB_ALG_E as ISP_AWB_ALG_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WB_ATTR_S {
    pub bByPass: CVI_BOOL,
    pub u8AWBRunInterval: CVI_U8,
    pub enOpType: ISP_OP_TYPE_E,
    pub stManual: ISP_MWB_ATTR_S,
    pub stAuto: ISP_AWB_ATTR_S,
    pub enAlgType: ISP_AWB_ALG_E,
    pub u8DebugMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WB_ATTR_S"][::std::mem::size_of::<_ISP_WB_ATTR_S>() - 1300usize];
    ["Alignment of _ISP_WB_ATTR_S"][::std::mem::align_of::<_ISP_WB_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_WB_ATTR_S::bByPass"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, bByPass) - 0usize];
    ["Offset of field: _ISP_WB_ATTR_S::u8AWBRunInterval"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, u8AWBRunInterval) - 1usize];
    ["Offset of field: _ISP_WB_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_WB_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, stManual) - 8usize];
    ["Offset of field: _ISP_WB_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, stAuto) - 16usize];
    ["Offset of field: _ISP_WB_ATTR_S::enAlgType"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, enAlgType) - 1292usize];
    ["Offset of field: _ISP_WB_ATTR_S::u8DebugMode"]
        [::std::mem::offset_of!(_ISP_WB_ATTR_S, u8DebugMode) - 1296usize];
};
pub type ISP_WB_ATTR_S = _ISP_WB_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_WB_INFO_S {
    pub u16Rgain: CVI_U16,
    pub u16Grgain: CVI_U16,
    pub u16Gbgain: CVI_U16,
    pub u16Bgain: CVI_U16,
    pub u16Saturation: CVI_U16,
    pub u16ColorTemp: CVI_U16,
    pub au16CCM: [CVI_U16; 9usize],
    pub u16LS0CT: CVI_U16,
    pub u16LS1CT: CVI_U16,
    pub u16LS0Area: CVI_U16,
    pub u16LS1Area: CVI_U16,
    pub u8MultiDegree: CVI_U8,
    pub u16ActiveShift: CVI_U16,
    pub u32FirstStableTime: CVI_U32,
    pub enInOutStatus: ISP_AWB_INDOOR_OUTDOOR_STATUS_E,
    pub s16Bv: CVI_S16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_WB_INFO_S"][::std::mem::size_of::<_ISP_WB_INFO_S>() - 56usize];
    ["Alignment of _ISP_WB_INFO_S"][::std::mem::align_of::<_ISP_WB_INFO_S>() - 4usize];
    ["Offset of field: _ISP_WB_INFO_S::u16Rgain"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16Rgain) - 0usize];
    ["Offset of field: _ISP_WB_INFO_S::u16Grgain"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16Grgain) - 2usize];
    ["Offset of field: _ISP_WB_INFO_S::u16Gbgain"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16Gbgain) - 4usize];
    ["Offset of field: _ISP_WB_INFO_S::u16Bgain"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16Bgain) - 6usize];
    ["Offset of field: _ISP_WB_INFO_S::u16Saturation"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16Saturation) - 8usize];
    ["Offset of field: _ISP_WB_INFO_S::u16ColorTemp"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16ColorTemp) - 10usize];
    ["Offset of field: _ISP_WB_INFO_S::au16CCM"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, au16CCM) - 12usize];
    ["Offset of field: _ISP_WB_INFO_S::u16LS0CT"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16LS0CT) - 30usize];
    ["Offset of field: _ISP_WB_INFO_S::u16LS1CT"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16LS1CT) - 32usize];
    ["Offset of field: _ISP_WB_INFO_S::u16LS0Area"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16LS0Area) - 34usize];
    ["Offset of field: _ISP_WB_INFO_S::u16LS1Area"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16LS1Area) - 36usize];
    ["Offset of field: _ISP_WB_INFO_S::u8MultiDegree"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u8MultiDegree) - 38usize];
    ["Offset of field: _ISP_WB_INFO_S::u16ActiveShift"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u16ActiveShift) - 40usize];
    ["Offset of field: _ISP_WB_INFO_S::u32FirstStableTime"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, u32FirstStableTime) - 44usize];
    ["Offset of field: _ISP_WB_INFO_S::enInOutStatus"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, enInOutStatus) - 48usize];
    ["Offset of field: _ISP_WB_INFO_S::s16Bv"]
        [::std::mem::offset_of!(_ISP_WB_INFO_S, s16Bv) - 52usize];
};
pub type ISP_WB_INFO_S = _ISP_WB_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCF_CONST_INFO_S {
    pub au8ImageDescription: [CVI_U8; 32usize],
    pub au8Make: [CVI_U8; 32usize],
    pub au8Model: [CVI_U8; 32usize],
    pub au8Software: [CVI_U8; 32usize],
    pub u8LightSource: CVI_U8,
    pub u32FocalLength: CVI_U32,
    pub u8SceneType: CVI_U8,
    pub u8CustomRendered: CVI_U8,
    pub u8FocalLengthIn35mmFilm: CVI_U8,
    pub u8SceneCaptureType: CVI_U8,
    pub u8GainControl: CVI_U8,
    pub u8Contrast: CVI_U8,
    pub u8Saturation: CVI_U8,
    pub u8Sharpness: CVI_U8,
    pub u8MeteringMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCF_CONST_INFO_S"][::std::mem::size_of::<_ISP_DCF_CONST_INFO_S>() - 148usize];
    ["Alignment of _ISP_DCF_CONST_INFO_S"]
        [::std::mem::align_of::<_ISP_DCF_CONST_INFO_S>() - 4usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::au8ImageDescription"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, au8ImageDescription) - 0usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::au8Make"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, au8Make) - 32usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::au8Model"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, au8Model) - 64usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::au8Software"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, au8Software) - 96usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8LightSource"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8LightSource) - 128usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u32FocalLength"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u32FocalLength) - 132usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8SceneType"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8SceneType) - 136usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8CustomRendered"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8CustomRendered) - 137usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8FocalLengthIn35mmFilm"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8FocalLengthIn35mmFilm) - 138usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8SceneCaptureType"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8SceneCaptureType) - 139usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8GainControl"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8GainControl) - 140usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8Contrast"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8Contrast) - 141usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8Saturation) - 142usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8Sharpness"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8Sharpness) - 143usize];
    ["Offset of field: _ISP_DCF_CONST_INFO_S::u8MeteringMode"]
        [::std::mem::offset_of!(_ISP_DCF_CONST_INFO_S, u8MeteringMode) - 144usize];
};
pub type ISP_DCF_CONST_INFO_S = _ISP_DCF_CONST_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCF_UPDATE_INFO_S {
    pub u32ISOSpeedRatings: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub u32ExposureBiasValue: CVI_U32,
    pub u8ExposureProgram: CVI_U8,
    pub u32FNumber: CVI_U32,
    pub u32MaxApertureValue: CVI_U32,
    pub u8ExposureMode: CVI_U8,
    pub u8WhiteBalance: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCF_UPDATE_INFO_S"][::std::mem::size_of::<_ISP_DCF_UPDATE_INFO_S>() - 28usize];
    ["Alignment of _ISP_DCF_UPDATE_INFO_S"]
        [::std::mem::align_of::<_ISP_DCF_UPDATE_INFO_S>() - 4usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u32ISOSpeedRatings"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u32ISOSpeedRatings) - 0usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u32ExposureTime) - 4usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u32ExposureBiasValue"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u32ExposureBiasValue) - 8usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u8ExposureProgram"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u8ExposureProgram) - 12usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u32FNumber"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u32FNumber) - 16usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u32MaxApertureValue"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u32MaxApertureValue) - 20usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u8ExposureMode"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u8ExposureMode) - 24usize];
    ["Offset of field: _ISP_DCF_UPDATE_INFO_S::u8WhiteBalance"]
        [::std::mem::offset_of!(_ISP_DCF_UPDATE_INFO_S, u8WhiteBalance) - 25usize];
};
pub type ISP_DCF_UPDATE_INFO_S = _ISP_DCF_UPDATE_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCF_INFO_S {
    pub stIspDCFConstInfo: ISP_DCF_CONST_INFO_S,
    pub stIspDCFUpdateInfo: ISP_DCF_UPDATE_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCF_INFO_S"][::std::mem::size_of::<_ISP_DCF_INFO_S>() - 176usize];
    ["Alignment of _ISP_DCF_INFO_S"][::std::mem::align_of::<_ISP_DCF_INFO_S>() - 4usize];
    ["Offset of field: _ISP_DCF_INFO_S::stIspDCFConstInfo"]
        [::std::mem::offset_of!(_ISP_DCF_INFO_S, stIspDCFConstInfo) - 0usize];
    ["Offset of field: _ISP_DCF_INFO_S::stIspDCFUpdateInfo"]
        [::std::mem::offset_of!(_ISP_DCF_INFO_S, stIspDCFUpdateInfo) - 148usize];
};
pub type ISP_DCF_INFO_S = _ISP_DCF_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MOD_PARAM_S {
    pub u32IntBotHalf: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MOD_PARAM_S"][::std::mem::size_of::<_ISP_MOD_PARAM_S>() - 4usize];
    ["Alignment of _ISP_MOD_PARAM_S"][::std::mem::align_of::<_ISP_MOD_PARAM_S>() - 4usize];
    ["Offset of field: _ISP_MOD_PARAM_S::u32IntBotHalf"]
        [::std::mem::offset_of!(_ISP_MOD_PARAM_S, u32IntBotHalf) - 0usize];
};
pub type ISP_MOD_PARAM_S = _ISP_MOD_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BLACK_LEVEL_MANUAL_ATTR_S {
    pub OffsetR: CVI_U16,
    pub OffsetGr: CVI_U16,
    pub OffsetGb: CVI_U16,
    pub OffsetB: CVI_U16,
    pub OffsetR2: CVI_U16,
    pub OffsetGr2: CVI_U16,
    pub OffsetGb2: CVI_U16,
    pub OffsetB2: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BLACK_LEVEL_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_BLACK_LEVEL_MANUAL_ATTR_S>() - 16usize];
    ["Alignment of _ISP_BLACK_LEVEL_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_BLACK_LEVEL_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetR"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetR) - 0usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetGr"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetGr) - 2usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetGb"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetGb) - 4usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetB"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetB) - 6usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetR2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetR2) - 8usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetGr2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetGr2) - 10usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetGb2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetGb2) - 12usize];
    ["Offset of field: _ISP_BLACK_LEVEL_MANUAL_ATTR_S::OffsetB2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_MANUAL_ATTR_S, OffsetB2) - 14usize];
};
pub type ISP_BLACK_LEVEL_MANUAL_ATTR_S = _ISP_BLACK_LEVEL_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BLACK_LEVEL_AUTO_ATTR_S {
    pub OffsetR: [CVI_U16; 16usize],
    pub OffsetGr: [CVI_U16; 16usize],
    pub OffsetGb: [CVI_U16; 16usize],
    pub OffsetB: [CVI_U16; 16usize],
    pub OffsetR2: [CVI_U16; 16usize],
    pub OffsetGr2: [CVI_U16; 16usize],
    pub OffsetGb2: [CVI_U16; 16usize],
    pub OffsetB2: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BLACK_LEVEL_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_BLACK_LEVEL_AUTO_ATTR_S>() - 256usize];
    ["Alignment of _ISP_BLACK_LEVEL_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_BLACK_LEVEL_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetR"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetR) - 0usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetGr"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetGr) - 32usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetGb"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetGb) - 64usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetB"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetB) - 96usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetR2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetR2) - 128usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetGr2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetGr2) - 160usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetGb2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetGb2) - 192usize];
    ["Offset of field: _ISP_BLACK_LEVEL_AUTO_ATTR_S::OffsetB2"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_AUTO_ATTR_S, OffsetB2) - 224usize];
};
pub type ISP_BLACK_LEVEL_AUTO_ATTR_S = _ISP_BLACK_LEVEL_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BLACK_LEVEL_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_BLACK_LEVEL_MANUAL_ATTR_S,
    pub stAuto: ISP_BLACK_LEVEL_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BLACK_LEVEL_ATTR_S"]
        [::std::mem::size_of::<_ISP_BLACK_LEVEL_ATTR_S>() - 284usize];
    ["Alignment of _ISP_BLACK_LEVEL_ATTR_S"]
        [::std::mem::align_of::<_ISP_BLACK_LEVEL_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_BLACK_LEVEL_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_BLACK_LEVEL_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_BLACK_LEVEL_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_BLACK_LEVEL_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_BLACK_LEVEL_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_BLACK_LEVEL_ATTR_S, stAuto) - 26usize];
};
pub type ISP_BLACK_LEVEL_ATTR_S = _ISP_BLACK_LEVEL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DP_DYNAMIC_MANUAL_ATTR_S {
    pub ClusterSize: CVI_U8,
    pub BrightDefectToNormalPixRatio: CVI_U8,
    pub DarkDefectToNormalPixRatio: CVI_U8,
    pub FlatThreR: CVI_U8,
    pub FlatThreG: CVI_U8,
    pub FlatThreB: CVI_U8,
    pub FlatThreMinG: CVI_U8,
    pub FlatThreMinRB: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DP_DYNAMIC_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_DP_DYNAMIC_MANUAL_ATTR_S>() - 8usize];
    ["Alignment of _ISP_DP_DYNAMIC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DP_DYNAMIC_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::ClusterSize"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, ClusterSize) - 0usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::BrightDefectToNormalPixRatio"][::std::mem::offset_of!(
        _ISP_DP_DYNAMIC_MANUAL_ATTR_S,
        BrightDefectToNormalPixRatio
    ) - 1usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::DarkDefectToNormalPixRatio"][::std::mem::offset_of!(
        _ISP_DP_DYNAMIC_MANUAL_ATTR_S,
        DarkDefectToNormalPixRatio
    ) - 2usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::FlatThreR"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, FlatThreR) - 3usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::FlatThreG"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, FlatThreG) - 4usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::FlatThreB"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, FlatThreB) - 5usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::FlatThreMinG"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, FlatThreMinG) - 6usize];
    ["Offset of field: _ISP_DP_DYNAMIC_MANUAL_ATTR_S::FlatThreMinRB"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_MANUAL_ATTR_S, FlatThreMinRB) - 7usize];
};
pub type ISP_DP_DYNAMIC_MANUAL_ATTR_S = _ISP_DP_DYNAMIC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DP_DYNAMIC_AUTO_ATTR_S {
    pub ClusterSize: [CVI_U8; 16usize],
    pub BrightDefectToNormalPixRatio: [CVI_U8; 16usize],
    pub DarkDefectToNormalPixRatio: [CVI_U8; 16usize],
    pub FlatThreR: [CVI_U8; 16usize],
    pub FlatThreG: [CVI_U8; 16usize],
    pub FlatThreB: [CVI_U8; 16usize],
    pub FlatThreMinG: [CVI_U8; 16usize],
    pub FlatThreMinRB: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DP_DYNAMIC_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_DP_DYNAMIC_AUTO_ATTR_S>() - 128usize];
    ["Alignment of _ISP_DP_DYNAMIC_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_DP_DYNAMIC_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::ClusterSize"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, ClusterSize) - 0usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::BrightDefectToNormalPixRatio"][::std::mem::offset_of!(
        _ISP_DP_DYNAMIC_AUTO_ATTR_S,
        BrightDefectToNormalPixRatio
    ) - 16usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::DarkDefectToNormalPixRatio"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, DarkDefectToNormalPixRatio) - 32usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::FlatThreR"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, FlatThreR) - 48usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::FlatThreG"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, FlatThreG) - 64usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::FlatThreB"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, FlatThreB) - 80usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::FlatThreMinG"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, FlatThreMinG) - 96usize];
    ["Offset of field: _ISP_DP_DYNAMIC_AUTO_ATTR_S::FlatThreMinRB"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_AUTO_ATTR_S, FlatThreMinRB) - 112usize];
};
pub type ISP_DP_DYNAMIC_AUTO_ATTR_S = _ISP_DP_DYNAMIC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DP_DYNAMIC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub DynamicDPCEnable: CVI_U32,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_DP_DYNAMIC_MANUAL_ATTR_S,
    pub stAuto: ISP_DP_DYNAMIC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DP_DYNAMIC_ATTR_S"][::std::mem::size_of::<_ISP_DP_DYNAMIC_ATTR_S>() - 152usize];
    ["Alignment of _ISP_DP_DYNAMIC_ATTR_S"]
        [::std::mem::align_of::<_ISP_DP_DYNAMIC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::DynamicDPCEnable"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, DynamicDPCEnable) - 4usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, enOpType) - 8usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, UpdateInterval) - 12usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, stManual) - 13usize];
    ["Offset of field: _ISP_DP_DYNAMIC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DP_DYNAMIC_ATTR_S, stAuto) - 21usize];
};
pub type ISP_DP_DYNAMIC_ATTR_S = _ISP_DP_DYNAMIC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DP_STATIC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub BrightCount: CVI_U16,
    pub DarkCount: CVI_U16,
    pub BrightTable: [CVI_U32; 4096usize],
    pub DarkTable: [CVI_U32; 4096usize],
    pub Show: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DP_STATIC_ATTR_S"][::std::mem::size_of::<_ISP_DP_STATIC_ATTR_S>() - 32780usize];
    ["Alignment of _ISP_DP_STATIC_ATTR_S"]
        [::std::mem::align_of::<_ISP_DP_STATIC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::BrightCount"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, BrightCount) - 2usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::DarkCount"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, DarkCount) - 4usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::BrightTable"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, BrightTable) - 8usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::DarkTable"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, DarkTable) - 16392usize];
    ["Offset of field: _ISP_DP_STATIC_ATTR_S::Show"]
        [::std::mem::offset_of!(_ISP_DP_STATIC_ATTR_S, Show) - 32776usize];
};
pub type ISP_DP_STATIC_ATTR_S = _ISP_DP_STATIC_ATTR_S;
pub const _CVI_STATIC_DP_TYPE_E_ISP_STATIC_DP_BRIGHT: _CVI_STATIC_DP_TYPE_E = 0;
pub const _CVI_STATIC_DP_TYPE_E_ISP_STATIC_DP_DARK: _CVI_STATIC_DP_TYPE_E = 1;
pub type _CVI_STATIC_DP_TYPE_E = ::std::os::raw::c_uint;
pub use self::_CVI_STATIC_DP_TYPE_E as CVI_STATIC_DP_TYPE_E;
pub const _ISP_STATUS_E_ISP_STATUS_INIT: _ISP_STATUS_E = 0;
pub const _ISP_STATUS_E_ISP_STATUS_SUCCESS: _ISP_STATUS_E = 1;
pub const _ISP_STATUS_E_ISP_STATUS_TIMEOUT: _ISP_STATUS_E = 2;
pub const _ISP_STATUS_E_ISP_STATUS_SIZE: _ISP_STATUS_E = 3;
pub type _ISP_STATUS_E = ::std::os::raw::c_uint;
pub use self::_ISP_STATUS_E as ISP_STATUS_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DP_CALIB_ATTR_S {
    pub EnableDetect: CVI_BOOL,
    pub StaticDPType: CVI_STATIC_DP_TYPE_E,
    pub StartThresh: CVI_U8,
    pub CountMax: CVI_U16,
    pub CountMin: CVI_U16,
    pub TimeLimit: CVI_U16,
    pub saveFileEn: CVI_BOOL,
    pub Table: [CVI_U32; 4096usize],
    pub FinishThresh: CVI_U8,
    pub Count: CVI_U16,
    pub Status: ISP_STATUS_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DP_CALIB_ATTR_S"][::std::mem::size_of::<_ISP_DP_CALIB_ATTR_S>() - 16412usize];
    ["Alignment of _ISP_DP_CALIB_ATTR_S"][::std::mem::align_of::<_ISP_DP_CALIB_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::EnableDetect"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, EnableDetect) - 0usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::StaticDPType"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, StaticDPType) - 4usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::StartThresh"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, StartThresh) - 8usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::CountMax"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, CountMax) - 10usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::CountMin"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, CountMin) - 12usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::TimeLimit"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, TimeLimit) - 14usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::saveFileEn"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, saveFileEn) - 16usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::Table"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, Table) - 20usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::FinishThresh"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, FinishThresh) - 16404usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::Count"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, Count) - 16406usize];
    ["Offset of field: _ISP_DP_CALIB_ATTR_S::Status"]
        [::std::mem::offset_of!(_ISP_DP_CALIB_ATTR_S, Status) - 16408usize];
};
pub type ISP_DP_CALIB_ATTR_S = _ISP_DP_CALIB_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CROSSTALK_MANUAL_ATTR_S {
    pub Strength: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CROSSTALK_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_CROSSTALK_MANUAL_ATTR_S>() - 2usize];
    ["Alignment of _ISP_CROSSTALK_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CROSSTALK_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CROSSTALK_MANUAL_ATTR_S::Strength"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_MANUAL_ATTR_S, Strength) - 0usize];
};
pub type ISP_CROSSTALK_MANUAL_ATTR_S = _ISP_CROSSTALK_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CROSSTALK_AUTO_ATTR_S {
    pub Strength: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CROSSTALK_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_CROSSTALK_AUTO_ATTR_S>() - 32usize];
    ["Alignment of _ISP_CROSSTALK_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_CROSSTALK_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CROSSTALK_AUTO_ATTR_S::Strength"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_AUTO_ATTR_S, Strength) - 0usize];
};
pub type ISP_CROSSTALK_AUTO_ATTR_S = _ISP_CROSSTALK_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CROSSTALK_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub GrGbDiffThreSec: [CVI_U16; 4usize],
    pub FlatThre: [CVI_U16; 4usize],
    pub stManual: ISP_CROSSTALK_MANUAL_ATTR_S,
    pub stAuto: ISP_CROSSTALK_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CROSSTALK_ATTR_S"][::std::mem::size_of::<_ISP_CROSSTALK_ATTR_S>() - 60usize];
    ["Alignment of _ISP_CROSSTALK_ATTR_S"]
        [::std::mem::align_of::<_ISP_CROSSTALK_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::GrGbDiffThreSec"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, GrGbDiffThreSec) - 10usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::FlatThre"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, FlatThre) - 18usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, stManual) - 26usize];
    ["Offset of field: _ISP_CROSSTALK_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CROSSTALK_ATTR_S, stAuto) - 28usize];
};
pub type ISP_CROSSTALK_ATTR_S = _ISP_CROSSTALK_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_MANUAL_ATTR_S {
    pub WindowType: CVI_U8,
    pub DetailSmoothMode: CVI_U8,
    pub NoiseSuppressStr: CVI_U8,
    pub FilterType: CVI_U8,
    pub NoiseSuppressStrMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_NR_MANUAL_ATTR_S>() - 5usize];
    ["Alignment of _ISP_NR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_NR_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_NR_MANUAL_ATTR_S::WindowType"]
        [::std::mem::offset_of!(_ISP_NR_MANUAL_ATTR_S, WindowType) - 0usize];
    ["Offset of field: _ISP_NR_MANUAL_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_NR_MANUAL_ATTR_S, DetailSmoothMode) - 1usize];
    ["Offset of field: _ISP_NR_MANUAL_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_NR_MANUAL_ATTR_S, NoiseSuppressStr) - 2usize];
    ["Offset of field: _ISP_NR_MANUAL_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_NR_MANUAL_ATTR_S, FilterType) - 3usize];
    ["Offset of field: _ISP_NR_MANUAL_ATTR_S::NoiseSuppressStrMode"]
        [::std::mem::offset_of!(_ISP_NR_MANUAL_ATTR_S, NoiseSuppressStrMode) - 4usize];
};
pub type ISP_NR_MANUAL_ATTR_S = _ISP_NR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_AUTO_ATTR_S {
    pub WindowType: [CVI_U8; 16usize],
    pub DetailSmoothMode: [CVI_U8; 16usize],
    pub NoiseSuppressStr: [CVI_U8; 16usize],
    pub FilterType: [CVI_U8; 16usize],
    pub NoiseSuppressStrMode: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_NR_AUTO_ATTR_S>() - 80usize];
    ["Alignment of _ISP_NR_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_NR_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_NR_AUTO_ATTR_S::WindowType"]
        [::std::mem::offset_of!(_ISP_NR_AUTO_ATTR_S, WindowType) - 0usize];
    ["Offset of field: _ISP_NR_AUTO_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_NR_AUTO_ATTR_S, DetailSmoothMode) - 16usize];
    ["Offset of field: _ISP_NR_AUTO_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_NR_AUTO_ATTR_S, NoiseSuppressStr) - 32usize];
    ["Offset of field: _ISP_NR_AUTO_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_NR_AUTO_ATTR_S, FilterType) - 48usize];
    ["Offset of field: _ISP_NR_AUTO_ATTR_S::NoiseSuppressStrMode"]
        [::std::mem::offset_of!(_ISP_NR_AUTO_ATTR_S, NoiseSuppressStrMode) - 64usize];
};
pub type ISP_NR_AUTO_ATTR_S = _ISP_NR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub CoringParamEnable: CVI_BOOL,
    pub stManual: ISP_NR_MANUAL_ATTR_S,
    pub stAuto: ISP_NR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_ATTR_S"][::std::mem::size_of::<_ISP_NR_ATTR_S>() - 96usize];
    ["Alignment of _ISP_NR_ATTR_S"][::std::mem::align_of::<_ISP_NR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_NR_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_NR_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_NR_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_NR_ATTR_S::CoringParamEnable"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, CoringParamEnable) - 9usize];
    ["Offset of field: _ISP_NR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_NR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_NR_ATTR_S, stAuto) - 15usize];
};
pub type ISP_NR_ATTR_S = _ISP_NR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_FILTER_MANUAL_ATTR_S {
    pub LumaStr: [CVI_U8; 8usize],
    pub VarThr: CVI_U8,
    pub CoringWgtLF: CVI_U16,
    pub CoringWgtHF: CVI_U16,
    pub NonDirFiltStr: CVI_U8,
    pub VhDirFiltStr: CVI_U8,
    pub AaDirFiltStr: CVI_U8,
    pub NpSlopeR: CVI_U16,
    pub NpSlopeGr: CVI_U16,
    pub NpSlopeGb: CVI_U16,
    pub NpSlopeB: CVI_U16,
    pub NpLumaThrR: CVI_U16,
    pub NpLumaThrGr: CVI_U16,
    pub NpLumaThrGb: CVI_U16,
    pub NpLumaThrB: CVI_U16,
    pub NpLowOffsetR: CVI_U16,
    pub NpLowOffsetGr: CVI_U16,
    pub NpLowOffsetGb: CVI_U16,
    pub NpLowOffsetB: CVI_U16,
    pub NpHighOffsetR: CVI_U16,
    pub NpHighOffsetGr: CVI_U16,
    pub NpHighOffsetGb: CVI_U16,
    pub NpHighOffsetB: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_FILTER_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_NR_FILTER_MANUAL_ATTR_S>() - 50usize];
    ["Alignment of _ISP_NR_FILTER_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_NR_FILTER_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::LumaStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, LumaStr) - 0usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::VarThr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, VarThr) - 8usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::CoringWgtLF"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, CoringWgtLF) - 10usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::CoringWgtHF"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, CoringWgtHF) - 12usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NonDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NonDirFiltStr) - 14usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::VhDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, VhDirFiltStr) - 15usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::AaDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, AaDirFiltStr) - 16usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpSlopeR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpSlopeR) - 18usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpSlopeGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpSlopeGr) - 20usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpSlopeGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpSlopeGb) - 22usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpSlopeB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpSlopeB) - 24usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLumaThrR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLumaThrR) - 26usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLumaThrGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLumaThrGr) - 28usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLumaThrGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLumaThrGb) - 30usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLumaThrB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLumaThrB) - 32usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLowOffsetR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLowOffsetR) - 34usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLowOffsetGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLowOffsetGr) - 36usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLowOffsetGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLowOffsetGb) - 38usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpLowOffsetB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpLowOffsetB) - 40usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpHighOffsetR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpHighOffsetR) - 42usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpHighOffsetGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpHighOffsetGr) - 44usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpHighOffsetGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpHighOffsetGb) - 46usize];
    ["Offset of field: _ISP_NR_FILTER_MANUAL_ATTR_S::NpHighOffsetB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_MANUAL_ATTR_S, NpHighOffsetB) - 48usize];
};
pub type ISP_NR_FILTER_MANUAL_ATTR_S = _ISP_NR_FILTER_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_FILTER_AUTO_ATTR_S {
    pub LumaStr: [[CVI_U8; 16usize]; 8usize],
    pub VarThr: [CVI_U8; 16usize],
    pub CoringWgtLF: [CVI_U16; 16usize],
    pub CoringWgtHF: [CVI_U16; 16usize],
    pub NonDirFiltStr: [CVI_U8; 16usize],
    pub VhDirFiltStr: [CVI_U8; 16usize],
    pub AaDirFiltStr: [CVI_U8; 16usize],
    pub NpSlopeR: [CVI_U16; 16usize],
    pub NpSlopeGr: [CVI_U16; 16usize],
    pub NpSlopeGb: [CVI_U16; 16usize],
    pub NpSlopeB: [CVI_U16; 16usize],
    pub NpLumaThrR: [CVI_U16; 16usize],
    pub NpLumaThrGr: [CVI_U16; 16usize],
    pub NpLumaThrGb: [CVI_U16; 16usize],
    pub NpLumaThrB: [CVI_U16; 16usize],
    pub NpLowOffsetR: [CVI_U16; 16usize],
    pub NpLowOffsetGr: [CVI_U16; 16usize],
    pub NpLowOffsetGb: [CVI_U16; 16usize],
    pub NpLowOffsetB: [CVI_U16; 16usize],
    pub NpHighOffsetR: [CVI_U16; 16usize],
    pub NpHighOffsetGr: [CVI_U16; 16usize],
    pub NpHighOffsetGb: [CVI_U16; 16usize],
    pub NpHighOffsetB: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_FILTER_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_NR_FILTER_AUTO_ATTR_S>() - 768usize];
    ["Alignment of _ISP_NR_FILTER_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_NR_FILTER_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::LumaStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, LumaStr) - 0usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::VarThr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, VarThr) - 128usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::CoringWgtLF"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, CoringWgtLF) - 144usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::CoringWgtHF"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, CoringWgtHF) - 176usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NonDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NonDirFiltStr) - 208usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::VhDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, VhDirFiltStr) - 224usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::AaDirFiltStr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, AaDirFiltStr) - 240usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpSlopeR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpSlopeR) - 256usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpSlopeGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpSlopeGr) - 288usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpSlopeGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpSlopeGb) - 320usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpSlopeB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpSlopeB) - 352usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLumaThrR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLumaThrR) - 384usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLumaThrGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLumaThrGr) - 416usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLumaThrGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLumaThrGb) - 448usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLumaThrB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLumaThrB) - 480usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLowOffsetR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLowOffsetR) - 512usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLowOffsetGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLowOffsetGr) - 544usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLowOffsetGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLowOffsetGb) - 576usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpLowOffsetB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpLowOffsetB) - 608usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpHighOffsetR"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpHighOffsetR) - 640usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpHighOffsetGr"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpHighOffsetGr) - 672usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpHighOffsetGb"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpHighOffsetGb) - 704usize];
    ["Offset of field: _ISP_NR_FILTER_AUTO_ATTR_S::NpHighOffsetB"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_AUTO_ATTR_S, NpHighOffsetB) - 736usize];
};
pub type ISP_NR_FILTER_AUTO_ATTR_S = _ISP_NR_FILTER_AUTO_ATTR_S;
pub const _ISP_NR_TUNING_MODE_E_NR_RESULT: _ISP_NR_TUNING_MODE_E = 8;
pub const _ISP_NR_TUNING_MODE_E_NR_EDGE_SMOOTH_REGION: _ISP_NR_TUNING_MODE_E = 11;
pub type _ISP_NR_TUNING_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_NR_TUNING_MODE_E as ISP_NR_TUNING_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_NR_FILTER_ATTR_S {
    pub TuningMode: CVI_U8,
    pub stManual: ISP_NR_FILTER_MANUAL_ATTR_S,
    pub stAuto: ISP_NR_FILTER_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_NR_FILTER_ATTR_S"][::std::mem::size_of::<_ISP_NR_FILTER_ATTR_S>() - 820usize];
    ["Alignment of _ISP_NR_FILTER_ATTR_S"]
        [::std::mem::align_of::<_ISP_NR_FILTER_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_NR_FILTER_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_ATTR_S, TuningMode) - 0usize];
    ["Offset of field: _ISP_NR_FILTER_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_ATTR_S, stManual) - 2usize];
    ["Offset of field: _ISP_NR_FILTER_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_NR_FILTER_ATTR_S, stAuto) - 52usize];
};
pub type ISP_NR_FILTER_ATTR_S = _ISP_NR_FILTER_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RLSC_MANUAL_ATTR_S {
    pub RadialStr: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RLSC_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_RLSC_MANUAL_ATTR_S>() - 2usize];
    ["Alignment of _ISP_RLSC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_RLSC_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_RLSC_MANUAL_ATTR_S::RadialStr"]
        [::std::mem::offset_of!(_ISP_RLSC_MANUAL_ATTR_S, RadialStr) - 0usize];
};
pub type ISP_RLSC_MANUAL_ATTR_S = _ISP_RLSC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RLSC_AUTO_ATTR_S {
    pub RadialStr: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RLSC_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_RLSC_AUTO_ATTR_S>() - 32usize];
    ["Alignment of _ISP_RLSC_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_RLSC_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_RLSC_AUTO_ATTR_S::RadialStr"]
        [::std::mem::offset_of!(_ISP_RLSC_AUTO_ATTR_S, RadialStr) - 0usize];
};
pub type ISP_RLSC_AUTO_ATTR_S = _ISP_RLSC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RLSC_ATTR_S {
    pub RlscEnable: CVI_BOOL,
    pub RlscCenterX: CVI_U16,
    pub RlscCenterY: CVI_U16,
    pub stManual: ISP_RLSC_MANUAL_ATTR_S,
    pub stAuto: ISP_RLSC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RLSC_ATTR_S"][::std::mem::size_of::<_ISP_RLSC_ATTR_S>() - 40usize];
    ["Alignment of _ISP_RLSC_ATTR_S"][::std::mem::align_of::<_ISP_RLSC_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_RLSC_ATTR_S::RlscEnable"]
        [::std::mem::offset_of!(_ISP_RLSC_ATTR_S, RlscEnable) - 0usize];
    ["Offset of field: _ISP_RLSC_ATTR_S::RlscCenterX"]
        [::std::mem::offset_of!(_ISP_RLSC_ATTR_S, RlscCenterX) - 2usize];
    ["Offset of field: _ISP_RLSC_ATTR_S::RlscCenterY"]
        [::std::mem::offset_of!(_ISP_RLSC_ATTR_S, RlscCenterY) - 4usize];
    ["Offset of field: _ISP_RLSC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_RLSC_ATTR_S, stManual) - 6usize];
    ["Offset of field: _ISP_RLSC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_RLSC_ATTR_S, stAuto) - 8usize];
};
pub type ISP_RLSC_ATTR_S = _ISP_RLSC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_MANUAL_ATTR_S {
    pub CoarseEdgeThr: CVI_U16,
    pub CoarseStr: CVI_U16,
    pub FineEdgeThr: CVI_U16,
    pub FineStr: CVI_U16,
    pub RbSigLumaThd: CVI_U16,
    pub FilterMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEMOSAIC_MANUAL_ATTR_S>() - 12usize];
    ["Alignment of _ISP_DEMOSAIC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEMOSAIC_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::CoarseEdgeThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, CoarseEdgeThr) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::CoarseStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, CoarseStr) - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::FineEdgeThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, FineEdgeThr) - 4usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::FineStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, FineStr) - 6usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::RbSigLumaThd"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, RbSigLumaThd) - 8usize];
    ["Offset of field: _ISP_DEMOSAIC_MANUAL_ATTR_S::FilterMode"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_MANUAL_ATTR_S, FilterMode) - 10usize];
};
pub type ISP_DEMOSAIC_MANUAL_ATTR_S = _ISP_DEMOSAIC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_AUTO_ATTR_S {
    pub CoarseEdgeThr: [CVI_U16; 16usize],
    pub CoarseStr: [CVI_U16; 16usize],
    pub FineEdgeThr: [CVI_U16; 16usize],
    pub FineStr: [CVI_U16; 16usize],
    pub RbSigLumaThd: [CVI_U16; 16usize],
    pub FilterMode: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEMOSAIC_AUTO_ATTR_S>() - 176usize];
    ["Alignment of _ISP_DEMOSAIC_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEMOSAIC_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::CoarseEdgeThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, CoarseEdgeThr) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::CoarseStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, CoarseStr) - 32usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::FineEdgeThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, FineEdgeThr) - 64usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::FineStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, FineStr) - 96usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::RbSigLumaThd"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, RbSigLumaThd) - 128usize];
    ["Offset of field: _ISP_DEMOSAIC_AUTO_ATTR_S::FilterMode"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_AUTO_ATTR_S, FilterMode) - 160usize];
};
pub type ISP_DEMOSAIC_AUTO_ATTR_S = _ISP_DEMOSAIC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub TuningMode: CVI_BOOL,
    pub RbVtEnable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_DEMOSAIC_MANUAL_ATTR_S,
    pub stAuto: ISP_DEMOSAIC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_ATTR_S"][::std::mem::size_of::<_ISP_DEMOSAIC_ATTR_S>() - 200usize];
    ["Alignment of _ISP_DEMOSAIC_ATTR_S"][::std::mem::align_of::<_ISP_DEMOSAIC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, TuningMode) - 1usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::RbVtEnable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, RbVtEnable) - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_DEMOSAIC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_ATTR_S, stAuto) - 22usize];
};
pub type ISP_DEMOSAIC_ATTR_S = _ISP_DEMOSAIC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S {
    pub AntiFalseColorStr: CVI_U8,
    pub SatGainIn: [CVI_U16; 2usize],
    pub SatGainOut: [CVI_U16; 2usize],
    pub ProtectColorGainIn: [CVI_U16; 2usize],
    pub ProtectColorGainOut: [CVI_U16; 2usize],
    pub UserDefineProtectColor1: CVI_U16,
    pub UserDefineProtectColor2: CVI_U16,
    pub UserDefineProtectColor3: CVI_U16,
    pub EdgeGainIn: [CVI_U16; 2usize],
    pub EdgeGainOut: [CVI_U16; 2usize],
    pub DetailGainIn: [CVI_U16; 2usize],
    pub DetailGaintOut: [CVI_U16; 2usize],
    pub DetailDetectLumaStr: CVI_U16,
    pub DetailSmoothStr: CVI_U8,
    pub DetailWgtThr: CVI_U8,
    pub DetailWgtMin: CVI_U16,
    pub DetailWgtMax: CVI_U16,
    pub DetailWgtSlope: CVI_U16,
    pub EdgeWgtNp: CVI_U8,
    pub EdgeWgtThr: CVI_U8,
    pub EdgeWgtMin: CVI_U16,
    pub EdgeWgtMax: CVI_U16,
    pub EdgeWgtSlope: CVI_U16,
    pub DetailSmoothMapTh: CVI_U8,
    pub DetailSmoothMapMin: CVI_U16,
    pub DetailSmoothMapMax: CVI_U16,
    pub DetailSmoothMapSlope: CVI_U16,
    pub LumaWgt: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S>() - 68usize];
    ["Alignment of _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::AntiFalseColorStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, AntiFalseColorStr) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::SatGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, SatGainIn) - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::SatGainOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, SatGainOut) - 6usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::ProtectColorGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, ProtectColorGainIn) - 10usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::ProtectColorGainOut"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        ProtectColorGainOut
    ) - 14usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::UserDefineProtectColor1"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        UserDefineProtectColor1
    ) - 18usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::UserDefineProtectColor2"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        UserDefineProtectColor2
    ) - 20usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::UserDefineProtectColor3"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        UserDefineProtectColor3
    ) - 22usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeGainIn) - 24usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeGainOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeGainOut) - 28usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailGainIn) - 32usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailGaintOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailGaintOut) - 36usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailDetectLumaStr"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        DetailDetectLumaStr
    ) - 40usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailSmoothStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailSmoothStr) - 42usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailWgtThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailWgtThr) - 43usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailWgtMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailWgtMin) - 44usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailWgtMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailWgtMax) - 46usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailWgtSlope"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailWgtSlope) - 48usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeWgtNp"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeWgtNp) - 50usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeWgtThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeWgtThr) - 51usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeWgtMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeWgtMin) - 52usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeWgtMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeWgtMax) - 54usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::EdgeWgtSlope"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, EdgeWgtSlope) - 56usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailSmoothMapTh"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailSmoothMapTh) - 58usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailSmoothMapMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailSmoothMapMin) - 60usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailSmoothMapMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, DetailSmoothMapMax) - 62usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::DetailSmoothMapSlope"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
        DetailSmoothMapSlope
    ) - 64usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S::LumaWgt"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S, LumaWgt) - 66usize];
};
pub type ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S = _ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S {
    pub AntiFalseColorStr: [CVI_U8; 16usize],
    pub SatGainIn: [[CVI_U16; 16usize]; 2usize],
    pub SatGainOut: [[CVI_U16; 16usize]; 2usize],
    pub ProtectColorGainIn: [[CVI_U16; 16usize]; 2usize],
    pub ProtectColorGainOut: [[CVI_U16; 16usize]; 2usize],
    pub UserDefineProtectColor1: [CVI_U16; 16usize],
    pub UserDefineProtectColor2: [CVI_U16; 16usize],
    pub UserDefineProtectColor3: [CVI_U16; 16usize],
    pub EdgeGainIn: [[CVI_U16; 16usize]; 2usize],
    pub EdgeGainOut: [[CVI_U16; 16usize]; 2usize],
    pub DetailGainIn: [[CVI_U16; 16usize]; 2usize],
    pub DetailGaintOut: [[CVI_U16; 16usize]; 2usize],
    pub DetailDetectLumaStr: [CVI_U16; 16usize],
    pub DetailSmoothStr: [CVI_U8; 16usize],
    pub DetailWgtThr: [CVI_U8; 16usize],
    pub DetailWgtMin: [CVI_U16; 16usize],
    pub DetailWgtMax: [CVI_U16; 16usize],
    pub DetailWgtSlope: [CVI_U16; 16usize],
    pub EdgeWgtNp: [CVI_U8; 16usize],
    pub EdgeWgtThr: [CVI_U8; 16usize],
    pub EdgeWgtMin: [CVI_U16; 16usize],
    pub EdgeWgtMax: [CVI_U16; 16usize],
    pub EdgeWgtSlope: [CVI_U16; 16usize],
    pub DetailSmoothMapTh: [CVI_U8; 16usize],
    pub DetailSmoothMapMin: [CVI_U16; 16usize],
    pub DetailSmoothMapMax: [CVI_U16; 16usize],
    pub DetailSmoothMapSlope: [CVI_U16; 16usize],
    pub LumaWgt: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S>() - 1040usize];
    ["Alignment of _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::AntiFalseColorStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, AntiFalseColorStr) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::SatGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, SatGainIn) - 16usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::SatGainOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, SatGainOut) - 80usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::ProtectColorGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, ProtectColorGainIn) - 144usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::ProtectColorGainOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, ProtectColorGainOut) - 208usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::UserDefineProtectColor1"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S,
        UserDefineProtectColor1
    ) - 272usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::UserDefineProtectColor2"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S,
        UserDefineProtectColor2
    ) - 304usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::UserDefineProtectColor3"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S,
        UserDefineProtectColor3
    ) - 336usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeGainIn) - 368usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeGainOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeGainOut) - 432usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailGainIn"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailGainIn) - 496usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailGaintOut"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailGaintOut) - 560usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailDetectLumaStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailDetectLumaStr) - 624usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailSmoothStr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailSmoothStr) - 656usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailWgtThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailWgtThr) - 672usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailWgtMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailWgtMin) - 688usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailWgtMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailWgtMax) - 720usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailWgtSlope"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailWgtSlope) - 752usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeWgtNp"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeWgtNp) - 784usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeWgtThr"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeWgtThr) - 800usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeWgtMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeWgtMin) - 816usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeWgtMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeWgtMax) - 848usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::EdgeWgtSlope"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, EdgeWgtSlope) - 880usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailSmoothMapTh"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailSmoothMapTh) - 912usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailSmoothMapMin"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailSmoothMapMin) - 928usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailSmoothMapMax"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, DetailSmoothMapMax) - 960usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::DetailSmoothMapSlope"][::std::mem::offset_of!(
        _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S,
        DetailSmoothMapSlope
    ) - 992usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S::LumaWgt"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S, LumaWgt) - 1024usize];
};
pub type ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S = _ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEMOSAIC_DEMOIRE_ATTR_S {
    pub AntiFalseColorEnable: CVI_BOOL,
    pub ProtectColorEnable: CVI_BOOL,
    pub DetailDetectLumaEnable: CVI_BOOL,
    pub DetailSmoothEnable: CVI_BOOL,
    pub DetailMode: CVI_BOOL,
    pub stManual: ISP_DEMOSAIC_DEMOIRE_MANUAL_ATTR_S,
    pub stAuto: ISP_DEMOSAIC_DEMOIRE_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEMOSAIC_DEMOIRE_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEMOSAIC_DEMOIRE_ATTR_S>() - 1114usize];
    ["Alignment of _ISP_DEMOSAIC_DEMOIRE_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEMOSAIC_DEMOIRE_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::AntiFalseColorEnable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, AntiFalseColorEnable) - 0usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::ProtectColorEnable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, ProtectColorEnable) - 1usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::DetailDetectLumaEnable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, DetailDetectLumaEnable) - 2usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::DetailSmoothEnable"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, DetailSmoothEnable) - 3usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::DetailMode"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, DetailMode) - 4usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, stManual) - 6usize];
    ["Offset of field: _ISP_DEMOSAIC_DEMOIRE_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DEMOSAIC_DEMOIRE_ATTR_S, stAuto) - 74usize];
};
pub type ISP_DEMOSAIC_DEMOIRE_ATTR_S = _ISP_DEMOSAIC_DEMOIRE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RGBCAC_MANUAL_ATTR_S {
    pub DePurpleStr0: CVI_U8,
    pub DePurpleStr1: CVI_U8,
    pub EdgeCoring: CVI_U16,
    pub DePurpleCrStr0: CVI_U8,
    pub DePurpleCbStr0: CVI_U8,
    pub DePurpleCrStr1: CVI_U8,
    pub DePurpleCbStr1: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RGBCAC_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_RGBCAC_MANUAL_ATTR_S>() - 8usize];
    ["Alignment of _ISP_RGBCAC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_RGBCAC_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleStr0) - 0usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleStr1) - 1usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, EdgeCoring) - 2usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleCrStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleCrStr0) - 4usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleCbStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleCbStr0) - 5usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleCrStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleCrStr1) - 6usize];
    ["Offset of field: _ISP_RGBCAC_MANUAL_ATTR_S::DePurpleCbStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_MANUAL_ATTR_S, DePurpleCbStr1) - 7usize];
};
pub type ISP_RGBCAC_MANUAL_ATTR_S = _ISP_RGBCAC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RGBCAC_AUTO_ATTR_S {
    pub DePurpleStr0: [CVI_U8; 16usize],
    pub DePurpleStr1: [CVI_U8; 16usize],
    pub EdgeCoring: [CVI_U16; 16usize],
    pub DePurpleCrStr0: [CVI_U8; 16usize],
    pub DePurpleCbStr0: [CVI_U8; 16usize],
    pub DePurpleCrStr1: [CVI_U8; 16usize],
    pub DePurpleCbStr1: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RGBCAC_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_RGBCAC_AUTO_ATTR_S>() - 128usize];
    ["Alignment of _ISP_RGBCAC_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_RGBCAC_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleStr0) - 0usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleStr1) - 16usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, EdgeCoring) - 32usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleCrStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleCrStr0) - 64usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleCbStr0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleCbStr0) - 80usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleCrStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleCrStr1) - 96usize];
    ["Offset of field: _ISP_RGBCAC_AUTO_ATTR_S::DePurpleCbStr1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_AUTO_ATTR_S, DePurpleCbStr1) - 112usize];
};
pub type ISP_RGBCAC_AUTO_ATTR_S = _ISP_RGBCAC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_RGBCAC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub PurpleDetRange0: CVI_U8,
    pub PurpleDetRange1: CVI_U8,
    pub DePurpleStrMax0: CVI_U8,
    pub DePurpleStrMin0: CVI_U8,
    pub DePurpleStrMax1: CVI_U8,
    pub DePurpleStrMin1: CVI_U8,
    pub EdgeGlobalGain: CVI_U16,
    pub EdgeGainIn: [CVI_U8; 3usize],
    pub EdgeGainOut: [CVI_U8; 3usize],
    pub LumaScale: CVI_U16,
    pub UserDefineLuma: CVI_U16,
    pub LumaBlendWgt: CVI_U8,
    pub LumaBlendWgt2: CVI_U8,
    pub LumaBlendWgt3: CVI_U8,
    pub PurpleCb: CVI_U16,
    pub PurpleCr: CVI_U16,
    pub PurpleCb2: CVI_U16,
    pub PurpleCr2: CVI_U16,
    pub PurpleCb3: CVI_U16,
    pub PurpleCr3: CVI_U16,
    pub GreenCb: CVI_U16,
    pub GreenCr: CVI_U16,
    pub TuningMode: CVI_U8,
    pub stManual: ISP_RGBCAC_MANUAL_ATTR_S,
    pub stAuto: ISP_RGBCAC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_RGBCAC_ATTR_S"][::std::mem::size_of::<_ISP_RGBCAC_ATTR_S>() - 188usize];
    ["Alignment of _ISP_RGBCAC_ATTR_S"][::std::mem::align_of::<_ISP_RGBCAC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleDetRange0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleDetRange0) - 9usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleDetRange1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleDetRange1) - 10usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::DePurpleStrMax0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, DePurpleStrMax0) - 11usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::DePurpleStrMin0"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, DePurpleStrMin0) - 12usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::DePurpleStrMax1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, DePurpleStrMax1) - 13usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::DePurpleStrMin1"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, DePurpleStrMin1) - 14usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::EdgeGlobalGain"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, EdgeGlobalGain) - 16usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::EdgeGainIn"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, EdgeGainIn) - 18usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::EdgeGainOut"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, EdgeGainOut) - 21usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::LumaScale"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, LumaScale) - 24usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::UserDefineLuma"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, UserDefineLuma) - 26usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::LumaBlendWgt"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, LumaBlendWgt) - 28usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::LumaBlendWgt2"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, LumaBlendWgt2) - 29usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::LumaBlendWgt3"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, LumaBlendWgt3) - 30usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCb"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCb) - 32usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCr"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCr) - 34usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCb2"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCb2) - 36usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCr2"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCr2) - 38usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCb3"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCb3) - 40usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::PurpleCr3"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, PurpleCr3) - 42usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::GreenCb"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, GreenCb) - 44usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::GreenCr"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, GreenCr) - 46usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, TuningMode) - 48usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, stManual) - 50usize];
    ["Offset of field: _ISP_RGBCAC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_RGBCAC_ATTR_S, stAuto) - 58usize];
};
pub type ISP_RGBCAC_ATTR_S = _ISP_RGBCAC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LCAC_GAUSS_COEF_ATTR_S {
    pub Wgt: CVI_U8,
    pub Sigma: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LCAC_GAUSS_COEF_ATTR_S"]
        [::std::mem::size_of::<_ISP_LCAC_GAUSS_COEF_ATTR_S>() - 2usize];
    ["Alignment of _ISP_LCAC_GAUSS_COEF_ATTR_S"]
        [::std::mem::align_of::<_ISP_LCAC_GAUSS_COEF_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_LCAC_GAUSS_COEF_ATTR_S::Wgt"]
        [::std::mem::offset_of!(_ISP_LCAC_GAUSS_COEF_ATTR_S, Wgt) - 0usize];
    ["Offset of field: _ISP_LCAC_GAUSS_COEF_ATTR_S::Sigma"]
        [::std::mem::offset_of!(_ISP_LCAC_GAUSS_COEF_ATTR_S, Sigma) - 1usize];
};
pub type ISP_LCAC_GAUSS_COEF_ATTR_S = _ISP_LCAC_GAUSS_COEF_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LCAC_MANUAL_ATTR_S {
    pub DePurpleCrGain: CVI_U16,
    pub DePurpleCbGain: CVI_U16,
    pub DePurepleCrWgt0: CVI_U8,
    pub DePurepleCbWgt0: CVI_U8,
    pub DePurepleCrWgt1: CVI_U8,
    pub DePurepleCbWgt1: CVI_U8,
    pub EdgeCoringBase: CVI_U8,
    pub EdgeCoringAdv: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LCAC_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_LCAC_MANUAL_ATTR_S>() - 10usize];
    ["Alignment of _ISP_LCAC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_LCAC_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurpleCrGain"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurpleCrGain) - 0usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurpleCbGain"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurpleCbGain) - 2usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurepleCrWgt0"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurepleCrWgt0) - 4usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurepleCbWgt0"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurepleCbWgt0) - 5usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurepleCrWgt1"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurepleCrWgt1) - 6usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::DePurepleCbWgt1"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, DePurepleCbWgt1) - 7usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::EdgeCoringBase"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, EdgeCoringBase) - 8usize];
    ["Offset of field: _ISP_LCAC_MANUAL_ATTR_S::EdgeCoringAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_MANUAL_ATTR_S, EdgeCoringAdv) - 9usize];
};
pub type ISP_LCAC_MANUAL_ATTR_S = _ISP_LCAC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LCAC_AUTO_ATTR_S {
    pub DePurpleCrGain: [CVI_U16; 16usize],
    pub DePurpleCbGain: [CVI_U16; 16usize],
    pub DePurepleCrWgt0: [CVI_U8; 16usize],
    pub DePurepleCbWgt0: [CVI_U8; 16usize],
    pub DePurepleCrWgt1: [CVI_U8; 16usize],
    pub DePurepleCbWgt1: [CVI_U8; 16usize],
    pub EdgeCoringBase: [CVI_U8; 16usize],
    pub EdgeCoringAdv: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LCAC_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_LCAC_AUTO_ATTR_S>() - 160usize];
    ["Alignment of _ISP_LCAC_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_LCAC_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurpleCrGain"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurpleCrGain) - 0usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurpleCbGain"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurpleCbGain) - 32usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurepleCrWgt0"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurepleCrWgt0) - 64usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurepleCbWgt0"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurepleCbWgt0) - 80usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurepleCrWgt1"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurepleCrWgt1) - 96usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::DePurepleCbWgt1"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, DePurepleCbWgt1) - 112usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::EdgeCoringBase"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, EdgeCoringBase) - 128usize];
    ["Offset of field: _ISP_LCAC_AUTO_ATTR_S::EdgeCoringAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_AUTO_ATTR_S, EdgeCoringAdv) - 144usize];
};
pub type ISP_LCAC_AUTO_ATTR_S = _ISP_LCAC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LCAC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub TuningMode: CVI_U8,
    pub DePurpleCrStr0: CVI_U8,
    pub DePurpleCbStr0: CVI_U8,
    pub DePurpleCrStr1: CVI_U8,
    pub DePurpleCbStr1: CVI_U8,
    pub FilterTypeBase: CVI_U8,
    pub EdgeGainBase0: CVI_U8,
    pub EdgeGainBase1: CVI_U8,
    pub EdgeStrWgtBase: CVI_U8,
    pub DePurpleStrMaxBase: CVI_U8,
    pub DePurpleStrMinBase: CVI_U8,
    pub FilterScaleAdv: CVI_U8,
    pub LumaWgt: CVI_U8,
    pub FilterTypeAdv: CVI_U8,
    pub EdgeGainAdv0: CVI_U8,
    pub EdgeGainAdv1: CVI_U8,
    pub EdgeStrWgtAdvG: CVI_U8,
    pub DePurpleStrMaxAdv: CVI_U8,
    pub DePurpleStrMinAdv: CVI_U8,
    pub EdgeWgtBase: ISP_LCAC_GAUSS_COEF_ATTR_S,
    pub EdgeWgtAdv: ISP_LCAC_GAUSS_COEF_ATTR_S,
    pub stManual: ISP_LCAC_MANUAL_ATTR_S,
    pub stAuto: ISP_LCAC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LCAC_ATTR_S"][::std::mem::size_of::<_ISP_LCAC_ATTR_S>() - 204usize];
    ["Alignment of _ISP_LCAC_ATTR_S"][::std::mem::align_of::<_ISP_LCAC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, TuningMode) - 9usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleCrStr0"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleCrStr0) - 10usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleCbStr0"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleCbStr0) - 11usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleCrStr1"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleCrStr1) - 12usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleCbStr1"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleCbStr1) - 13usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::FilterTypeBase"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, FilterTypeBase) - 14usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeGainBase0"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeGainBase0) - 15usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeGainBase1"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeGainBase1) - 16usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeStrWgtBase"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeStrWgtBase) - 17usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleStrMaxBase"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleStrMaxBase) - 18usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleStrMinBase"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleStrMinBase) - 19usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::FilterScaleAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, FilterScaleAdv) - 20usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::LumaWgt"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, LumaWgt) - 21usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::FilterTypeAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, FilterTypeAdv) - 22usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeGainAdv0"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeGainAdv0) - 23usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeGainAdv1"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeGainAdv1) - 24usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeStrWgtAdvG"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeStrWgtAdvG) - 25usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleStrMaxAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleStrMaxAdv) - 26usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::DePurpleStrMinAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, DePurpleStrMinAdv) - 27usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeWgtBase"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeWgtBase) - 28usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::EdgeWgtAdv"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, EdgeWgtAdv) - 30usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, stManual) - 32usize];
    ["Offset of field: _ISP_LCAC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_LCAC_ATTR_S, stAuto) - 42usize];
};
pub type ISP_LCAC_ATTR_S = _ISP_LCAC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MESH_SHADING_MANUAL_ATTR_S {
    pub MeshStr: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MESH_SHADING_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_MESH_SHADING_MANUAL_ATTR_S>() - 2usize];
    ["Alignment of _ISP_MESH_SHADING_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_MESH_SHADING_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_MESH_SHADING_MANUAL_ATTR_S::MeshStr"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_MANUAL_ATTR_S, MeshStr) - 0usize];
};
pub type ISP_MESH_SHADING_MANUAL_ATTR_S = _ISP_MESH_SHADING_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MESH_SHADING_AUTO_ATTR_S {
    pub MeshStr: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MESH_SHADING_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_MESH_SHADING_AUTO_ATTR_S>() - 32usize];
    ["Alignment of _ISP_MESH_SHADING_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_MESH_SHADING_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_MESH_SHADING_AUTO_ATTR_S::MeshStr"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_AUTO_ATTR_S, MeshStr) - 0usize];
};
pub type ISP_MESH_SHADING_AUTO_ATTR_S = _ISP_MESH_SHADING_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MESH_SHADING_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub OverflowProtection: CVI_BOOL,
    pub stManual: ISP_MESH_SHADING_MANUAL_ATTR_S,
    pub stAuto: ISP_MESH_SHADING_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MESH_SHADING_ATTR_S"]
        [::std::mem::size_of::<_ISP_MESH_SHADING_ATTR_S>() - 44usize];
    ["Alignment of _ISP_MESH_SHADING_ATTR_S"]
        [::std::mem::align_of::<_ISP_MESH_SHADING_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::OverflowProtection"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, OverflowProtection) - 9usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_MESH_SHADING_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_ATTR_S, stAuto) - 12usize];
};
pub type ISP_MESH_SHADING_ATTR_S = _ISP_MESH_SHADING_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MESH_SHADING_GAIN_LUT_S {
    pub ColorTemperature: CVI_U16,
    pub RGain: [CVI_U16; 1369usize],
    pub GGain: [CVI_U16; 1369usize],
    pub BGain: [CVI_U16; 1369usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MESH_SHADING_GAIN_LUT_S"]
        [::std::mem::size_of::<_ISP_MESH_SHADING_GAIN_LUT_S>() - 8216usize];
    ["Alignment of _ISP_MESH_SHADING_GAIN_LUT_S"]
        [::std::mem::align_of::<_ISP_MESH_SHADING_GAIN_LUT_S>() - 2usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_S::ColorTemperature"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_S, ColorTemperature) - 0usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_S::RGain"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_S, RGain) - 2usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_S::GGain"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_S, GGain) - 2740usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_S::BGain"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_S, BGain) - 5478usize];
};
pub type ISP_MESH_SHADING_GAIN_LUT_S = _ISP_MESH_SHADING_GAIN_LUT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MESH_SHADING_GAIN_LUT_ATTR_S {
    pub Size: CVI_U8,
    pub LscGainLut: [ISP_MESH_SHADING_GAIN_LUT_S; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MESH_SHADING_GAIN_LUT_ATTR_S"]
        [::std::mem::size_of::<_ISP_MESH_SHADING_GAIN_LUT_ATTR_S>() - 57514usize];
    ["Alignment of _ISP_MESH_SHADING_GAIN_LUT_ATTR_S"]
        [::std::mem::align_of::<_ISP_MESH_SHADING_GAIN_LUT_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_ATTR_S::Size"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_ATTR_S, Size) - 0usize];
    ["Offset of field: _ISP_MESH_SHADING_GAIN_LUT_ATTR_S::LscGainLut"]
        [::std::mem::offset_of!(_ISP_MESH_SHADING_GAIN_LUT_ATTR_S, LscGainLut) - 2usize];
};
pub type ISP_MESH_SHADING_GAIN_LUT_ATTR_S = _ISP_MESH_SHADING_GAIN_LUT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SATURATION_MANUAL_ATTR_S {
    pub Saturation: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_SATURATION_MANUAL_ATTR_S>() - 1usize];
    ["Alignment of _ISP_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_SATURATION_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_SATURATION_MANUAL_ATTR_S::Saturation"]
        [::std::mem::offset_of!(_ISP_SATURATION_MANUAL_ATTR_S, Saturation) - 0usize];
};
pub type ISP_SATURATION_MANUAL_ATTR_S = _ISP_SATURATION_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SATURATION_AUTO_ATTR_S {
    pub Saturation: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SATURATION_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_SATURATION_AUTO_ATTR_S>() - 16usize];
    ["Alignment of _ISP_SATURATION_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_SATURATION_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_SATURATION_AUTO_ATTR_S::Saturation"]
        [::std::mem::offset_of!(_ISP_SATURATION_AUTO_ATTR_S, Saturation) - 0usize];
};
pub type ISP_SATURATION_AUTO_ATTR_S = _ISP_SATURATION_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SATURATION_ATTR_SS {
    pub enOpType: ISP_OP_TYPE_E,
    pub stManual: ISP_SATURATION_MANUAL_ATTR_S,
    pub stAuto: ISP_SATURATION_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SATURATION_ATTR_SS"][::std::mem::size_of::<_ISP_SATURATION_ATTR_SS>() - 24usize];
    ["Alignment of _ISP_SATURATION_ATTR_SS"]
        [::std::mem::align_of::<_ISP_SATURATION_ATTR_SS>() - 4usize];
    ["Offset of field: _ISP_SATURATION_ATTR_SS::enOpType"]
        [::std::mem::offset_of!(_ISP_SATURATION_ATTR_SS, enOpType) - 0usize];
    ["Offset of field: _ISP_SATURATION_ATTR_SS::stManual"]
        [::std::mem::offset_of!(_ISP_SATURATION_ATTR_SS, stManual) - 4usize];
    ["Offset of field: _ISP_SATURATION_ATTR_SS::stAuto"]
        [::std::mem::offset_of!(_ISP_SATURATION_ATTR_SS, stAuto) - 5usize];
};
pub type ISP_SATURATION_ATTR_S = _ISP_SATURATION_ATTR_SS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_SATURATION_MANUAL_ATTR_S {
    pub SaturationLE: CVI_U8,
    pub SaturationSE: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_CCM_SATURATION_MANUAL_ATTR_S>() - 2usize];
    ["Alignment of _ISP_CCM_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CCM_SATURATION_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CCM_SATURATION_MANUAL_ATTR_S::SaturationLE"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_MANUAL_ATTR_S, SaturationLE) - 0usize];
    ["Offset of field: _ISP_CCM_SATURATION_MANUAL_ATTR_S::SaturationSE"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_MANUAL_ATTR_S, SaturationSE) - 1usize];
};
pub type ISP_CCM_SATURATION_MANUAL_ATTR_S = _ISP_CCM_SATURATION_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_SATURATION_AUTO_ATTR_S {
    pub SaturationLE: [CVI_U8; 16usize],
    pub SaturationSE: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_SATURATION_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_CCM_SATURATION_AUTO_ATTR_S>() - 32usize];
    ["Alignment of _ISP_CCM_SATURATION_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_CCM_SATURATION_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CCM_SATURATION_AUTO_ATTR_S::SaturationLE"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_AUTO_ATTR_S, SaturationLE) - 0usize];
    ["Offset of field: _ISP_CCM_SATURATION_AUTO_ATTR_S::SaturationSE"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_AUTO_ATTR_S, SaturationSE) - 16usize];
};
pub type ISP_CCM_SATURATION_AUTO_ATTR_S = _ISP_CCM_SATURATION_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_SATURATION_ATTR_SS {
    pub stManual: ISP_CCM_SATURATION_MANUAL_ATTR_S,
    pub stAuto: ISP_CCM_SATURATION_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_SATURATION_ATTR_SS"]
        [::std::mem::size_of::<_ISP_CCM_SATURATION_ATTR_SS>() - 34usize];
    ["Alignment of _ISP_CCM_SATURATION_ATTR_SS"]
        [::std::mem::align_of::<_ISP_CCM_SATURATION_ATTR_SS>() - 1usize];
    ["Offset of field: _ISP_CCM_SATURATION_ATTR_SS::stManual"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_ATTR_SS, stManual) - 0usize];
    ["Offset of field: _ISP_CCM_SATURATION_ATTR_SS::stAuto"]
        [::std::mem::offset_of!(_ISP_CCM_SATURATION_ATTR_SS, stAuto) - 2usize];
};
pub type ISP_CCM_SATURATION_ATTR_S = _ISP_CCM_SATURATION_ATTR_SS;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLORMATRIX_ATTR_S {
    pub ColorTemp: CVI_U16,
    pub CCM: [CVI_S16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLORMATRIX_ATTR_S"][::std::mem::size_of::<_ISP_COLORMATRIX_ATTR_S>() - 20usize];
    ["Alignment of _ISP_COLORMATRIX_ATTR_S"]
        [::std::mem::align_of::<_ISP_COLORMATRIX_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_COLORMATRIX_ATTR_S::ColorTemp"]
        [::std::mem::offset_of!(_ISP_COLORMATRIX_ATTR_S, ColorTemp) - 0usize];
    ["Offset of field: _ISP_COLORMATRIX_ATTR_S::CCM"]
        [::std::mem::offset_of!(_ISP_COLORMATRIX_ATTR_S, CCM) - 2usize];
};
pub type ISP_COLORMATRIX_ATTR_S = _ISP_COLORMATRIX_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_MANUAL_ATTR_S {
    pub SatEnable: CVI_BOOL,
    pub CCM: [CVI_S16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_CCM_MANUAL_ATTR_S>() - 20usize];
    ["Alignment of _ISP_CCM_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CCM_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CCM_MANUAL_ATTR_S::SatEnable"]
        [::std::mem::offset_of!(_ISP_CCM_MANUAL_ATTR_S, SatEnable) - 0usize];
    ["Offset of field: _ISP_CCM_MANUAL_ATTR_S::CCM"]
        [::std::mem::offset_of!(_ISP_CCM_MANUAL_ATTR_S, CCM) - 2usize];
};
pub type ISP_CCM_MANUAL_ATTR_S = _ISP_CCM_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_AUTO_ATTR_S {
    pub ISOActEnable: CVI_BOOL,
    pub TempActEnable: CVI_BOOL,
    pub CCMTabNum: CVI_U8,
    pub CCMTab: [ISP_COLORMATRIX_ATTR_S; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_CCM_AUTO_ATTR_S>() - 144usize];
    ["Alignment of _ISP_CCM_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_CCM_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CCM_AUTO_ATTR_S::ISOActEnable"]
        [::std::mem::offset_of!(_ISP_CCM_AUTO_ATTR_S, ISOActEnable) - 0usize];
    ["Offset of field: _ISP_CCM_AUTO_ATTR_S::TempActEnable"]
        [::std::mem::offset_of!(_ISP_CCM_AUTO_ATTR_S, TempActEnable) - 1usize];
    ["Offset of field: _ISP_CCM_AUTO_ATTR_S::CCMTabNum"]
        [::std::mem::offset_of!(_ISP_CCM_AUTO_ATTR_S, CCMTabNum) - 2usize];
    ["Offset of field: _ISP_CCM_AUTO_ATTR_S::CCMTab"]
        [::std::mem::offset_of!(_ISP_CCM_AUTO_ATTR_S, CCMTab) - 4usize];
};
pub type ISP_CCM_AUTO_ATTR_S = _ISP_CCM_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CCM_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_CCM_MANUAL_ATTR_S,
    pub stAuto: ISP_CCM_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CCM_ATTR_S"][::std::mem::size_of::<_ISP_CCM_ATTR_S>() - 176usize];
    ["Alignment of _ISP_CCM_ATTR_S"][::std::mem::align_of::<_ISP_CCM_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CCM_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CCM_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CCM_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CCM_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CCM_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CCM_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CCM_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CCM_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_CCM_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CCM_ATTR_S, stAuto) - 30usize];
};
pub type ISP_CCM_ATTR_S = _ISP_CCM_ATTR_S;
pub const _ISP_CSC_COLORGAMUT_ISP_CSC_COLORGAMUT_BT601: _ISP_CSC_COLORGAMUT = 0;
pub const _ISP_CSC_COLORGAMUT_ISP_CSC_COLORGAMUT_BT709: _ISP_CSC_COLORGAMUT = 1;
pub const _ISP_CSC_COLORGAMUT_ISP_CSC_COLORGAMUT_BT2020: _ISP_CSC_COLORGAMUT = 2;
pub const _ISP_CSC_COLORGAMUT_ISP_CSC_COLORGAMUT_USER: _ISP_CSC_COLORGAMUT = 3;
pub const _ISP_CSC_COLORGAMUT_ISP_CSC_COLORGAMUT_NUM: _ISP_CSC_COLORGAMUT = 4;
pub type _ISP_CSC_COLORGAMUT = ::std::os::raw::c_uint;
pub use self::_ISP_CSC_COLORGAMUT as ISP_CSC_COLORGAMUT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CSC_MATRX_S {
    pub userCscCoef: [CVI_S16; 9usize],
    pub userCscOffset: [CVI_S16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CSC_MATRX_S"][::std::mem::size_of::<_ISP_CSC_MATRX_S>() - 24usize];
    ["Alignment of _ISP_CSC_MATRX_S"][::std::mem::align_of::<_ISP_CSC_MATRX_S>() - 2usize];
    ["Offset of field: _ISP_CSC_MATRX_S::userCscCoef"]
        [::std::mem::offset_of!(_ISP_CSC_MATRX_S, userCscCoef) - 0usize];
    ["Offset of field: _ISP_CSC_MATRX_S::userCscOffset"]
        [::std::mem::offset_of!(_ISP_CSC_MATRX_S, userCscOffset) - 18usize];
};
pub type ISP_CSC_MATRX_S = _ISP_CSC_MATRX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CSC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enColorGamut: ISP_CSC_COLORGAMUT,
    pub UpdateInterval: CVI_U8,
    pub Hue: CVI_U8,
    pub Luma: CVI_U8,
    pub Contrast: CVI_U8,
    pub Saturation: CVI_U8,
    pub stUserMatrx: ISP_CSC_MATRX_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CSC_ATTR_S"][::std::mem::size_of::<_ISP_CSC_ATTR_S>() - 40usize];
    ["Alignment of _ISP_CSC_ATTR_S"][::std::mem::align_of::<_ISP_CSC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CSC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CSC_ATTR_S::enColorGamut"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, enColorGamut) - 4usize];
    ["Offset of field: _ISP_CSC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CSC_ATTR_S::Hue"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, Hue) - 9usize];
    ["Offset of field: _ISP_CSC_ATTR_S::Luma"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, Luma) - 10usize];
    ["Offset of field: _ISP_CSC_ATTR_S::Contrast"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, Contrast) - 11usize];
    ["Offset of field: _ISP_CSC_ATTR_S::Saturation"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, Saturation) - 12usize];
    ["Offset of field: _ISP_CSC_ATTR_S::stUserMatrx"]
        [::std::mem::offset_of!(_ISP_CSC_ATTR_S, stUserMatrx) - 14usize];
};
pub type ISP_CSC_ATTR_S = _ISP_CSC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLOR_TONE_ATTR_S {
    pub u16RedCastGain: CVI_U16,
    pub u16GreenCastGain: CVI_U16,
    pub u16BlueCastGain: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLOR_TONE_ATTR_S"][::std::mem::size_of::<_ISP_COLOR_TONE_ATTR_S>() - 6usize];
    ["Alignment of _ISP_COLOR_TONE_ATTR_S"]
        [::std::mem::align_of::<_ISP_COLOR_TONE_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_COLOR_TONE_ATTR_S::u16RedCastGain"]
        [::std::mem::offset_of!(_ISP_COLOR_TONE_ATTR_S, u16RedCastGain) - 0usize];
    ["Offset of field: _ISP_COLOR_TONE_ATTR_S::u16GreenCastGain"]
        [::std::mem::offset_of!(_ISP_COLOR_TONE_ATTR_S, u16GreenCastGain) - 2usize];
    ["Offset of field: _ISP_COLOR_TONE_ATTR_S::u16BlueCastGain"]
        [::std::mem::offset_of!(_ISP_COLOR_TONE_ATTR_S, u16BlueCastGain) - 4usize];
};
pub type ISP_COLOR_TONE_ATTR_S = _ISP_COLOR_TONE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FSWDR_MANUAL_ATTR_S {
    pub WDRCombineLongThr: CVI_U16,
    pub WDRCombineShortThr: CVI_U16,
    pub WDRCombineMaxWeight: CVI_U16,
    pub WDRCombineMinWeight: CVI_U16,
    pub WDRMtIn: [CVI_U8; 4usize],
    pub WDRMtOut: [CVI_U16; 4usize],
    pub WDRLongWgt: CVI_U16,
    pub WDRCombineSNRAwareToleranceLevel: CVI_U8,
    pub MergeModeAlpha: CVI_U8,
    pub WDRMotionCombineLongThr: CVI_U16,
    pub WDRMotionCombineShortThr: CVI_U16,
    pub WDRMotionCombineMinWeight: CVI_U16,
    pub WDRMotionCombineMaxWeight: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FSWDR_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_FSWDR_MANUAL_ATTR_S>() - 32usize];
    ["Alignment of _ISP_FSWDR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_FSWDR_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRCombineLongThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRCombineLongThr) - 0usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRCombineShortThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRCombineShortThr) - 2usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRCombineMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRCombineMaxWeight) - 4usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRCombineMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRCombineMinWeight) - 6usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMtIn"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMtIn) - 8usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMtOut"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMtOut) - 12usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRLongWgt"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRLongWgt) - 20usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRCombineSNRAwareToleranceLevel"][::std::mem::offset_of!(
        _ISP_FSWDR_MANUAL_ATTR_S,
        WDRCombineSNRAwareToleranceLevel
    ) - 22usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::MergeModeAlpha"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, MergeModeAlpha) - 23usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMotionCombineLongThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMotionCombineLongThr) - 24usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMotionCombineShortThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMotionCombineShortThr) - 26usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMotionCombineMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMotionCombineMinWeight) - 28usize];
    ["Offset of field: _ISP_FSWDR_MANUAL_ATTR_S::WDRMotionCombineMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_MANUAL_ATTR_S, WDRMotionCombineMaxWeight) - 30usize];
};
pub type ISP_FSWDR_MANUAL_ATTR_S = _ISP_FSWDR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FSWDR_AUTO_ATTR_S {
    pub WDRCombineLongThr: [CVI_U16; 21usize],
    pub WDRCombineShortThr: [CVI_U16; 21usize],
    pub WDRCombineMaxWeight: [CVI_U16; 21usize],
    pub WDRCombineMinWeight: [CVI_U16; 21usize],
    pub WDRMtIn: [[CVI_U8; 21usize]; 4usize],
    pub WDRMtOut: [[CVI_U16; 21usize]; 4usize],
    pub WDRLongWgt: [CVI_U16; 21usize],
    pub WDRCombineSNRAwareToleranceLevel: [CVI_U8; 21usize],
    pub MergeModeAlpha: [CVI_U8; 21usize],
    pub WDRMotionCombineLongThr: [CVI_U16; 21usize],
    pub WDRMotionCombineShortThr: [CVI_U16; 21usize],
    pub WDRMotionCombineMinWeight: [CVI_U16; 21usize],
    pub WDRMotionCombineMaxWeight: [CVI_U16; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FSWDR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_FSWDR_AUTO_ATTR_S>() - 672usize];
    ["Alignment of _ISP_FSWDR_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_FSWDR_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRCombineLongThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRCombineLongThr) - 0usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRCombineShortThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRCombineShortThr) - 42usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRCombineMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRCombineMaxWeight) - 84usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRCombineMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRCombineMinWeight) - 126usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMtIn"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMtIn) - 168usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMtOut"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMtOut) - 252usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRLongWgt"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRLongWgt) - 420usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRCombineSNRAwareToleranceLevel"][::std::mem::offset_of!(
        _ISP_FSWDR_AUTO_ATTR_S,
        WDRCombineSNRAwareToleranceLevel
    ) - 462usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::MergeModeAlpha"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, MergeModeAlpha) - 483usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMotionCombineLongThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMotionCombineLongThr) - 504usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMotionCombineShortThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMotionCombineShortThr) - 546usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMotionCombineMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMotionCombineMinWeight) - 588usize];
    ["Offset of field: _ISP_FSWDR_AUTO_ATTR_S::WDRMotionCombineMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_AUTO_ATTR_S, WDRMotionCombineMaxWeight) - 630usize];
};
pub type ISP_FSWDR_AUTO_ATTR_S = _ISP_FSWDR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FSWDR_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub MotionCompEnable: CVI_BOOL,
    pub TuningMode: CVI_U8,
    pub WDRDCMode: CVI_BOOL,
    pub WDRLumaMode: CVI_BOOL,
    pub WDRType: CVI_U8,
    pub WDRCombineSNRAwareEn: CVI_BOOL,
    pub WDRCombineSNRAwareLowThr: CVI_U16,
    pub WDRCombineSNRAwareHighThr: CVI_U16,
    pub WDRCombineSNRAwareSmoothLevel: CVI_U16,
    pub LocalToneRefinedDCMode: CVI_BOOL,
    pub LocalToneRefinedLumaMode: CVI_BOOL,
    pub DarkToneRefinedThrL: CVI_U16,
    pub DarkToneRefinedThrH: CVI_U16,
    pub DarkToneRefinedMaxWeight: CVI_U16,
    pub DarkToneRefinedMinWeight: CVI_U16,
    pub BrightToneRefinedThrL: CVI_U16,
    pub BrightToneRefinedThrH: CVI_U16,
    pub BrightToneRefinedMaxWeight: CVI_U16,
    pub BrightToneRefinedMinWeight: CVI_U16,
    pub WDRMotionFusionMode: CVI_U8,
    pub MtMode: CVI_BOOL,
    pub stManual: ISP_FSWDR_MANUAL_ATTR_S,
    pub stAuto: ISP_FSWDR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FSWDR_ATTR_S"][::std::mem::size_of::<_ISP_FSWDR_ATTR_S>() - 748usize];
    ["Alignment of _ISP_FSWDR_ATTR_S"][::std::mem::align_of::<_ISP_FSWDR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::MotionCompEnable"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, MotionCompEnable) - 9usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, TuningMode) - 10usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRDCMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRDCMode) - 11usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRLumaMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRLumaMode) - 12usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRType"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRType) - 13usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRCombineSNRAwareEn"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRCombineSNRAwareEn) - 14usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRCombineSNRAwareLowThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRCombineSNRAwareLowThr) - 16usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRCombineSNRAwareHighThr"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRCombineSNRAwareHighThr) - 18usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRCombineSNRAwareSmoothLevel"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRCombineSNRAwareSmoothLevel) - 20usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::LocalToneRefinedDCMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, LocalToneRefinedDCMode) - 22usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::LocalToneRefinedLumaMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, LocalToneRefinedLumaMode) - 23usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::DarkToneRefinedThrL"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, DarkToneRefinedThrL) - 24usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::DarkToneRefinedThrH"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, DarkToneRefinedThrH) - 26usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::DarkToneRefinedMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, DarkToneRefinedMaxWeight) - 28usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::DarkToneRefinedMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, DarkToneRefinedMinWeight) - 30usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::BrightToneRefinedThrL"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, BrightToneRefinedThrL) - 32usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::BrightToneRefinedThrH"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, BrightToneRefinedThrH) - 34usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::BrightToneRefinedMaxWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, BrightToneRefinedMaxWeight) - 36usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::BrightToneRefinedMinWeight"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, BrightToneRefinedMinWeight) - 38usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::WDRMotionFusionMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, WDRMotionFusionMode) - 40usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::MtMode"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, MtMode) - 41usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, stManual) - 42usize];
    ["Offset of field: _ISP_FSWDR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_FSWDR_ATTR_S, stAuto) - 74usize];
};
pub type ISP_FSWDR_ATTR_S = _ISP_FSWDR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DRC_MANUAL_ATTR_S {
    pub TargetYScale: CVI_U32,
    pub HdrStrength: CVI_U16,
    pub DEAdaptPercentile: CVI_U8,
    pub DEAdaptTargetGain: CVI_U8,
    pub DEAdaptGainUB: CVI_U8,
    pub DEAdaptGainLB: CVI_U8,
    pub BritInflectPtLuma: CVI_U8,
    pub BritContrastLow: CVI_U8,
    pub BritContrastHigh: CVI_U8,
    pub SdrTargetY: CVI_U8,
    pub SdrTargetYGain: CVI_U8,
    pub SdrGlobalToneStr: CVI_U16,
    pub SdrDEAdaptPercentile: CVI_U8,
    pub SdrDEAdaptTargetGain: CVI_U8,
    pub SdrDEAdaptGainLB: CVI_U8,
    pub SdrDEAdaptGainUB: CVI_U8,
    pub SdrBritInflectPtLuma: CVI_U8,
    pub SdrBritContrastLow: CVI_U8,
    pub SdrBritContrastHigh: CVI_U8,
    pub TotalGain: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DRC_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_DRC_MANUAL_ATTR_S>() - 28usize];
    ["Alignment of _ISP_DRC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DRC_MANUAL_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::TargetYScale"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, TargetYScale) - 0usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::HdrStrength"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, HdrStrength) - 4usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::DEAdaptPercentile"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, DEAdaptPercentile) - 6usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::DEAdaptTargetGain"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, DEAdaptTargetGain) - 7usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::DEAdaptGainUB"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, DEAdaptGainUB) - 8usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::DEAdaptGainLB"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, DEAdaptGainLB) - 9usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::BritInflectPtLuma"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, BritInflectPtLuma) - 10usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::BritContrastLow"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, BritContrastLow) - 11usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::BritContrastHigh"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, BritContrastHigh) - 12usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrTargetY"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrTargetY) - 13usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrTargetYGain"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrTargetYGain) - 14usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrGlobalToneStr"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrGlobalToneStr) - 16usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrDEAdaptPercentile"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrDEAdaptPercentile) - 18usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrDEAdaptTargetGain"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrDEAdaptTargetGain) - 19usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrDEAdaptGainLB"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrDEAdaptGainLB) - 20usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrDEAdaptGainUB"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrDEAdaptGainUB) - 21usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrBritInflectPtLuma"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrBritInflectPtLuma) - 22usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrBritContrastLow"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrBritContrastLow) - 23usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::SdrBritContrastHigh"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, SdrBritContrastHigh) - 24usize];
    ["Offset of field: _ISP_DRC_MANUAL_ATTR_S::TotalGain"]
        [::std::mem::offset_of!(_ISP_DRC_MANUAL_ATTR_S, TotalGain) - 25usize];
};
pub type ISP_DRC_MANUAL_ATTR_S = _ISP_DRC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DRC_AUTO_ATTR_S {
    pub TargetYScale: [CVI_U32; 21usize],
    pub HdrStrength: [CVI_U16; 21usize],
    pub DEAdaptPercentile: [CVI_U8; 21usize],
    pub DEAdaptTargetGain: [CVI_U8; 21usize],
    pub DEAdaptGainUB: [CVI_U8; 21usize],
    pub DEAdaptGainLB: [CVI_U8; 21usize],
    pub BritInflectPtLuma: [CVI_U8; 21usize],
    pub BritContrastLow: [CVI_U8; 21usize],
    pub BritContrastHigh: [CVI_U8; 21usize],
    pub SdrTargetY: [CVI_U8; 21usize],
    pub SdrTargetYGain: [CVI_U8; 21usize],
    pub SdrGlobalToneStr: [CVI_U16; 21usize],
    pub SdrDEAdaptPercentile: [CVI_U8; 21usize],
    pub SdrDEAdaptTargetGain: [CVI_U8; 21usize],
    pub SdrDEAdaptGainLB: [CVI_U8; 21usize],
    pub SdrDEAdaptGainUB: [CVI_U8; 21usize],
    pub SdrBritInflectPtLuma: [CVI_U8; 21usize],
    pub SdrBritContrastLow: [CVI_U8; 21usize],
    pub SdrBritContrastHigh: [CVI_U8; 21usize],
    pub TotalGain: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DRC_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_DRC_AUTO_ATTR_S>() - 524usize];
    ["Alignment of _ISP_DRC_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_DRC_AUTO_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::TargetYScale"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, TargetYScale) - 0usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::HdrStrength"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, HdrStrength) - 84usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::DEAdaptPercentile"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, DEAdaptPercentile) - 126usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::DEAdaptTargetGain"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, DEAdaptTargetGain) - 147usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::DEAdaptGainUB"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, DEAdaptGainUB) - 168usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::DEAdaptGainLB"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, DEAdaptGainLB) - 189usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::BritInflectPtLuma"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, BritInflectPtLuma) - 210usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::BritContrastLow"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, BritContrastLow) - 231usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::BritContrastHigh"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, BritContrastHigh) - 252usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrTargetY"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrTargetY) - 273usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrTargetYGain"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrTargetYGain) - 294usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrGlobalToneStr"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrGlobalToneStr) - 316usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrDEAdaptPercentile"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrDEAdaptPercentile) - 358usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrDEAdaptTargetGain"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrDEAdaptTargetGain) - 379usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrDEAdaptGainLB"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrDEAdaptGainLB) - 400usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrDEAdaptGainUB"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrDEAdaptGainUB) - 421usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrBritInflectPtLuma"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrBritInflectPtLuma) - 442usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrBritContrastLow"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrBritContrastLow) - 463usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::SdrBritContrastHigh"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, SdrBritContrastHigh) - 484usize];
    ["Offset of field: _ISP_DRC_AUTO_ATTR_S::TotalGain"]
        [::std::mem::offset_of!(_ISP_DRC_AUTO_ATTR_S, TotalGain) - 505usize];
};
pub type ISP_DRC_AUTO_ATTR_S = _ISP_DRC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DRC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub TuningMode: CVI_U8,
    pub LocalToneEn: CVI_BOOL,
    pub LocalToneRefineEn: CVI_BOOL,
    pub ToneCurveSelect: CVI_U8,
    pub CurveUserDefine: [CVI_U16; 1025usize],
    pub DarkUserDefine: [CVI_U16; 257usize],
    pub BrightUserDefine: [CVI_U16; 513usize],
    pub ToneCurveSmooth: CVI_U32,
    pub CoarseFltScale: CVI_U8,
    pub SdrTargetYGainMode: CVI_U8,
    pub DetailEnhanceEn: CVI_BOOL,
    pub LumaGain: [CVI_U8; 33usize],
    pub DetailEnhanceMtIn: [CVI_U8; 4usize],
    pub DetailEnhanceMtOut: [CVI_U16; 4usize],
    pub OverShootThd: CVI_U8,
    pub UnderShootThd: CVI_U8,
    pub OverShootGain: CVI_U8,
    pub UnderShootGain: CVI_U8,
    pub OverShootThdMax: CVI_U8,
    pub UnderShootThdMin: CVI_U8,
    pub SoftClampEnable: CVI_BOOL,
    pub SoftClampUB: CVI_U8,
    pub SoftClampLB: CVI_U8,
    pub dbg_182x_sim_enable: CVI_BOOL,
    pub DarkMapStr: CVI_U8,
    pub BritMapStr: CVI_U8,
    pub SdrDarkMapStr: CVI_U8,
    pub SdrBritMapStr: CVI_U8,
    pub DRCMu: [CVI_U32; 32usize],
    pub stManual: ISP_DRC_MANUAL_ATTR_S,
    pub stAuto: ISP_DRC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DRC_ATTR_S"][::std::mem::size_of::<_ISP_DRC_ATTR_S>() - 4352usize];
    ["Alignment of _ISP_DRC_ATTR_S"][::std::mem::align_of::<_ISP_DRC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DRC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DRC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_DRC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_DRC_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, TuningMode) - 9usize];
    ["Offset of field: _ISP_DRC_ATTR_S::LocalToneEn"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, LocalToneEn) - 10usize];
    ["Offset of field: _ISP_DRC_ATTR_S::LocalToneRefineEn"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, LocalToneRefineEn) - 11usize];
    ["Offset of field: _ISP_DRC_ATTR_S::ToneCurveSelect"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, ToneCurveSelect) - 12usize];
    ["Offset of field: _ISP_DRC_ATTR_S::CurveUserDefine"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, CurveUserDefine) - 14usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DarkUserDefine"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DarkUserDefine) - 2064usize];
    ["Offset of field: _ISP_DRC_ATTR_S::BrightUserDefine"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, BrightUserDefine) - 2578usize];
    ["Offset of field: _ISP_DRC_ATTR_S::ToneCurveSmooth"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, ToneCurveSmooth) - 3604usize];
    ["Offset of field: _ISP_DRC_ATTR_S::CoarseFltScale"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, CoarseFltScale) - 3608usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SdrTargetYGainMode"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SdrTargetYGainMode) - 3609usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DetailEnhanceEn"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DetailEnhanceEn) - 3610usize];
    ["Offset of field: _ISP_DRC_ATTR_S::LumaGain"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, LumaGain) - 3611usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DetailEnhanceMtIn"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DetailEnhanceMtIn) - 3644usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DetailEnhanceMtOut"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DetailEnhanceMtOut) - 3648usize];
    ["Offset of field: _ISP_DRC_ATTR_S::OverShootThd"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, OverShootThd) - 3656usize];
    ["Offset of field: _ISP_DRC_ATTR_S::UnderShootThd"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, UnderShootThd) - 3657usize];
    ["Offset of field: _ISP_DRC_ATTR_S::OverShootGain"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, OverShootGain) - 3658usize];
    ["Offset of field: _ISP_DRC_ATTR_S::UnderShootGain"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, UnderShootGain) - 3659usize];
    ["Offset of field: _ISP_DRC_ATTR_S::OverShootThdMax"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, OverShootThdMax) - 3660usize];
    ["Offset of field: _ISP_DRC_ATTR_S::UnderShootThdMin"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, UnderShootThdMin) - 3661usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SoftClampEnable"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SoftClampEnable) - 3662usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SoftClampUB"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SoftClampUB) - 3663usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SoftClampLB"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SoftClampLB) - 3664usize];
    ["Offset of field: _ISP_DRC_ATTR_S::dbg_182x_sim_enable"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, dbg_182x_sim_enable) - 3665usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DarkMapStr"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DarkMapStr) - 3666usize];
    ["Offset of field: _ISP_DRC_ATTR_S::BritMapStr"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, BritMapStr) - 3667usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SdrDarkMapStr"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SdrDarkMapStr) - 3668usize];
    ["Offset of field: _ISP_DRC_ATTR_S::SdrBritMapStr"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, SdrBritMapStr) - 3669usize];
    ["Offset of field: _ISP_DRC_ATTR_S::DRCMu"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, DRCMu) - 3672usize];
    ["Offset of field: _ISP_DRC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, stManual) - 3800usize];
    ["Offset of field: _ISP_DRC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DRC_ATTR_S, stAuto) - 3828usize];
};
pub type ISP_DRC_ATTR_S = _ISP_DRC_ATTR_S;
pub const _ISP_GAMMA_CURVE_TYPE_E_ISP_GAMMA_CURVE_DEFAULT: _ISP_GAMMA_CURVE_TYPE_E = 0;
pub const _ISP_GAMMA_CURVE_TYPE_E_ISP_GAMMA_CURVE_SRGB: _ISP_GAMMA_CURVE_TYPE_E = 1;
pub const _ISP_GAMMA_CURVE_TYPE_E_ISP_GAMMA_CURVE_USER_DEFINE: _ISP_GAMMA_CURVE_TYPE_E = 2;
pub const _ISP_GAMMA_CURVE_TYPE_E_ISP_GAMMA_CURVE_AUTO: _ISP_GAMMA_CURVE_TYPE_E = 3;
pub const _ISP_GAMMA_CURVE_TYPE_E_ISP_GAMMA_CURVE_MAX: _ISP_GAMMA_CURVE_TYPE_E = 4;
pub type _ISP_GAMMA_CURVE_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_GAMMA_CURVE_TYPE_E as ISP_GAMMA_CURVE_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_GAMMA_ATTR_S {
    pub Enable: CVI_BOOL,
    pub UpdateInterval: CVI_U8,
    pub Table: [CVI_U16; 256usize],
    pub enCurveType: ISP_GAMMA_CURVE_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_GAMMA_ATTR_S"][::std::mem::size_of::<_ISP_GAMMA_ATTR_S>() - 520usize];
    ["Alignment of _ISP_GAMMA_ATTR_S"][::std::mem::align_of::<_ISP_GAMMA_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_GAMMA_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_GAMMA_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_GAMMA_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_GAMMA_ATTR_S, UpdateInterval) - 1usize];
    ["Offset of field: _ISP_GAMMA_ATTR_S::Table"]
        [::std::mem::offset_of!(_ISP_GAMMA_ATTR_S, Table) - 2usize];
    ["Offset of field: _ISP_GAMMA_ATTR_S::enCurveType"]
        [::std::mem::offset_of!(_ISP_GAMMA_ATTR_S, enCurveType) - 516usize];
};
pub type ISP_GAMMA_ATTR_S = _ISP_GAMMA_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_GAMMA_CURVE_ATTR_S {
    pub Lv: CVI_S16,
    pub Tbl: [CVI_U16; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_GAMMA_CURVE_ATTR_S"]
        [::std::mem::size_of::<_ISP_GAMMA_CURVE_ATTR_S>() - 514usize];
    ["Alignment of _ISP_GAMMA_CURVE_ATTR_S"]
        [::std::mem::align_of::<_ISP_GAMMA_CURVE_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_GAMMA_CURVE_ATTR_S::Lv"]
        [::std::mem::offset_of!(_ISP_GAMMA_CURVE_ATTR_S, Lv) - 0usize];
    ["Offset of field: _ISP_GAMMA_CURVE_ATTR_S::Tbl"]
        [::std::mem::offset_of!(_ISP_GAMMA_CURVE_ATTR_S, Tbl) - 2usize];
};
pub type ISP_GAMMA_CURVE_ATTR_S = _ISP_GAMMA_CURVE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AUTO_GAMMA_ATTR_S {
    pub GammaTabNum: CVI_U8,
    pub GammaTab: [ISP_GAMMA_CURVE_ATTR_S; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AUTO_GAMMA_ATTR_S"][::std::mem::size_of::<_ISP_AUTO_GAMMA_ATTR_S>() - 2572usize];
    ["Alignment of _ISP_AUTO_GAMMA_ATTR_S"]
        [::std::mem::align_of::<_ISP_AUTO_GAMMA_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_AUTO_GAMMA_ATTR_S::GammaTabNum"]
        [::std::mem::offset_of!(_ISP_AUTO_GAMMA_ATTR_S, GammaTabNum) - 0usize];
    ["Offset of field: _ISP_AUTO_GAMMA_ATTR_S::GammaTab"]
        [::std::mem::offset_of!(_ISP_AUTO_GAMMA_ATTR_S, GammaTab) - 2usize];
};
pub type ISP_AUTO_GAMMA_ATTR_S = _ISP_AUTO_GAMMA_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEHAZE_MANUAL_ATTR_S {
    pub Strength: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEHAZE_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_DEHAZE_MANUAL_ATTR_S>() - 1usize];
    ["Alignment of _ISP_DEHAZE_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEHAZE_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_DEHAZE_MANUAL_ATTR_S::Strength"]
        [::std::mem::offset_of!(_ISP_DEHAZE_MANUAL_ATTR_S, Strength) - 0usize];
};
pub type ISP_DEHAZE_MANUAL_ATTR_S = _ISP_DEHAZE_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEHAZE_AUTO_ATTR_S {
    pub Strength: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEHAZE_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_DEHAZE_AUTO_ATTR_S>() - 16usize];
    ["Alignment of _ISP_DEHAZE_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_DEHAZE_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_DEHAZE_AUTO_ATTR_S::Strength"]
        [::std::mem::offset_of!(_ISP_DEHAZE_AUTO_ATTR_S, Strength) - 0usize];
};
pub type ISP_DEHAZE_AUTO_ATTR_S = _ISP_DEHAZE_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DEHAZE_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub CumulativeThr: CVI_U16,
    pub MinTransMapValue: CVI_U16,
    pub DehazeLumaEnable: CVI_BOOL,
    pub DehazeSkinEnable: CVI_BOOL,
    pub AirLightMixWgt: CVI_U8,
    pub DehazeWgt: CVI_U8,
    pub TransMapScale: CVI_U8,
    pub AirlightDiffWgt: CVI_U8,
    pub AirLightMax: CVI_U16,
    pub AirLightMin: CVI_U16,
    pub SkinCb: CVI_U8,
    pub SkinCr: CVI_U8,
    pub DehazeLumaCOEFFI: CVI_U16,
    pub DehazeSkinCOEFFI: CVI_U16,
    pub TransMapWgtWgt: CVI_U8,
    pub TransMapWgtSigma: CVI_U8,
    pub stManual: ISP_DEHAZE_MANUAL_ATTR_S,
    pub stAuto: ISP_DEHAZE_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DEHAZE_ATTR_S"][::std::mem::size_of::<_ISP_DEHAZE_ATTR_S>() - 52usize];
    ["Alignment of _ISP_DEHAZE_ATTR_S"][::std::mem::align_of::<_ISP_DEHAZE_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::CumulativeThr"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, CumulativeThr) - 10usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::MinTransMapValue"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, MinTransMapValue) - 12usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::DehazeLumaEnable"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, DehazeLumaEnable) - 14usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::DehazeSkinEnable"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, DehazeSkinEnable) - 15usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::AirLightMixWgt"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, AirLightMixWgt) - 16usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::DehazeWgt"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, DehazeWgt) - 17usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::TransMapScale"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, TransMapScale) - 18usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::AirlightDiffWgt"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, AirlightDiffWgt) - 19usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::AirLightMax"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, AirLightMax) - 20usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::AirLightMin"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, AirLightMin) - 22usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::SkinCb"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, SkinCb) - 24usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::SkinCr"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, SkinCr) - 25usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::DehazeLumaCOEFFI"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, DehazeLumaCOEFFI) - 26usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::DehazeSkinCOEFFI"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, DehazeSkinCOEFFI) - 28usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::TransMapWgtWgt"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, TransMapWgtWgt) - 30usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::TransMapWgtSigma"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, TransMapWgtSigma) - 31usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, stManual) - 32usize];
    ["Offset of field: _ISP_DEHAZE_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DEHAZE_ATTR_S, stAuto) - 33usize];
};
pub type ISP_DEHAZE_ATTR_S = _ISP_DEHAZE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CLUT_ATTR_S {
    pub Enable: CVI_BOOL,
    pub UpdateInterval: CVI_U8,
    pub ClutR: [CVI_U16; 4913usize],
    pub ClutG: [CVI_U16; 4913usize],
    pub ClutB: [CVI_U16; 4913usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CLUT_ATTR_S"][::std::mem::size_of::<_ISP_CLUT_ATTR_S>() - 29480usize];
    ["Alignment of _ISP_CLUT_ATTR_S"][::std::mem::align_of::<_ISP_CLUT_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CLUT_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CLUT_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CLUT_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CLUT_ATTR_S, UpdateInterval) - 1usize];
    ["Offset of field: _ISP_CLUT_ATTR_S::ClutR"]
        [::std::mem::offset_of!(_ISP_CLUT_ATTR_S, ClutR) - 2usize];
    ["Offset of field: _ISP_CLUT_ATTR_S::ClutG"]
        [::std::mem::offset_of!(_ISP_CLUT_ATTR_S, ClutG) - 9828usize];
    ["Offset of field: _ISP_CLUT_ATTR_S::ClutB"]
        [::std::mem::offset_of!(_ISP_CLUT_ATTR_S, ClutB) - 19654usize];
};
pub type ISP_CLUT_ATTR_S = _ISP_CLUT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CLUT_SATURATION_MANUAL_ATTR_S {
    pub SatIn: [CVI_U16; 4usize],
    pub SatOut: [CVI_U16; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CLUT_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_CLUT_SATURATION_MANUAL_ATTR_S>() - 16usize];
    ["Alignment of _ISP_CLUT_SATURATION_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CLUT_SATURATION_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CLUT_SATURATION_MANUAL_ATTR_S::SatIn"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_MANUAL_ATTR_S, SatIn) - 0usize];
    ["Offset of field: _ISP_CLUT_SATURATION_MANUAL_ATTR_S::SatOut"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_MANUAL_ATTR_S, SatOut) - 8usize];
};
pub type ISP_CLUT_SATURATION_MANUAL_ATTR_S = _ISP_CLUT_SATURATION_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CLUT_SATURATION_AUTO_ATTR_S {
    pub SatIn: [[CVI_U16; 16usize]; 4usize],
    pub SatOut: [[CVI_U16; 16usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CLUT_SATURATION_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_CLUT_SATURATION_AUTO_ATTR_S>() - 256usize];
    ["Alignment of _ISP_CLUT_SATURATION_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_CLUT_SATURATION_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CLUT_SATURATION_AUTO_ATTR_S::SatIn"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_AUTO_ATTR_S, SatIn) - 0usize];
    ["Offset of field: _ISP_CLUT_SATURATION_AUTO_ATTR_S::SatOut"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_AUTO_ATTR_S, SatOut) - 128usize];
};
pub type ISP_CLUT_SATURATION_AUTO_ATTR_S = _ISP_CLUT_SATURATION_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CLUT_SATURATION_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub stManual: ISP_CLUT_SATURATION_MANUAL_ATTR_S,
    pub stAuto: ISP_CLUT_SATURATION_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CLUT_SATURATION_ATTR_S"]
        [::std::mem::size_of::<_ISP_CLUT_SATURATION_ATTR_S>() - 280usize];
    ["Alignment of _ISP_CLUT_SATURATION_ATTR_S"]
        [::std::mem::align_of::<_ISP_CLUT_SATURATION_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CLUT_SATURATION_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CLUT_SATURATION_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CLUT_SATURATION_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_ATTR_S, stManual) - 8usize];
    ["Offset of field: _ISP_CLUT_SATURATION_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CLUT_SATURATION_ATTR_S, stAuto) - 24usize];
};
pub type ISP_CLUT_SATURATION_ATTR_S = _ISP_CLUT_SATURATION_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCI_MANUAL_ATTR_S {
    pub ContrastGain: CVI_U16,
    pub BlcThr: CVI_U8,
    pub WhtThr: CVI_U8,
    pub BlcCtrl: CVI_U16,
    pub WhtCtrl: CVI_U16,
    pub DciGainMax: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCI_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_DCI_MANUAL_ATTR_S>() - 10usize];
    ["Alignment of _ISP_DCI_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_DCI_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::ContrastGain"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, ContrastGain) - 0usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::BlcThr"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, BlcThr) - 2usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::WhtThr"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, WhtThr) - 3usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::BlcCtrl"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, BlcCtrl) - 4usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::WhtCtrl"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, WhtCtrl) - 6usize];
    ["Offset of field: _ISP_DCI_MANUAL_ATTR_S::DciGainMax"]
        [::std::mem::offset_of!(_ISP_DCI_MANUAL_ATTR_S, DciGainMax) - 8usize];
};
pub type ISP_DCI_MANUAL_ATTR_S = _ISP_DCI_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCI_AUTO_ATTR_S {
    pub ContrastGain: [CVI_U16; 16usize],
    pub BlcThr: [CVI_U8; 16usize],
    pub WhtThr: [CVI_U8; 16usize],
    pub BlcCtrl: [CVI_U16; 16usize],
    pub WhtCtrl: [CVI_U16; 16usize],
    pub DciGainMax: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCI_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_DCI_AUTO_ATTR_S>() - 160usize];
    ["Alignment of _ISP_DCI_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_DCI_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::ContrastGain"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, ContrastGain) - 0usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::BlcThr"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, BlcThr) - 32usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::WhtThr"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, WhtThr) - 48usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::BlcCtrl"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, BlcCtrl) - 64usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::WhtCtrl"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, WhtCtrl) - 96usize];
    ["Offset of field: _ISP_DCI_AUTO_ATTR_S::DciGainMax"]
        [::std::mem::offset_of!(_ISP_DCI_AUTO_ATTR_S, DciGainMax) - 128usize];
};
pub type ISP_DCI_AUTO_ATTR_S = _ISP_DCI_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DCI_ATTR_S {
    pub Enable: CVI_BOOL,
    pub TuningMode: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub Method: CVI_U8,
    pub Speed: CVI_U32,
    pub DciStrength: CVI_U16,
    pub DciGamma: CVI_U16,
    pub DciOffset: CVI_U8,
    pub ToleranceY: CVI_U8,
    pub Sensitivity: CVI_U8,
    pub stManual: ISP_DCI_MANUAL_ATTR_S,
    pub stAuto: ISP_DCI_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DCI_ATTR_S"][::std::mem::size_of::<_ISP_DCI_ATTR_S>() - 196usize];
    ["Alignment of _ISP_DCI_ATTR_S"][::std::mem::align_of::<_ISP_DCI_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DCI_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_DCI_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, TuningMode) - 1usize];
    ["Offset of field: _ISP_DCI_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_DCI_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_DCI_ATTR_S::Method"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, Method) - 9usize];
    ["Offset of field: _ISP_DCI_ATTR_S::Speed"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, Speed) - 12usize];
    ["Offset of field: _ISP_DCI_ATTR_S::DciStrength"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, DciStrength) - 16usize];
    ["Offset of field: _ISP_DCI_ATTR_S::DciGamma"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, DciGamma) - 18usize];
    ["Offset of field: _ISP_DCI_ATTR_S::DciOffset"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, DciOffset) - 20usize];
    ["Offset of field: _ISP_DCI_ATTR_S::ToleranceY"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, ToleranceY) - 21usize];
    ["Offset of field: _ISP_DCI_ATTR_S::Sensitivity"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, Sensitivity) - 22usize];
    ["Offset of field: _ISP_DCI_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, stManual) - 24usize];
    ["Offset of field: _ISP_DCI_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_DCI_ATTR_S, stAuto) - 34usize];
};
pub type ISP_DCI_ATTR_S = _ISP_DCI_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LDCI_GAUSS_COEF_ATTR_S {
    pub Wgt: CVI_U8,
    pub Sigma: CVI_U8,
    pub Mean: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LDCI_GAUSS_COEF_ATTR_S"]
        [::std::mem::size_of::<_ISP_LDCI_GAUSS_COEF_ATTR_S>() - 3usize];
    ["Alignment of _ISP_LDCI_GAUSS_COEF_ATTR_S"]
        [::std::mem::align_of::<_ISP_LDCI_GAUSS_COEF_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_LDCI_GAUSS_COEF_ATTR_S::Wgt"]
        [::std::mem::offset_of!(_ISP_LDCI_GAUSS_COEF_ATTR_S, Wgt) - 0usize];
    ["Offset of field: _ISP_LDCI_GAUSS_COEF_ATTR_S::Sigma"]
        [::std::mem::offset_of!(_ISP_LDCI_GAUSS_COEF_ATTR_S, Sigma) - 1usize];
    ["Offset of field: _ISP_LDCI_GAUSS_COEF_ATTR_S::Mean"]
        [::std::mem::offset_of!(_ISP_LDCI_GAUSS_COEF_ATTR_S, Mean) - 2usize];
};
pub type ISP_LDCI_GAUSS_COEF_ATTR_S = _ISP_LDCI_GAUSS_COEF_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LDCI_MANUAL_ATTR_S {
    pub LdciStrength: CVI_U16,
    pub LdciRange: CVI_U16,
    pub TprCoef: CVI_U16,
    pub EdgeCoring: CVI_U8,
    pub LumaWgtMax: CVI_U8,
    pub LumaWgtMin: CVI_U8,
    pub VarMapMax: CVI_U8,
    pub VarMapMin: CVI_U8,
    pub UvGainMax: CVI_U8,
    pub UvGainMin: CVI_U8,
    pub BrightContrastHigh: CVI_U8,
    pub BrightContrastLow: CVI_U8,
    pub DarkContrastHigh: CVI_U8,
    pub DarkContrastLow: CVI_U8,
    pub LumaPosWgt: ISP_LDCI_GAUSS_COEF_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LDCI_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_LDCI_MANUAL_ATTR_S>() - 20usize];
    ["Alignment of _ISP_LDCI_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_LDCI_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::LdciStrength"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, LdciStrength) - 0usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::LdciRange"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, LdciRange) - 2usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::TprCoef"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, TprCoef) - 4usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, EdgeCoring) - 6usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::LumaWgtMax"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, LumaWgtMax) - 7usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::LumaWgtMin"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, LumaWgtMin) - 8usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::VarMapMax"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, VarMapMax) - 9usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::VarMapMin"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, VarMapMin) - 10usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::UvGainMax"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, UvGainMax) - 11usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::UvGainMin"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, UvGainMin) - 12usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::BrightContrastHigh"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, BrightContrastHigh) - 13usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::BrightContrastLow"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, BrightContrastLow) - 14usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::DarkContrastHigh"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, DarkContrastHigh) - 15usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::DarkContrastLow"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, DarkContrastLow) - 16usize];
    ["Offset of field: _ISP_LDCI_MANUAL_ATTR_S::LumaPosWgt"]
        [::std::mem::offset_of!(_ISP_LDCI_MANUAL_ATTR_S, LumaPosWgt) - 17usize];
};
pub type ISP_LDCI_MANUAL_ATTR_S = _ISP_LDCI_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LDCI_AUTO_ATTR_S {
    pub LdciStrength: [CVI_U16; 16usize],
    pub LdciRange: [CVI_U16; 16usize],
    pub TprCoef: [CVI_U16; 16usize],
    pub EdgeCoring: [CVI_U8; 16usize],
    pub LumaWgtMax: [CVI_U8; 16usize],
    pub LumaWgtMin: [CVI_U8; 16usize],
    pub VarMapMax: [CVI_U8; 16usize],
    pub VarMapMin: [CVI_U8; 16usize],
    pub UvGainMax: [CVI_U8; 16usize],
    pub UvGainMin: [CVI_U8; 16usize],
    pub BrightContrastHigh: [CVI_U8; 16usize],
    pub BrightContrastLow: [CVI_U8; 16usize],
    pub DarkContrastHigh: [CVI_U8; 16usize],
    pub DarkContrastLow: [CVI_U8; 16usize],
    pub LumaPosWgt: [ISP_LDCI_GAUSS_COEF_ATTR_S; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LDCI_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_LDCI_AUTO_ATTR_S>() - 320usize];
    ["Alignment of _ISP_LDCI_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_LDCI_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::LdciStrength"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, LdciStrength) - 0usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::LdciRange"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, LdciRange) - 32usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::TprCoef"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, TprCoef) - 64usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, EdgeCoring) - 96usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::LumaWgtMax"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, LumaWgtMax) - 112usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::LumaWgtMin"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, LumaWgtMin) - 128usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::VarMapMax"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, VarMapMax) - 144usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::VarMapMin"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, VarMapMin) - 160usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::UvGainMax"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, UvGainMax) - 176usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::UvGainMin"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, UvGainMin) - 192usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::BrightContrastHigh"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, BrightContrastHigh) - 208usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::BrightContrastLow"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, BrightContrastLow) - 224usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::DarkContrastHigh"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, DarkContrastHigh) - 240usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::DarkContrastLow"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, DarkContrastLow) - 256usize];
    ["Offset of field: _ISP_LDCI_AUTO_ATTR_S::LumaPosWgt"]
        [::std::mem::offset_of!(_ISP_LDCI_AUTO_ATTR_S, LumaPosWgt) - 272usize];
};
pub type ISP_LDCI_AUTO_ATTR_S = _ISP_LDCI_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_LDCI_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub GaussLPFSigma: CVI_U8,
    pub stManual: ISP_LDCI_MANUAL_ATTR_S,
    pub stAuto: ISP_LDCI_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_LDCI_ATTR_S"][::std::mem::size_of::<_ISP_LDCI_ATTR_S>() - 352usize];
    ["Alignment of _ISP_LDCI_ATTR_S"][::std::mem::align_of::<_ISP_LDCI_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::GaussLPFSigma"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, GaussLPFSigma) - 9usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_LDCI_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_LDCI_ATTR_S, stAuto) - 30usize];
};
pub type ISP_LDCI_ATTR_S = _ISP_LDCI_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA_MANUAL_ATTR_S {
    pub ISORatio: CVI_U16,
    pub YRatioLut: [CVI_U16; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_CA_MANUAL_ATTR_S>() - 514usize];
    ["Alignment of _ISP_CA_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CA_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CA_MANUAL_ATTR_S::ISORatio"]
        [::std::mem::offset_of!(_ISP_CA_MANUAL_ATTR_S, ISORatio) - 0usize];
    ["Offset of field: _ISP_CA_MANUAL_ATTR_S::YRatioLut"]
        [::std::mem::offset_of!(_ISP_CA_MANUAL_ATTR_S, YRatioLut) - 2usize];
};
pub type ISP_CA_MANUAL_ATTR_S = _ISP_CA_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA_AUTO_ATTR_S {
    pub ISORatio: [CVI_U16; 16usize],
    pub YRatioLut: [[CVI_U16; 16usize]; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_CA_AUTO_ATTR_S>() - 8224usize];
    ["Alignment of _ISP_CA_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_CA_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CA_AUTO_ATTR_S::ISORatio"]
        [::std::mem::offset_of!(_ISP_CA_AUTO_ATTR_S, ISORatio) - 0usize];
    ["Offset of field: _ISP_CA_AUTO_ATTR_S::YRatioLut"]
        [::std::mem::offset_of!(_ISP_CA_AUTO_ATTR_S, YRatioLut) - 32usize];
};
pub type ISP_CA_AUTO_ATTR_S = _ISP_CA_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub CaCpMode: CVI_BOOL,
    pub CPLutY: [CVI_U8; 256usize],
    pub CPLutU: [CVI_U8; 256usize],
    pub CPLutV: [CVI_U8; 256usize],
    pub stManual: ISP_CA_MANUAL_ATTR_S,
    pub stAuto: ISP_CA_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA_ATTR_S"][::std::mem::size_of::<_ISP_CA_ATTR_S>() - 9516usize];
    ["Alignment of _ISP_CA_ATTR_S"][::std::mem::align_of::<_ISP_CA_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CA_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CA_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CA_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CA_ATTR_S::CaCpMode"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, CaCpMode) - 9usize];
    ["Offset of field: _ISP_CA_ATTR_S::CPLutY"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, CPLutY) - 10usize];
    ["Offset of field: _ISP_CA_ATTR_S::CPLutU"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, CPLutU) - 266usize];
    ["Offset of field: _ISP_CA_ATTR_S::CPLutV"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, CPLutV) - 522usize];
    ["Offset of field: _ISP_CA_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, stManual) - 778usize];
    ["Offset of field: _ISP_CA_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CA_ATTR_S, stAuto) - 1292usize];
};
pub type ISP_CA_ATTR_S = _ISP_CA_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA2_MANUAL_ATTR_S {
    pub Ca2In: [CVI_U8; 6usize],
    pub Ca2Out: [CVI_U16; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA2_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_CA2_MANUAL_ATTR_S>() - 18usize];
    ["Alignment of _ISP_CA2_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CA2_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CA2_MANUAL_ATTR_S::Ca2In"]
        [::std::mem::offset_of!(_ISP_CA2_MANUAL_ATTR_S, Ca2In) - 0usize];
    ["Offset of field: _ISP_CA2_MANUAL_ATTR_S::Ca2Out"]
        [::std::mem::offset_of!(_ISP_CA2_MANUAL_ATTR_S, Ca2Out) - 6usize];
};
pub type ISP_CA2_MANUAL_ATTR_S = _ISP_CA2_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA2_AUTO_ATTR_S {
    pub Ca2In: [[CVI_U8; 16usize]; 6usize],
    pub Ca2Out: [[CVI_U16; 16usize]; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA2_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_CA2_AUTO_ATTR_S>() - 288usize];
    ["Alignment of _ISP_CA2_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_CA2_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_CA2_AUTO_ATTR_S::Ca2In"]
        [::std::mem::offset_of!(_ISP_CA2_AUTO_ATTR_S, Ca2In) - 0usize];
    ["Offset of field: _ISP_CA2_AUTO_ATTR_S::Ca2Out"]
        [::std::mem::offset_of!(_ISP_CA2_AUTO_ATTR_S, Ca2Out) - 96usize];
};
pub type ISP_CA2_AUTO_ATTR_S = _ISP_CA2_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CA2_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_CA2_MANUAL_ATTR_S,
    pub stAuto: ISP_CA2_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CA2_ATTR_S"][::std::mem::size_of::<_ISP_CA2_ATTR_S>() - 316usize];
    ["Alignment of _ISP_CA2_ATTR_S"][::std::mem::align_of::<_ISP_CA2_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CA2_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CA2_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CA2_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CA2_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CA2_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CA2_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CA2_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CA2_ATTR_S, stManual) - 10usize];
    ["Offset of field: _ISP_CA2_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CA2_ATTR_S, stAuto) - 28usize];
};
pub type ISP_CA2_ATTR_S = _ISP_CA2_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_PRESHARPEN_MANUAL_ATTR_S {
    pub LumaAdpGain: [CVI_U8; 33usize],
    pub DeltaAdpGain: [CVI_U8; 33usize],
    pub LumaCorLutIn: [CVI_U8; 4usize],
    pub LumaCorLutOut: [CVI_U8; 4usize],
    pub MotionCorLutIn: [CVI_U8; 4usize],
    pub MotionCorLutOut: [CVI_U8; 4usize],
    pub MotionCorWgtLutIn: [CVI_U8; 4usize],
    pub MotionCorWgtLutOut: [CVI_U8; 4usize],
    pub GlobalGain: CVI_U8,
    pub OverShootGain: CVI_U8,
    pub UnderShootGain: CVI_U8,
    pub HFBlendWgt: CVI_U8,
    pub MFBlendWgt: CVI_U8,
    pub OverShootThr: CVI_U8,
    pub UnderShootThr: CVI_U8,
    pub OverShootThrMax: CVI_U8,
    pub UnderShootThrMin: CVI_U8,
    pub MotionShtGainIn: [CVI_U8; 4usize],
    pub MotionShtGainOut: [CVI_U8; 4usize],
    pub HueShtCtrl: [CVI_U8; 33usize],
    pub SatShtGainIn: [CVI_U8; 4usize],
    pub SatShtGainOut: [CVI_U8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_PRESHARPEN_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_PRESHARPEN_MANUAL_ATTR_S>() - 148usize];
    ["Alignment of _ISP_PRESHARPEN_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_PRESHARPEN_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::LumaAdpGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, LumaAdpGain) - 0usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::DeltaAdpGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, DeltaAdpGain) - 33usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::LumaCorLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, LumaCorLutIn) - 66usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::LumaCorLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, LumaCorLutOut) - 70usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionCorLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionCorLutIn) - 74usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionCorLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionCorLutOut) - 78usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionCorWgtLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionCorWgtLutIn) - 82usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionCorWgtLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionCorWgtLutOut) - 86usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::GlobalGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, GlobalGain) - 90usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::OverShootGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, OverShootGain) - 91usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::UnderShootGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, UnderShootGain) - 92usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::HFBlendWgt"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, HFBlendWgt) - 93usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MFBlendWgt"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MFBlendWgt) - 94usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::OverShootThr"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, OverShootThr) - 95usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::UnderShootThr"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, UnderShootThr) - 96usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::OverShootThrMax"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, OverShootThrMax) - 97usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::UnderShootThrMin"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, UnderShootThrMin) - 98usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionShtGainIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionShtGainIn) - 99usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::MotionShtGainOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, MotionShtGainOut) - 103usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::HueShtCtrl"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, HueShtCtrl) - 107usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::SatShtGainIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, SatShtGainIn) - 140usize];
    ["Offset of field: _ISP_PRESHARPEN_MANUAL_ATTR_S::SatShtGainOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_MANUAL_ATTR_S, SatShtGainOut) - 144usize];
};
pub type ISP_PRESHARPEN_MANUAL_ATTR_S = _ISP_PRESHARPEN_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_PRESHARPEN_AUTO_ATTR_S {
    pub LumaAdpGain: [[CVI_U8; 16usize]; 33usize],
    pub DeltaAdpGain: [[CVI_U8; 16usize]; 33usize],
    pub LumaCorLutIn: [[CVI_U8; 16usize]; 4usize],
    pub LumaCorLutOut: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorLutIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorLutOut: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorWgtLutIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorWgtLutOut: [[CVI_U8; 16usize]; 4usize],
    pub GlobalGain: [CVI_U8; 16usize],
    pub OverShootGain: [CVI_U8; 16usize],
    pub UnderShootGain: [CVI_U8; 16usize],
    pub HFBlendWgt: [CVI_U8; 16usize],
    pub MFBlendWgt: [CVI_U8; 16usize],
    pub OverShootThr: [CVI_U8; 16usize],
    pub UnderShootThr: [CVI_U8; 16usize],
    pub OverShootThrMax: [CVI_U8; 16usize],
    pub UnderShootThrMin: [CVI_U8; 16usize],
    pub MotionShtGainIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionShtGainOut: [[CVI_U8; 16usize]; 4usize],
    pub HueShtCtrl: [[CVI_U8; 16usize]; 33usize],
    pub SatShtGainIn: [[CVI_U8; 16usize]; 4usize],
    pub SatShtGainOut: [[CVI_U8; 16usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_PRESHARPEN_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_PRESHARPEN_AUTO_ATTR_S>() - 2368usize];
    ["Alignment of _ISP_PRESHARPEN_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_PRESHARPEN_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::LumaAdpGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, LumaAdpGain) - 0usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::DeltaAdpGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, DeltaAdpGain) - 528usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::LumaCorLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, LumaCorLutIn) - 1056usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::LumaCorLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, LumaCorLutOut) - 1120usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionCorLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionCorLutIn) - 1184usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionCorLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionCorLutOut) - 1248usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionCorWgtLutIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionCorWgtLutIn) - 1312usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionCorWgtLutOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionCorWgtLutOut) - 1376usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::GlobalGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, GlobalGain) - 1440usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::OverShootGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, OverShootGain) - 1456usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::UnderShootGain"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, UnderShootGain) - 1472usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::HFBlendWgt"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, HFBlendWgt) - 1488usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MFBlendWgt"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MFBlendWgt) - 1504usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::OverShootThr"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, OverShootThr) - 1520usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::UnderShootThr"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, UnderShootThr) - 1536usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::OverShootThrMax"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, OverShootThrMax) - 1552usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::UnderShootThrMin"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, UnderShootThrMin) - 1568usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionShtGainIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionShtGainIn) - 1584usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::MotionShtGainOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, MotionShtGainOut) - 1648usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::HueShtCtrl"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, HueShtCtrl) - 1712usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::SatShtGainIn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, SatShtGainIn) - 2240usize];
    ["Offset of field: _ISP_PRESHARPEN_AUTO_ATTR_S::SatShtGainOut"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_AUTO_ATTR_S, SatShtGainOut) - 2304usize];
};
pub type ISP_PRESHARPEN_AUTO_ATTR_S = _ISP_PRESHARPEN_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_PRESHARPEN_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub TuningMode: CVI_U8,
    pub LumaAdpGainEn: CVI_BOOL,
    pub DeltaAdpGainEn: CVI_BOOL,
    pub NoiseSuppressEnable: CVI_BOOL,
    pub SatShtCtrlEn: CVI_BOOL,
    pub SoftClampEnable: CVI_BOOL,
    pub SoftClampUB: CVI_U8,
    pub SoftClampLB: CVI_U8,
    pub stManual: ISP_PRESHARPEN_MANUAL_ATTR_S,
    pub stAuto: ISP_PRESHARPEN_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_PRESHARPEN_ATTR_S"][::std::mem::size_of::<_ISP_PRESHARPEN_ATTR_S>() - 2536usize];
    ["Alignment of _ISP_PRESHARPEN_ATTR_S"]
        [::std::mem::align_of::<_ISP_PRESHARPEN_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, TuningMode) - 9usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::LumaAdpGainEn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, LumaAdpGainEn) - 10usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::DeltaAdpGainEn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, DeltaAdpGainEn) - 11usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::NoiseSuppressEnable"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, NoiseSuppressEnable) - 12usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::SatShtCtrlEn"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, SatShtCtrlEn) - 13usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::SoftClampEnable"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, SoftClampEnable) - 14usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::SoftClampUB"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, SoftClampUB) - 15usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::SoftClampLB"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, SoftClampLB) - 16usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, stManual) - 17usize];
    ["Offset of field: _ISP_PRESHARPEN_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_PRESHARPEN_ATTR_S, stAuto) - 165usize];
};
pub type ISP_PRESHARPEN_ATTR_S = _ISP_PRESHARPEN_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MANUAL_ATTR_S {
    pub TnrStrength0: CVI_U8,
    pub MapThdLow0: CVI_U8,
    pub MapThdHigh0: CVI_U8,
    pub MtDetectUnit: CVI_U8,
    pub BrightnessNoiseLevelLE: CVI_S16,
    pub BrightnessNoiseLevelSE: CVI_S16,
    pub MtFiltMode: CVI_BOOL,
    pub MtFiltWgt: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_TNR_MANUAL_ATTR_S>() - 12usize];
    ["Alignment of _ISP_TNR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::TnrStrength0"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, TnrStrength0) - 0usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::MapThdLow0"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, MapThdLow0) - 1usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::MapThdHigh0"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, MapThdHigh0) - 2usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::MtDetectUnit"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, MtDetectUnit) - 3usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::BrightnessNoiseLevelLE"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, BrightnessNoiseLevelLE) - 4usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::BrightnessNoiseLevelSE"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, BrightnessNoiseLevelSE) - 6usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::MtFiltMode"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, MtFiltMode) - 8usize];
    ["Offset of field: _ISP_TNR_MANUAL_ATTR_S::MtFiltWgt"]
        [::std::mem::offset_of!(_ISP_TNR_MANUAL_ATTR_S, MtFiltWgt) - 10usize];
};
pub type ISP_TNR_MANUAL_ATTR_S = _ISP_TNR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_AUTO_ATTR_S {
    pub TnrStrength0: [CVI_U8; 16usize],
    pub MapThdLow0: [CVI_U8; 16usize],
    pub MapThdHigh0: [CVI_U8; 16usize],
    pub MtDetectUnit: [CVI_U8; 16usize],
    pub BrightnessNoiseLevelLE: [CVI_S16; 16usize],
    pub BrightnessNoiseLevelSE: [CVI_S16; 16usize],
    pub MtFiltMode: [CVI_BOOL; 16usize],
    pub MtFiltWgt: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_TNR_AUTO_ATTR_S>() - 176usize];
    ["Alignment of _ISP_TNR_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_TNR_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::TnrStrength0"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, TnrStrength0) - 0usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::MapThdLow0"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, MapThdLow0) - 16usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::MapThdHigh0"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, MapThdHigh0) - 32usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::MtDetectUnit"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, MtDetectUnit) - 48usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::BrightnessNoiseLevelLE"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, BrightnessNoiseLevelLE) - 64usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::BrightnessNoiseLevelSE"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, BrightnessNoiseLevelSE) - 96usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::MtFiltMode"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, MtFiltMode) - 128usize];
    ["Offset of field: _ISP_TNR_AUTO_ATTR_S::MtFiltWgt"]
        [::std::mem::offset_of!(_ISP_TNR_AUTO_ATTR_S, MtFiltWgt) - 144usize];
};
pub type ISP_TNR_AUTO_ATTR_S = _ISP_TNR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub TuningMode: CVI_BOOL,
    pub TnrMtMode: CVI_BOOL,
    pub YnrCnrSharpenMtMode: CVI_BOOL,
    pub PreSharpenMtMode: CVI_BOOL,
    pub ChromaScalingDownMode: CVI_U8,
    pub CompGainEnable: CVI_BOOL,
    pub stManual: ISP_TNR_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_ATTR_S"][::std::mem::size_of::<_ISP_TNR_ATTR_S>() - 204usize];
    ["Alignment of _ISP_TNR_ATTR_S"][::std::mem::align_of::<_ISP_TNR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_TNR_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_TNR_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_TNR_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_TNR_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, TuningMode) - 9usize];
    ["Offset of field: _ISP_TNR_ATTR_S::TnrMtMode"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, TnrMtMode) - 10usize];
    ["Offset of field: _ISP_TNR_ATTR_S::YnrCnrSharpenMtMode"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, YnrCnrSharpenMtMode) - 11usize];
    ["Offset of field: _ISP_TNR_ATTR_S::PreSharpenMtMode"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, PreSharpenMtMode) - 12usize];
    ["Offset of field: _ISP_TNR_ATTR_S::ChromaScalingDownMode"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, ChromaScalingDownMode) - 13usize];
    ["Offset of field: _ISP_TNR_ATTR_S::CompGainEnable"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, CompGainEnable) - 14usize];
    ["Offset of field: _ISP_TNR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, stManual) - 16usize];
    ["Offset of field: _ISP_TNR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_ATTR_S, stAuto) - 28usize];
};
pub type ISP_TNR_ATTR_S = _ISP_TNR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S {
    pub RNoiseLevel0: CVI_U8,
    pub GNoiseLevel0: CVI_U8,
    pub BNoiseLevel0: CVI_U8,
    pub RNoiseLevel1: CVI_U8,
    pub GNoiseLevel1: CVI_U8,
    pub BNoiseLevel1: CVI_U8,
    pub RNoiseHiLevel0: CVI_U8,
    pub GNoiseHiLevel0: CVI_U8,
    pub BNoiseHiLevel0: CVI_U8,
    pub RNoiseHiLevel1: CVI_U8,
    pub GNoiseHiLevel1: CVI_U8,
    pub BNoiseHiLevel1: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S>() - 12usize];
    ["Alignment of _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::RNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, RNoiseLevel0) - 0usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::GNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, GNoiseLevel0) - 1usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::BNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, BNoiseLevel0) - 2usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::RNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, RNoiseLevel1) - 3usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::GNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, GNoiseLevel1) - 4usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::BNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, BNoiseLevel1) - 5usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::RNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, RNoiseHiLevel0) - 6usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::GNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, GNoiseHiLevel0) - 7usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::BNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, BNoiseHiLevel0) - 8usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::RNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, RNoiseHiLevel1) - 9usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::GNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, GNoiseHiLevel1) - 10usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S::BNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S, BNoiseHiLevel1) - 11usize];
};
pub type ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S = _ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S {
    pub RNoiseLevel0: [CVI_U8; 16usize],
    pub GNoiseLevel0: [CVI_U8; 16usize],
    pub BNoiseLevel0: [CVI_U8; 16usize],
    pub RNoiseLevel1: [CVI_U8; 16usize],
    pub GNoiseLevel1: [CVI_U8; 16usize],
    pub BNoiseLevel1: [CVI_U8; 16usize],
    pub RNoiseHiLevel0: [CVI_U8; 16usize],
    pub GNoiseHiLevel0: [CVI_U8; 16usize],
    pub BNoiseHiLevel0: [CVI_U8; 16usize],
    pub RNoiseHiLevel1: [CVI_U8; 16usize],
    pub GNoiseHiLevel1: [CVI_U8; 16usize],
    pub BNoiseHiLevel1: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S>() - 192usize];
    ["Alignment of _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::RNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, RNoiseLevel0) - 0usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::GNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, GNoiseLevel0) - 16usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::BNoiseLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, BNoiseLevel0) - 32usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::RNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, RNoiseLevel1) - 48usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::GNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, GNoiseLevel1) - 64usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::BNoiseLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, BNoiseLevel1) - 80usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::RNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, RNoiseHiLevel0) - 96usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::GNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, GNoiseHiLevel0) - 112usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::BNoiseHiLevel0"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, BNoiseHiLevel0) - 128usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::RNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, RNoiseHiLevel1) - 144usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::GNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, GNoiseHiLevel1) - 160usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S::BNoiseHiLevel1"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_AUTO_ATTR_S, BNoiseHiLevel1) - 176usize];
};
pub type ISP_TNR_NOISE_MODEL_AUTO_ATTR_S = _ISP_TNR_NOISE_MODEL_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_NOISE_MODEL_ATTR_S {
    pub stManual: ISP_TNR_NOISE_MODEL_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_NOISE_MODEL_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_NOISE_MODEL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_NOISE_MODEL_ATTR_S>() - 204usize];
    ["Alignment of _ISP_TNR_NOISE_MODEL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_NOISE_MODEL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_TNR_NOISE_MODEL_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_NOISE_MODEL_ATTR_S, stAuto) - 12usize];
};
pub type ISP_TNR_NOISE_MODEL_ATTR_S = _ISP_TNR_NOISE_MODEL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S {
    pub L2mIn0: [CVI_U16; 4usize],
    pub L2mOut0: [CVI_U8; 4usize],
    pub L2mIn1: [CVI_U16; 4usize],
    pub L2mOut1: [CVI_U8; 4usize],
    pub MtLumaMode: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S>() - 26usize];
    ["Alignment of _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S::L2mIn0"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S, L2mIn0) - 0usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S::L2mOut0"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S, L2mOut0) - 8usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S::L2mIn1"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S, L2mIn1) - 12usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S::L2mOut1"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S, L2mOut1) - 20usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S::MtLumaMode"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S, MtLumaMode) - 24usize];
};
pub type ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S = _ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S {
    pub L2mIn0: [[CVI_U16; 16usize]; 4usize],
    pub L2mOut0: [[CVI_U8; 16usize]; 4usize],
    pub L2mIn1: [[CVI_U16; 16usize]; 4usize],
    pub L2mOut1: [[CVI_U8; 16usize]; 4usize],
    pub MtLumaMode: [CVI_BOOL; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S>() - 400usize];
    ["Alignment of _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S::L2mIn0"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S, L2mIn0) - 0usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S::L2mOut0"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S, L2mOut0) - 128usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S::L2mIn1"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S, L2mIn1) - 192usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S::L2mOut1"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S, L2mOut1) - 320usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S::MtLumaMode"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_AUTO_ATTR_S, MtLumaMode) - 384usize];
};
pub type ISP_TNR_LUMA_MOTION_AUTO_ATTR_S = _ISP_TNR_LUMA_MOTION_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_LUMA_MOTION_ATTR_S {
    pub stManual: ISP_TNR_LUMA_MOTION_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_LUMA_MOTION_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_LUMA_MOTION_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_LUMA_MOTION_ATTR_S>() - 426usize];
    ["Alignment of _ISP_TNR_LUMA_MOTION_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_LUMA_MOTION_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_TNR_LUMA_MOTION_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_LUMA_MOTION_ATTR_S, stAuto) - 26usize];
};
pub type ISP_TNR_LUMA_MOTION_ATTR_S = _ISP_TNR_LUMA_MOTION_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_GHOST_MANUAL_ATTR_S {
    pub PrvMotion0: [CVI_U8; 4usize],
    pub PrtctWgt0: [CVI_U8; 4usize],
    pub MotionHistoryStr: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_GHOST_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_GHOST_MANUAL_ATTR_S>() - 9usize];
    ["Alignment of _ISP_TNR_GHOST_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_GHOST_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_GHOST_MANUAL_ATTR_S::PrvMotion0"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_MANUAL_ATTR_S, PrvMotion0) - 0usize];
    ["Offset of field: _ISP_TNR_GHOST_MANUAL_ATTR_S::PrtctWgt0"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_MANUAL_ATTR_S, PrtctWgt0) - 4usize];
    ["Offset of field: _ISP_TNR_GHOST_MANUAL_ATTR_S::MotionHistoryStr"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_MANUAL_ATTR_S, MotionHistoryStr) - 8usize];
};
pub type ISP_TNR_GHOST_MANUAL_ATTR_S = _ISP_TNR_GHOST_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_GHOST_AUTO_ATTR_S {
    pub PrvMotion0: [[CVI_U8; 16usize]; 4usize],
    pub PrtctWgt0: [[CVI_U8; 16usize]; 4usize],
    pub MotionHistoryStr: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_GHOST_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_GHOST_AUTO_ATTR_S>() - 144usize];
    ["Alignment of _ISP_TNR_GHOST_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_GHOST_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_GHOST_AUTO_ATTR_S::PrvMotion0"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_AUTO_ATTR_S, PrvMotion0) - 0usize];
    ["Offset of field: _ISP_TNR_GHOST_AUTO_ATTR_S::PrtctWgt0"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_AUTO_ATTR_S, PrtctWgt0) - 64usize];
    ["Offset of field: _ISP_TNR_GHOST_AUTO_ATTR_S::MotionHistoryStr"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_AUTO_ATTR_S, MotionHistoryStr) - 128usize];
};
pub type ISP_TNR_GHOST_AUTO_ATTR_S = _ISP_TNR_GHOST_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_GHOST_ATTR_S {
    pub stManual: ISP_TNR_GHOST_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_GHOST_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_GHOST_ATTR_S"][::std::mem::size_of::<_ISP_TNR_GHOST_ATTR_S>() - 153usize];
    ["Alignment of _ISP_TNR_GHOST_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_GHOST_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_GHOST_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_TNR_GHOST_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_GHOST_ATTR_S, stAuto) - 9usize];
};
pub type ISP_TNR_GHOST_ATTR_S = _ISP_TNR_GHOST_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MT_PRT_MANUAL_ATTR_S {
    pub LowMtPrtLevelY: CVI_U8,
    pub LowMtPrtLevelU: CVI_U8,
    pub LowMtPrtLevelV: CVI_U8,
    pub LowMtPrtInY: [CVI_U8; 4usize],
    pub LowMtPrtInU: [CVI_U8; 4usize],
    pub LowMtPrtInV: [CVI_U8; 4usize],
    pub LowMtPrtOutY: [CVI_U8; 4usize],
    pub LowMtPrtOutU: [CVI_U8; 4usize],
    pub LowMtPrtOutV: [CVI_U8; 4usize],
    pub LowMtPrtAdvIn: [CVI_U8; 4usize],
    pub LowMtPrtAdvOut: [CVI_U8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MT_PRT_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_MT_PRT_MANUAL_ATTR_S>() - 35usize];
    ["Alignment of _ISP_TNR_MT_PRT_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MT_PRT_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtLevelY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtLevelY) - 0usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtLevelU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtLevelU) - 1usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtLevelV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtLevelV) - 2usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtInY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtInY) - 3usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtInU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtInU) - 7usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtInV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtInV) - 11usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtOutY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtOutY) - 15usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtOutU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtOutU) - 19usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtOutV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtOutV) - 23usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtAdvIn"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtAdvIn) - 27usize];
    ["Offset of field: _ISP_TNR_MT_PRT_MANUAL_ATTR_S::LowMtPrtAdvOut"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_MANUAL_ATTR_S, LowMtPrtAdvOut) - 31usize];
};
pub type ISP_TNR_MT_PRT_MANUAL_ATTR_S = _ISP_TNR_MT_PRT_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MT_PRT_AUTO_ATTR_S {
    pub LowMtPrtLevelY: [CVI_U8; 16usize],
    pub LowMtPrtLevelU: [CVI_U8; 16usize],
    pub LowMtPrtLevelV: [CVI_U8; 16usize],
    pub LowMtPrtInY: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtInU: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtInV: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtOutY: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtOutU: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtOutV: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtAdvIn: [[CVI_U8; 16usize]; 4usize],
    pub LowMtPrtAdvOut: [[CVI_U8; 16usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MT_PRT_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_MT_PRT_AUTO_ATTR_S>() - 560usize];
    ["Alignment of _ISP_TNR_MT_PRT_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MT_PRT_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtLevelY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtLevelY) - 0usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtLevelU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtLevelU) - 16usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtLevelV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtLevelV) - 32usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtInY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtInY) - 48usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtInU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtInU) - 112usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtInV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtInV) - 176usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtOutY"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtOutY) - 240usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtOutU"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtOutU) - 304usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtOutV"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtOutV) - 368usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtAdvIn"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtAdvIn) - 432usize];
    ["Offset of field: _ISP_TNR_MT_PRT_AUTO_ATTR_S::LowMtPrtAdvOut"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_AUTO_ATTR_S, LowMtPrtAdvOut) - 496usize];
};
pub type ISP_TNR_MT_PRT_AUTO_ATTR_S = _ISP_TNR_MT_PRT_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MT_PRT_ATTR_S {
    pub LowMtPrtEn: CVI_BOOL,
    pub LowMtLowPassEnable: CVI_BOOL,
    pub LowMtPrtAdvLumaEnable: CVI_BOOL,
    pub LowMtPrtAdvMode: CVI_BOOL,
    pub LowMtPrtAdvMax: CVI_U8,
    pub LowMtPrtAdvDebugMode: CVI_BOOL,
    pub LowMtPrtAdvDebugIn: [CVI_U8; 4usize],
    pub LowMtPrtAdvDebugOut: [CVI_U8; 4usize],
    pub stManual: ISP_TNR_MT_PRT_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_MT_PRT_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MT_PRT_ATTR_S"][::std::mem::size_of::<_ISP_TNR_MT_PRT_ATTR_S>() - 609usize];
    ["Alignment of _ISP_TNR_MT_PRT_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MT_PRT_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtEn"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtEn) - 0usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtLowPassEnable"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtLowPassEnable) - 1usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvLumaEnable"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvLumaEnable) - 2usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvMode"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvMode) - 3usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvMax"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvMax) - 4usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvDebugMode"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvDebugMode) - 5usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvDebugIn"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvDebugIn) - 6usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::LowMtPrtAdvDebugOut"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, LowMtPrtAdvDebugOut) - 10usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, stManual) - 14usize];
    ["Offset of field: _ISP_TNR_MT_PRT_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_MT_PRT_ATTR_S, stAuto) - 49usize];
};
pub type ISP_TNR_MT_PRT_ATTR_S = _ISP_TNR_MT_PRT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S {
    pub AdaptNrLumaStrIn: [CVI_U8; 4usize],
    pub AdaptNrLumaStrOut: [CVI_U8; 4usize],
    pub AdaptNrChromaStrIn: [CVI_U8; 4usize],
    pub AdaptNrChromaStrOut: [CVI_U8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S>() - 16usize];
    ["Alignment of _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S::AdaptNrLumaStrIn"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S, AdaptNrLumaStrIn) - 0usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S::AdaptNrLumaStrOut"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S, AdaptNrLumaStrOut) - 4usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S::AdaptNrChromaStrIn"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S, AdaptNrChromaStrIn) - 8usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S::AdaptNrChromaStrOut"][::std::mem::offset_of!(
        _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S,
        AdaptNrChromaStrOut
    ) - 12usize];
};
pub type ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S = _ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S {
    pub AdaptNrLumaStrIn: [[CVI_U8; 16usize]; 4usize],
    pub AdaptNrLumaStrOut: [[CVI_U8; 16usize]; 4usize],
    pub AdaptNrChromaStrIn: [[CVI_U8; 16usize]; 4usize],
    pub AdaptNrChromaStrOut: [[CVI_U8; 16usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S>() - 256usize];
    ["Alignment of _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S::AdaptNrLumaStrIn"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S, AdaptNrLumaStrIn) - 0usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S::AdaptNrLumaStrOut"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S, AdaptNrLumaStrOut) - 64usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S::AdaptNrChromaStrIn"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S, AdaptNrChromaStrIn) - 128usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S::AdaptNrChromaStrOut"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S, AdaptNrChromaStrOut) - 192usize];
};
pub type ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S = _ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_TNR_MOTION_ADAP_ATTR_S {
    pub stManual: ISP_TNR_MOTION_ADAPT_MANUAL_ATTR_S,
    pub stAuto: ISP_TNR_MOTION_ADAPT_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_TNR_MOTION_ADAP_ATTR_S"]
        [::std::mem::size_of::<_ISP_TNR_MOTION_ADAP_ATTR_S>() - 272usize];
    ["Alignment of _ISP_TNR_MOTION_ADAP_ATTR_S"]
        [::std::mem::align_of::<_ISP_TNR_MOTION_ADAP_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAP_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAP_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_TNR_MOTION_ADAP_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_TNR_MOTION_ADAP_ATTR_S, stAuto) - 16usize];
};
pub type ISP_TNR_MOTION_ADAPT_ATTR_S = _ISP_TNR_MOTION_ADAP_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_MANUAL_ATTR_S {
    pub WindowType: CVI_U8,
    pub DetailSmoothMode: CVI_U8,
    pub NoiseSuppressStr: CVI_U8,
    pub FilterType: CVI_U8,
    pub NoiseCoringMax: CVI_U8,
    pub NoiseCoringBase: CVI_U8,
    pub NoiseCoringAdv: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_YNR_MANUAL_ATTR_S>() - 7usize];
    ["Alignment of _ISP_YNR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::WindowType"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, WindowType) - 0usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, DetailSmoothMode) - 1usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, NoiseSuppressStr) - 2usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, FilterType) - 3usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::NoiseCoringMax"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, NoiseCoringMax) - 4usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::NoiseCoringBase"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, NoiseCoringBase) - 5usize];
    ["Offset of field: _ISP_YNR_MANUAL_ATTR_S::NoiseCoringAdv"]
        [::std::mem::offset_of!(_ISP_YNR_MANUAL_ATTR_S, NoiseCoringAdv) - 6usize];
};
pub type ISP_YNR_MANUAL_ATTR_S = _ISP_YNR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_AUTO_ATTR_S {
    pub WindowType: [CVI_U8; 16usize],
    pub DetailSmoothMode: [CVI_U8; 16usize],
    pub NoiseSuppressStr: [CVI_U8; 16usize],
    pub FilterType: [CVI_U8; 16usize],
    pub NoiseCoringMax: [CVI_U8; 16usize],
    pub NoiseCoringBase: [CVI_U8; 16usize],
    pub NoiseCoringAdv: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_YNR_AUTO_ATTR_S>() - 112usize];
    ["Alignment of _ISP_YNR_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_YNR_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::WindowType"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, WindowType) - 0usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, DetailSmoothMode) - 16usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, NoiseSuppressStr) - 32usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, FilterType) - 48usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::NoiseCoringMax"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, NoiseCoringMax) - 64usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::NoiseCoringBase"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, NoiseCoringBase) - 80usize];
    ["Offset of field: _ISP_YNR_AUTO_ATTR_S::NoiseCoringAdv"]
        [::std::mem::offset_of!(_ISP_YNR_AUTO_ATTR_S, NoiseCoringAdv) - 96usize];
};
pub type ISP_YNR_AUTO_ATTR_S = _ISP_YNR_AUTO_ATTR_S;
pub const _ISP_YNR_TUNING_MODE_E_YNR_RESULT: _ISP_YNR_TUNING_MODE_E = 8;
pub const _ISP_YNR_TUNING_MODE_E_YNR_EDGE_SMOOTH_REGION: _ISP_YNR_TUNING_MODE_E = 11;
pub type _ISP_YNR_TUNING_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_YNR_TUNING_MODE_E as ISP_YNR_TUNING_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub CoringParamEnable: CVI_BOOL,
    pub FiltModeEnable: CVI_BOOL,
    pub FiltMode: CVI_U16,
    pub TuningMode: CVI_U8,
    pub stManual: ISP_YNR_MANUAL_ATTR_S,
    pub stAuto: ISP_YNR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_ATTR_S"][::std::mem::size_of::<_ISP_YNR_ATTR_S>() - 136usize];
    ["Alignment of _ISP_YNR_ATTR_S"][::std::mem::align_of::<_ISP_YNR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_YNR_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_YNR_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_YNR_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_YNR_ATTR_S::CoringParamEnable"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, CoringParamEnable) - 9usize];
    ["Offset of field: _ISP_YNR_ATTR_S::FiltModeEnable"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, FiltModeEnable) - 10usize];
    ["Offset of field: _ISP_YNR_ATTR_S::FiltMode"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, FiltMode) - 12usize];
    ["Offset of field: _ISP_YNR_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, TuningMode) - 14usize];
    ["Offset of field: _ISP_YNR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, stManual) - 15usize];
    ["Offset of field: _ISP_YNR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_YNR_ATTR_S, stAuto) - 22usize];
};
pub type ISP_YNR_ATTR_S = _ISP_YNR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_MOTION_NR_MANUAL_ATTR_S {
    pub MotionCoringWgtMax: CVI_U8,
    pub MotionYnrLut: [CVI_U16; 16usize],
    pub MotionCoringWgt: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_MOTION_NR_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_YNR_MOTION_NR_MANUAL_ATTR_S>() - 66usize];
    ["Alignment of _ISP_YNR_MOTION_NR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_MOTION_NR_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_MANUAL_ATTR_S::MotionCoringWgtMax"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_MANUAL_ATTR_S, MotionCoringWgtMax) - 0usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_MANUAL_ATTR_S::MotionYnrLut"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_MANUAL_ATTR_S, MotionYnrLut) - 2usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_MANUAL_ATTR_S::MotionCoringWgt"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_MANUAL_ATTR_S, MotionCoringWgt) - 34usize];
};
pub type ISP_YNR_MOTION_NR_MANUAL_ATTR_S = _ISP_YNR_MOTION_NR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_MOTION_NR_AUTO_ATTR_S {
    pub MotionCoringWgtMax: [CVI_U8; 16usize],
    pub MotionYnrLut: [[CVI_U16; 16usize]; 16usize],
    pub MotionCoringWgt: [[CVI_U16; 16usize]; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_MOTION_NR_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_YNR_MOTION_NR_AUTO_ATTR_S>() - 1040usize];
    ["Alignment of _ISP_YNR_MOTION_NR_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_MOTION_NR_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_AUTO_ATTR_S::MotionCoringWgtMax"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_AUTO_ATTR_S, MotionCoringWgtMax) - 0usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_AUTO_ATTR_S::MotionYnrLut"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_AUTO_ATTR_S, MotionYnrLut) - 16usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_AUTO_ATTR_S::MotionCoringWgt"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_AUTO_ATTR_S, MotionCoringWgt) - 528usize];
};
pub type ISP_YNR_MOTION_NR_AUTO_ATTR_S = _ISP_YNR_MOTION_NR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_MOTION_NR_ATTR_S {
    pub stManual: ISP_YNR_MOTION_NR_MANUAL_ATTR_S,
    pub stAuto: ISP_YNR_MOTION_NR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_MOTION_NR_ATTR_S"]
        [::std::mem::size_of::<_ISP_YNR_MOTION_NR_ATTR_S>() - 1106usize];
    ["Alignment of _ISP_YNR_MOTION_NR_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_MOTION_NR_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_YNR_MOTION_NR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_YNR_MOTION_NR_ATTR_S, stAuto) - 66usize];
};
pub type ISP_YNR_MOTION_NR_ATTR_S = _ISP_YNR_MOTION_NR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_FILTER_MANUAL_ATTR_S {
    pub VarThr: CVI_U8,
    pub CoringWgtLF: CVI_U16,
    pub CoringWgtHF: CVI_U16,
    pub NonDirFiltStr: CVI_U8,
    pub VhDirFiltStr: CVI_U8,
    pub AaDirFiltStr: CVI_U8,
    pub CoringWgtMax: CVI_U8,
    pub FilterMode: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_FILTER_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_YNR_FILTER_MANUAL_ATTR_S>() - 12usize];
    ["Alignment of _ISP_YNR_FILTER_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_FILTER_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::VarThr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, VarThr) - 0usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::CoringWgtLF"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, CoringWgtLF) - 2usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::CoringWgtHF"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, CoringWgtHF) - 4usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::NonDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, NonDirFiltStr) - 6usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::VhDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, VhDirFiltStr) - 7usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::AaDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, AaDirFiltStr) - 8usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::CoringWgtMax"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, CoringWgtMax) - 9usize];
    ["Offset of field: _ISP_YNR_FILTER_MANUAL_ATTR_S::FilterMode"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_MANUAL_ATTR_S, FilterMode) - 10usize];
};
pub type ISP_YNR_FILTER_MANUAL_ATTR_S = _ISP_YNR_FILTER_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_FILTER_AUTO_ATTR_S {
    pub VarThr: [CVI_U8; 16usize],
    pub CoringWgtLF: [CVI_U16; 16usize],
    pub CoringWgtHF: [CVI_U16; 16usize],
    pub NonDirFiltStr: [CVI_U8; 16usize],
    pub VhDirFiltStr: [CVI_U8; 16usize],
    pub AaDirFiltStr: [CVI_U8; 16usize],
    pub CoringWgtMax: [CVI_U8; 16usize],
    pub FilterMode: [CVI_U16; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_FILTER_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_YNR_FILTER_AUTO_ATTR_S>() - 176usize];
    ["Alignment of _ISP_YNR_FILTER_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_FILTER_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::VarThr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, VarThr) - 0usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::CoringWgtLF"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, CoringWgtLF) - 16usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::CoringWgtHF"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, CoringWgtHF) - 48usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::NonDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, NonDirFiltStr) - 80usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::VhDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, VhDirFiltStr) - 96usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::AaDirFiltStr"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, AaDirFiltStr) - 112usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::CoringWgtMax"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, CoringWgtMax) - 128usize];
    ["Offset of field: _ISP_YNR_FILTER_AUTO_ATTR_S::FilterMode"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_AUTO_ATTR_S, FilterMode) - 144usize];
};
pub type ISP_YNR_FILTER_AUTO_ATTR_S = _ISP_YNR_FILTER_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YNR_FILTER_ATTR_S {
    pub stManual: ISP_YNR_FILTER_MANUAL_ATTR_S,
    pub stAuto: ISP_YNR_FILTER_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YNR_FILTER_ATTR_S"][::std::mem::size_of::<_ISP_YNR_FILTER_ATTR_S>() - 188usize];
    ["Alignment of _ISP_YNR_FILTER_ATTR_S"]
        [::std::mem::align_of::<_ISP_YNR_FILTER_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_YNR_FILTER_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_ATTR_S, stManual) - 0usize];
    ["Offset of field: _ISP_YNR_FILTER_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_YNR_FILTER_ATTR_S, stAuto) - 12usize];
};
pub type ISP_YNR_FILTER_ATTR_S = _ISP_YNR_FILTER_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_MANUAL_ATTR_S {
    pub CnrStr: CVI_U8,
    pub NoiseSuppressStr: CVI_U8,
    pub NoiseSuppressGain: CVI_U8,
    pub FilterType: CVI_U8,
    pub MotionNrStr: CVI_U8,
    pub LumaWgt: CVI_U8,
    pub DetailSmoothMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_CNR_MANUAL_ATTR_S>() - 7usize];
    ["Alignment of _ISP_CNR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CNR_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::CnrStr"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, CnrStr) - 0usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, NoiseSuppressStr) - 1usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::NoiseSuppressGain"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, NoiseSuppressGain) - 2usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, FilterType) - 3usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::MotionNrStr"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, MotionNrStr) - 4usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::LumaWgt"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, LumaWgt) - 5usize];
    ["Offset of field: _ISP_CNR_MANUAL_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_CNR_MANUAL_ATTR_S, DetailSmoothMode) - 6usize];
};
pub type ISP_CNR_MANUAL_ATTR_S = _ISP_CNR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_AUTO_ATTR_S {
    pub CnrStr: [CVI_U8; 16usize],
    pub NoiseSuppressStr: [CVI_U8; 16usize],
    pub NoiseSuppressGain: [CVI_U8; 16usize],
    pub FilterType: [CVI_U8; 16usize],
    pub MotionNrStr: [CVI_U8; 16usize],
    pub LumaWgt: [CVI_U8; 16usize],
    pub DetailSmoothMode: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_CNR_AUTO_ATTR_S>() - 112usize];
    ["Alignment of _ISP_CNR_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_CNR_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::CnrStr"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, CnrStr) - 0usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::NoiseSuppressStr"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, NoiseSuppressStr) - 16usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::NoiseSuppressGain"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, NoiseSuppressGain) - 32usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::FilterType"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, FilterType) - 48usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::MotionNrStr"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, MotionNrStr) - 64usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::LumaWgt"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, LumaWgt) - 80usize];
    ["Offset of field: _ISP_CNR_AUTO_ATTR_S::DetailSmoothMode"]
        [::std::mem::offset_of!(_ISP_CNR_AUTO_ATTR_S, DetailSmoothMode) - 96usize];
};
pub type ISP_CNR_AUTO_ATTR_S = _ISP_CNR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_CNR_MANUAL_ATTR_S,
    pub stAuto: ISP_CNR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_ATTR_S"][::std::mem::size_of::<_ISP_CNR_ATTR_S>() - 128usize];
    ["Alignment of _ISP_CNR_ATTR_S"][::std::mem::align_of::<_ISP_CNR_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CNR_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CNR_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CNR_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CNR_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CNR_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CNR_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CNR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CNR_ATTR_S, stManual) - 9usize];
    ["Offset of field: _ISP_CNR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CNR_ATTR_S, stAuto) - 16usize];
};
pub type ISP_CNR_ATTR_S = _ISP_CNR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_MOTION_NR_MANUAL_ATTR_S {
    pub MotionCnrCoringLut: [CVI_U8; 16usize],
    pub MotionCnrStrLut: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_MOTION_NR_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_CNR_MOTION_NR_MANUAL_ATTR_S>() - 32usize];
    ["Alignment of _ISP_CNR_MOTION_NR_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CNR_MOTION_NR_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_MANUAL_ATTR_S::MotionCnrCoringLut"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_MANUAL_ATTR_S, MotionCnrCoringLut) - 0usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_MANUAL_ATTR_S::MotionCnrStrLut"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_MANUAL_ATTR_S, MotionCnrStrLut) - 16usize];
};
pub type ISP_CNR_MOTION_NR_MANUAL_ATTR_S = _ISP_CNR_MOTION_NR_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_MOTION_NR_AUTO_ATTR_S {
    pub MotionCnrCoringLut: [[CVI_U8; 16usize]; 16usize],
    pub MotionCnrStrLut: [[CVI_U8; 16usize]; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_MOTION_NR_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_CNR_MOTION_NR_AUTO_ATTR_S>() - 512usize];
    ["Alignment of _ISP_CNR_MOTION_NR_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_CNR_MOTION_NR_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_AUTO_ATTR_S::MotionCnrCoringLut"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_AUTO_ATTR_S, MotionCnrCoringLut) - 0usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_AUTO_ATTR_S::MotionCnrStrLut"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_AUTO_ATTR_S, MotionCnrStrLut) - 256usize];
};
pub type ISP_CNR_MOTION_NR_AUTO_ATTR_S = _ISP_CNR_MOTION_NR_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CNR_MOTION_NR_ATTR_S {
    pub MotionCnrEnable: CVI_BOOL,
    pub stManual: ISP_CNR_MOTION_NR_MANUAL_ATTR_S,
    pub stAuto: ISP_CNR_MOTION_NR_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CNR_MOTION_NR_ATTR_S"]
        [::std::mem::size_of::<_ISP_CNR_MOTION_NR_ATTR_S>() - 545usize];
    ["Alignment of _ISP_CNR_MOTION_NR_ATTR_S"]
        [::std::mem::align_of::<_ISP_CNR_MOTION_NR_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_ATTR_S::MotionCnrEnable"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_ATTR_S, MotionCnrEnable) - 0usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_ATTR_S, stManual) - 1usize];
    ["Offset of field: _ISP_CNR_MOTION_NR_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CNR_MOTION_NR_ATTR_S, stAuto) - 33usize];
};
pub type ISP_CNR_MOTION_NR_ATTR_S = _ISP_CNR_MOTION_NR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CAC_MANUAL_ATTR_S {
    pub DePurpleStr: CVI_U8,
    pub EdgeGlobalGain: CVI_U8,
    pub EdgeCoring: CVI_U8,
    pub EdgeStrMin: CVI_U8,
    pub EdgeStrMax: CVI_U8,
    pub DePurpleCbStr: CVI_U8,
    pub DePurpleCrStr: CVI_U8,
    pub DePurpleStrMaxRatio: CVI_U8,
    pub DePurpleStrMinRatio: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CAC_MANUAL_ATTR_S"][::std::mem::size_of::<_ISP_CAC_MANUAL_ATTR_S>() - 9usize];
    ["Alignment of _ISP_CAC_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_CAC_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::DePurpleStr"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, DePurpleStr) - 0usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::EdgeGlobalGain"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, EdgeGlobalGain) - 1usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, EdgeCoring) - 2usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::EdgeStrMin"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, EdgeStrMin) - 3usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::EdgeStrMax"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, EdgeStrMax) - 4usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::DePurpleCbStr"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, DePurpleCbStr) - 5usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::DePurpleCrStr"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, DePurpleCrStr) - 6usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::DePurpleStrMaxRatio"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, DePurpleStrMaxRatio) - 7usize];
    ["Offset of field: _ISP_CAC_MANUAL_ATTR_S::DePurpleStrMinRatio"]
        [::std::mem::offset_of!(_ISP_CAC_MANUAL_ATTR_S, DePurpleStrMinRatio) - 8usize];
};
pub type ISP_CAC_MANUAL_ATTR_S = _ISP_CAC_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CAC_AUTO_ATTR_S {
    pub DePurpleStr: [CVI_U8; 16usize],
    pub EdgeGlobalGain: [CVI_U8; 16usize],
    pub EdgeCoring: [CVI_U8; 16usize],
    pub EdgeStrMin: [CVI_U8; 16usize],
    pub EdgeStrMax: [CVI_U8; 16usize],
    pub DePurpleCbStr: [CVI_U8; 16usize],
    pub DePurpleCrStr: [CVI_U8; 16usize],
    pub DePurpleStrMaxRatio: [CVI_U8; 16usize],
    pub DePurpleStrMinRatio: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CAC_AUTO_ATTR_S"][::std::mem::size_of::<_ISP_CAC_AUTO_ATTR_S>() - 144usize];
    ["Alignment of _ISP_CAC_AUTO_ATTR_S"][::std::mem::align_of::<_ISP_CAC_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::DePurpleStr"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, DePurpleStr) - 0usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::EdgeGlobalGain"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, EdgeGlobalGain) - 16usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::EdgeCoring"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, EdgeCoring) - 32usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::EdgeStrMin"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, EdgeStrMin) - 48usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::EdgeStrMax"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, EdgeStrMax) - 64usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::DePurpleCbStr"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, DePurpleCbStr) - 80usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::DePurpleCrStr"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, DePurpleCrStr) - 96usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::DePurpleStrMaxRatio"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, DePurpleStrMaxRatio) - 112usize];
    ["Offset of field: _ISP_CAC_AUTO_ATTR_S::DePurpleStrMinRatio"]
        [::std::mem::offset_of!(_ISP_CAC_AUTO_ATTR_S, DePurpleStrMinRatio) - 128usize];
};
pub type ISP_CAC_AUTO_ATTR_S = _ISP_CAC_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CAC_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub PurpleDetRange: CVI_U8,
    pub PurpleCb: CVI_U8,
    pub PurpleCr: CVI_U8,
    pub PurpleCb2: CVI_U8,
    pub PurpleCr2: CVI_U8,
    pub PurpleCb3: CVI_U8,
    pub PurpleCr3: CVI_U8,
    pub GreenCb: CVI_U8,
    pub GreenCr: CVI_U8,
    pub TuningMode: CVI_U8,
    pub EdgeGainIn: [CVI_U8; 3usize],
    pub EdgeGainOut: [CVI_U8; 3usize],
    pub stManual: ISP_CAC_MANUAL_ATTR_S,
    pub stAuto: ISP_CAC_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CAC_ATTR_S"][::std::mem::size_of::<_ISP_CAC_ATTR_S>() - 180usize];
    ["Alignment of _ISP_CAC_ATTR_S"][::std::mem::align_of::<_ISP_CAC_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_CAC_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_CAC_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_CAC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleDetRange"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleDetRange) - 9usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCb"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCb) - 10usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCr"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCr) - 11usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCb2"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCb2) - 12usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCr2"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCr2) - 13usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCb3"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCb3) - 14usize];
    ["Offset of field: _ISP_CAC_ATTR_S::PurpleCr3"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, PurpleCr3) - 15usize];
    ["Offset of field: _ISP_CAC_ATTR_S::GreenCb"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, GreenCb) - 16usize];
    ["Offset of field: _ISP_CAC_ATTR_S::GreenCr"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, GreenCr) - 17usize];
    ["Offset of field: _ISP_CAC_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, TuningMode) - 18usize];
    ["Offset of field: _ISP_CAC_ATTR_S::EdgeGainIn"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, EdgeGainIn) - 19usize];
    ["Offset of field: _ISP_CAC_ATTR_S::EdgeGainOut"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, EdgeGainOut) - 22usize];
    ["Offset of field: _ISP_CAC_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, stManual) - 25usize];
    ["Offset of field: _ISP_CAC_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_CAC_ATTR_S, stAuto) - 34usize];
};
pub type ISP_CAC_ATTR_S = _ISP_CAC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SHARPEN_MANUAL_ATTR_S {
    pub LumaAdpGain: [CVI_U8; 33usize],
    pub DeltaAdpGain: [CVI_U8; 33usize],
    pub LumaCorLutIn: [CVI_U8; 4usize],
    pub LumaCorLutOut: [CVI_U8; 4usize],
    pub MotionCorLutIn: [CVI_U8; 4usize],
    pub MotionCorLutOut: [CVI_U8; 4usize],
    pub MotionCorWgtLutIn: [CVI_U8; 4usize],
    pub MotionCorWgtLutOut: [CVI_U8; 4usize],
    pub GlobalGain: CVI_U8,
    pub OverShootGain: CVI_U8,
    pub UnderShootGain: CVI_U8,
    pub HFBlendWgt: CVI_U8,
    pub MFBlendWgt: CVI_U8,
    pub OverShootThr: CVI_U8,
    pub UnderShootThr: CVI_U8,
    pub OverShootThrMax: CVI_U8,
    pub UnderShootThrMin: CVI_U8,
    pub MotionShtGainIn: [CVI_U8; 4usize],
    pub MotionShtGainOut: [CVI_U8; 4usize],
    pub HueShtCtrl: [CVI_U8; 33usize],
    pub SatShtGainIn: [CVI_U8; 4usize],
    pub SatShtGainOut: [CVI_U8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_SHARPEN_MANUAL_ATTR_S>() - 148usize];
    ["Alignment of _ISP_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_SHARPEN_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::LumaAdpGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, LumaAdpGain) - 0usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::DeltaAdpGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, DeltaAdpGain) - 33usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::LumaCorLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, LumaCorLutIn) - 66usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::LumaCorLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, LumaCorLutOut) - 70usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionCorLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionCorLutIn) - 74usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionCorLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionCorLutOut) - 78usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionCorWgtLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionCorWgtLutIn) - 82usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionCorWgtLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionCorWgtLutOut) - 86usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::GlobalGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, GlobalGain) - 90usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::OverShootGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, OverShootGain) - 91usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::UnderShootGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, UnderShootGain) - 92usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::HFBlendWgt"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, HFBlendWgt) - 93usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MFBlendWgt"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MFBlendWgt) - 94usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::OverShootThr"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, OverShootThr) - 95usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::UnderShootThr"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, UnderShootThr) - 96usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::OverShootThrMax"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, OverShootThrMax) - 97usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::UnderShootThrMin"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, UnderShootThrMin) - 98usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionShtGainIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionShtGainIn) - 99usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::MotionShtGainOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, MotionShtGainOut) - 103usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::HueShtCtrl"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, HueShtCtrl) - 107usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::SatShtGainIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, SatShtGainIn) - 140usize];
    ["Offset of field: _ISP_SHARPEN_MANUAL_ATTR_S::SatShtGainOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_MANUAL_ATTR_S, SatShtGainOut) - 144usize];
};
pub type ISP_SHARPEN_MANUAL_ATTR_S = _ISP_SHARPEN_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SHARPEN_AUTO_ATTR_S {
    pub LumaAdpGain: [[CVI_U8; 16usize]; 33usize],
    pub DeltaAdpGain: [[CVI_U8; 16usize]; 33usize],
    pub LumaCorLutIn: [[CVI_U8; 16usize]; 4usize],
    pub LumaCorLutOut: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorLutIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorLutOut: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorWgtLutIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionCorWgtLutOut: [[CVI_U8; 16usize]; 4usize],
    pub GlobalGain: [CVI_U8; 16usize],
    pub OverShootGain: [CVI_U8; 16usize],
    pub UnderShootGain: [CVI_U8; 16usize],
    pub HFBlendWgt: [CVI_U8; 16usize],
    pub MFBlendWgt: [CVI_U8; 16usize],
    pub OverShootThr: [CVI_U8; 16usize],
    pub UnderShootThr: [CVI_U8; 16usize],
    pub OverShootThrMax: [CVI_U8; 16usize],
    pub UnderShootThrMin: [CVI_U8; 16usize],
    pub MotionShtGainIn: [[CVI_U8; 16usize]; 4usize],
    pub MotionShtGainOut: [[CVI_U8; 16usize]; 4usize],
    pub HueShtCtrl: [[CVI_U8; 16usize]; 33usize],
    pub SatShtGainIn: [[CVI_U8; 16usize]; 4usize],
    pub SatShtGainOut: [[CVI_U8; 16usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_SHARPEN_AUTO_ATTR_S>() - 2368usize];
    ["Alignment of _ISP_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_SHARPEN_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::LumaAdpGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, LumaAdpGain) - 0usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::DeltaAdpGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, DeltaAdpGain) - 528usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::LumaCorLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, LumaCorLutIn) - 1056usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::LumaCorLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, LumaCorLutOut) - 1120usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionCorLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionCorLutIn) - 1184usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionCorLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionCorLutOut) - 1248usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionCorWgtLutIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionCorWgtLutIn) - 1312usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionCorWgtLutOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionCorWgtLutOut) - 1376usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::GlobalGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, GlobalGain) - 1440usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::OverShootGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, OverShootGain) - 1456usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::UnderShootGain"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, UnderShootGain) - 1472usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::HFBlendWgt"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, HFBlendWgt) - 1488usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MFBlendWgt"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MFBlendWgt) - 1504usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::OverShootThr"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, OverShootThr) - 1520usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::UnderShootThr"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, UnderShootThr) - 1536usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::OverShootThrMax"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, OverShootThrMax) - 1552usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::UnderShootThrMin"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, UnderShootThrMin) - 1568usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionShtGainIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionShtGainIn) - 1584usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::MotionShtGainOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, MotionShtGainOut) - 1648usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::HueShtCtrl"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, HueShtCtrl) - 1712usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::SatShtGainIn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, SatShtGainIn) - 2240usize];
    ["Offset of field: _ISP_SHARPEN_AUTO_ATTR_S::SatShtGainOut"]
        [::std::mem::offset_of!(_ISP_SHARPEN_AUTO_ATTR_S, SatShtGainOut) - 2304usize];
};
pub type ISP_SHARPEN_AUTO_ATTR_S = _ISP_SHARPEN_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SHARPEN_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub TuningMode: CVI_U8,
    pub LumaAdpGainEn: CVI_BOOL,
    pub DeltaAdpGainEn: CVI_BOOL,
    pub NoiseSuppressEnable: CVI_BOOL,
    pub SatShtCtrlEn: CVI_BOOL,
    pub SoftClampEnable: CVI_BOOL,
    pub SoftClampUB: CVI_U8,
    pub SoftClampLB: CVI_U8,
    pub stManual: ISP_SHARPEN_MANUAL_ATTR_S,
    pub stAuto: ISP_SHARPEN_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SHARPEN_ATTR_S"][::std::mem::size_of::<_ISP_SHARPEN_ATTR_S>() - 2536usize];
    ["Alignment of _ISP_SHARPEN_ATTR_S"][::std::mem::align_of::<_ISP_SHARPEN_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::TuningMode"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, TuningMode) - 9usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::LumaAdpGainEn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, LumaAdpGainEn) - 10usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::DeltaAdpGainEn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, DeltaAdpGainEn) - 11usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::NoiseSuppressEnable"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, NoiseSuppressEnable) - 12usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::SatShtCtrlEn"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, SatShtCtrlEn) - 13usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::SoftClampEnable"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, SoftClampEnable) - 14usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::SoftClampUB"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, SoftClampUB) - 15usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::SoftClampLB"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, SoftClampLB) - 16usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, stManual) - 17usize];
    ["Offset of field: _ISP_SHARPEN_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_SHARPEN_ATTR_S, stAuto) - 165usize];
};
pub type ISP_SHARPEN_ATTR_S = _ISP_SHARPEN_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YCONTRAST_MANUAL_ATTR_S {
    pub ContrastLow: CVI_U8,
    pub ContrastHigh: CVI_U8,
    pub CenterLuma: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YCONTRAST_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_ISP_YCONTRAST_MANUAL_ATTR_S>() - 3usize];
    ["Alignment of _ISP_YCONTRAST_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_ISP_YCONTRAST_MANUAL_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_YCONTRAST_MANUAL_ATTR_S::ContrastLow"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_MANUAL_ATTR_S, ContrastLow) - 0usize];
    ["Offset of field: _ISP_YCONTRAST_MANUAL_ATTR_S::ContrastHigh"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_MANUAL_ATTR_S, ContrastHigh) - 1usize];
    ["Offset of field: _ISP_YCONTRAST_MANUAL_ATTR_S::CenterLuma"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_MANUAL_ATTR_S, CenterLuma) - 2usize];
};
pub type ISP_YCONTRAST_MANUAL_ATTR_S = _ISP_YCONTRAST_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YCONTRAST_AUTO_ATTR_S {
    pub ContrastLow: [CVI_U8; 21usize],
    pub ContrastHigh: [CVI_U8; 21usize],
    pub CenterLuma: [CVI_U8; 21usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YCONTRAST_AUTO_ATTR_S"]
        [::std::mem::size_of::<_ISP_YCONTRAST_AUTO_ATTR_S>() - 63usize];
    ["Alignment of _ISP_YCONTRAST_AUTO_ATTR_S"]
        [::std::mem::align_of::<_ISP_YCONTRAST_AUTO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_YCONTRAST_AUTO_ATTR_S::ContrastLow"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_AUTO_ATTR_S, ContrastLow) - 0usize];
    ["Offset of field: _ISP_YCONTRAST_AUTO_ATTR_S::ContrastHigh"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_AUTO_ATTR_S, ContrastHigh) - 21usize];
    ["Offset of field: _ISP_YCONTRAST_AUTO_ATTR_S::CenterLuma"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_AUTO_ATTR_S, CenterLuma) - 42usize];
};
pub type ISP_YCONTRAST_AUTO_ATTR_S = _ISP_YCONTRAST_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_YCONTRAST_ATTR_S {
    pub Enable: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub UpdateInterval: CVI_U8,
    pub stManual: ISP_YCONTRAST_MANUAL_ATTR_S,
    pub stAuto: ISP_YCONTRAST_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_YCONTRAST_ATTR_S"][::std::mem::size_of::<_ISP_YCONTRAST_ATTR_S>() - 76usize];
    ["Alignment of _ISP_YCONTRAST_ATTR_S"]
        [::std::mem::align_of::<_ISP_YCONTRAST_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_YCONTRAST_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_YCONTRAST_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_YCONTRAST_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_ATTR_S, UpdateInterval) - 8usize];
    ["Offset of field: _ISP_YCONTRAST_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_ATTR_S, stManual) - 9usize];
    ["Offset of field: _ISP_YCONTRAST_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_YCONTRAST_ATTR_S, stAuto) - 12usize];
};
pub type ISP_YCONTRAST_ATTR_S = _ISP_YCONTRAST_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_MONO_ATTR_S {
    pub Enable: CVI_BOOL,
    pub UpdateInterval: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_MONO_ATTR_S"][::std::mem::size_of::<_ISP_MONO_ATTR_S>() - 2usize];
    ["Alignment of _ISP_MONO_ATTR_S"][::std::mem::align_of::<_ISP_MONO_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_MONO_ATTR_S::Enable"]
        [::std::mem::offset_of!(_ISP_MONO_ATTR_S, Enable) - 0usize];
    ["Offset of field: _ISP_MONO_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_MONO_ATTR_S, UpdateInterval) - 1usize];
};
pub type ISP_MONO_ATTR_S = _ISP_MONO_ATTR_S;
pub const _ISP_DIS_MODE_E_DIS_MODE_2_DOF_GME: _ISP_DIS_MODE_E = 0;
pub const _ISP_DIS_MODE_E_DIS_MODE_DEBUG: _ISP_DIS_MODE_E = 1;
pub const _ISP_DIS_MODE_E_DIS_MODE_DOF_BUTT: _ISP_DIS_MODE_E = 2;
pub type _ISP_DIS_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_DIS_MODE_E as DIS_MODE_E;
pub const _ISP_DIS_MOTION_LEVEL_E_DIS_MOTION_LEVEL_NORMAL: _ISP_DIS_MOTION_LEVEL_E = 1;
pub const _ISP_DIS_MOTION_LEVEL_E_DIS_MOTION_LEVEL_BUTT: _ISP_DIS_MOTION_LEVEL_E = 2;
pub type _ISP_DIS_MOTION_LEVEL_E = ::std::os::raw::c_uint;
pub use self::_ISP_DIS_MOTION_LEVEL_E as DIS_MOTION_LEVEL_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DIS_CONFIG_S {
    pub mode: DIS_MODE_E,
    pub motionLevel: DIS_MOTION_LEVEL_E,
    pub cropRatio: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DIS_CONFIG_S"][::std::mem::size_of::<_ISP_DIS_CONFIG_S>() - 12usize];
    ["Alignment of _ISP_DIS_CONFIG_S"][::std::mem::align_of::<_ISP_DIS_CONFIG_S>() - 4usize];
    ["Offset of field: _ISP_DIS_CONFIG_S::mode"]
        [::std::mem::offset_of!(_ISP_DIS_CONFIG_S, mode) - 0usize];
    ["Offset of field: _ISP_DIS_CONFIG_S::motionLevel"]
        [::std::mem::offset_of!(_ISP_DIS_CONFIG_S, motionLevel) - 4usize];
    ["Offset of field: _ISP_DIS_CONFIG_S::cropRatio"]
        [::std::mem::offset_of!(_ISP_DIS_CONFIG_S, cropRatio) - 8usize];
};
pub type ISP_DIS_CONFIG_S = _ISP_DIS_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_DIS_ATTR_S {
    pub enable: CVI_BOOL,
    pub movingSubjectLevel: CVI_U32,
    pub horizontalLimit: CVI_U32,
    pub verticalLimit: CVI_U32,
    pub stillCrop: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_DIS_ATTR_S"][::std::mem::size_of::<_ISP_DIS_ATTR_S>() - 20usize];
    ["Alignment of _ISP_DIS_ATTR_S"][::std::mem::align_of::<_ISP_DIS_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_DIS_ATTR_S::enable"]
        [::std::mem::offset_of!(_ISP_DIS_ATTR_S, enable) - 0usize];
    ["Offset of field: _ISP_DIS_ATTR_S::movingSubjectLevel"]
        [::std::mem::offset_of!(_ISP_DIS_ATTR_S, movingSubjectLevel) - 4usize];
    ["Offset of field: _ISP_DIS_ATTR_S::horizontalLimit"]
        [::std::mem::offset_of!(_ISP_DIS_ATTR_S, horizontalLimit) - 8usize];
    ["Offset of field: _ISP_DIS_ATTR_S::verticalLimit"]
        [::std::mem::offset_of!(_ISP_DIS_ATTR_S, verticalLimit) - 12usize];
    ["Offset of field: _ISP_DIS_ATTR_S::stillCrop"]
        [::std::mem::offset_of!(_ISP_DIS_ATTR_S, stillCrop) - 16usize];
};
pub type ISP_DIS_ATTR_S = _ISP_DIS_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_INNER_STATE_INFO_S {
    pub blcOffsetR: CVI_U32,
    pub blcOffsetGr: CVI_U32,
    pub blcOffsetGb: CVI_U32,
    pub blcOffsetB: CVI_U32,
    pub blcGainR: CVI_U32,
    pub blcGainGr: CVI_U32,
    pub blcGainGb: CVI_U32,
    pub blcGainB: CVI_U32,
    pub ccm: [CVI_S32; 9usize],
    pub drcGlobalToneBinNum: CVI_U16,
    pub drcGlobalToneBinSEStep: CVI_U16,
    pub drcGlobalTone: [CVI_U32; 769usize],
    pub drcDarkTone: [CVI_U32; 257usize],
    pub drcBrightTone: [CVI_U32; 513usize],
    pub bWDRSwitchFinish: CVI_BOOL,
    pub u32WDRExpRatioActual: [CVI_U32; 4usize],
    pub mlscGainTable: ISP_MESH_SHADING_GAIN_LUT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_INNER_STATE_INFO_S"]
        [::std::mem::size_of::<_ISP_INNER_STATE_INFO_S>() - 14464usize];
    ["Alignment of _ISP_INNER_STATE_INFO_S"]
        [::std::mem::align_of::<_ISP_INNER_STATE_INFO_S>() - 4usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcOffsetR"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcOffsetR) - 0usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcOffsetGr"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcOffsetGr) - 4usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcOffsetGb"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcOffsetGb) - 8usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcOffsetB"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcOffsetB) - 12usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcGainR"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcGainR) - 16usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcGainGr"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcGainGr) - 20usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcGainGb"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcGainGb) - 24usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::blcGainB"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, blcGainB) - 28usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::ccm"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, ccm) - 32usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::drcGlobalToneBinNum"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, drcGlobalToneBinNum) - 68usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::drcGlobalToneBinSEStep"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, drcGlobalToneBinSEStep) - 70usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::drcGlobalTone"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, drcGlobalTone) - 72usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::drcDarkTone"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, drcDarkTone) - 3148usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::drcBrightTone"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, drcBrightTone) - 4176usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::bWDRSwitchFinish"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, bWDRSwitchFinish) - 6228usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::u32WDRExpRatioActual"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, u32WDRExpRatioActual) - 6232usize];
    ["Offset of field: _ISP_INNER_STATE_INFO_S::mlscGainTable"]
        [::std::mem::offset_of!(_ISP_INNER_STATE_INFO_S, mlscGainTable) - 6248usize];
};
pub type ISP_INNER_STATE_INFO_S = _ISP_INNER_STATE_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_VC_ATTR_S {
    pub UpdateInterval: CVI_U8,
    pub MotionThreshold: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_VC_ATTR_S"][::std::mem::size_of::<_ISP_VC_ATTR_S>() - 2usize];
    ["Alignment of _ISP_VC_ATTR_S"][::std::mem::align_of::<_ISP_VC_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_VC_ATTR_S::UpdateInterval"]
        [::std::mem::offset_of!(_ISP_VC_ATTR_S, UpdateInterval) - 0usize];
    ["Offset of field: _ISP_VC_ATTR_S::MotionThreshold"]
        [::std::mem::offset_of!(_ISP_VC_ATTR_S, MotionThreshold) - 1usize];
};
pub type ISP_VC_ATTR_S = _ISP_VC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CMOS_SENSOR_IMAGE_MODE_S {
    pub u16Width: CVI_U16,
    pub u16Height: CVI_U16,
    pub f32Fps: CVI_FLOAT,
    pub u8SnsMode: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CMOS_SENSOR_IMAGE_MODE_S"]
        [::std::mem::size_of::<_ISP_CMOS_SENSOR_IMAGE_MODE_S>() - 12usize];
    ["Alignment of _ISP_CMOS_SENSOR_IMAGE_MODE_S"]
        [::std::mem::align_of::<_ISP_CMOS_SENSOR_IMAGE_MODE_S>() - 4usize];
    ["Offset of field: _ISP_CMOS_SENSOR_IMAGE_MODE_S::u16Width"]
        [::std::mem::offset_of!(_ISP_CMOS_SENSOR_IMAGE_MODE_S, u16Width) - 0usize];
    ["Offset of field: _ISP_CMOS_SENSOR_IMAGE_MODE_S::u16Height"]
        [::std::mem::offset_of!(_ISP_CMOS_SENSOR_IMAGE_MODE_S, u16Height) - 2usize];
    ["Offset of field: _ISP_CMOS_SENSOR_IMAGE_MODE_S::f32Fps"]
        [::std::mem::offset_of!(_ISP_CMOS_SENSOR_IMAGE_MODE_S, f32Fps) - 4usize];
    ["Offset of field: _ISP_CMOS_SENSOR_IMAGE_MODE_S::u8SnsMode"]
        [::std::mem::offset_of!(_ISP_CMOS_SENSOR_IMAGE_MODE_S, u8SnsMode) - 8usize];
};
pub type ISP_CMOS_SENSOR_IMAGE_MODE_S = _ISP_CMOS_SENSOR_IMAGE_MODE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CMOS_BLACK_LEVEL_S {
    pub bUpdate: CVI_BOOL,
    pub blcAttr: ISP_BLACK_LEVEL_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CMOS_BLACK_LEVEL_S"]
        [::std::mem::size_of::<_ISP_CMOS_BLACK_LEVEL_S>() - 288usize];
    ["Alignment of _ISP_CMOS_BLACK_LEVEL_S"]
        [::std::mem::align_of::<_ISP_CMOS_BLACK_LEVEL_S>() - 4usize];
    ["Offset of field: _ISP_CMOS_BLACK_LEVEL_S::bUpdate"]
        [::std::mem::offset_of!(_ISP_CMOS_BLACK_LEVEL_S, bUpdate) - 0usize];
    ["Offset of field: _ISP_CMOS_BLACK_LEVEL_S::blcAttr"]
        [::std::mem::offset_of!(_ISP_CMOS_BLACK_LEVEL_S, blcAttr) - 4usize];
};
pub type ISP_CMOS_BLACK_LEVEL_S = _ISP_CMOS_BLACK_LEVEL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_ATTR_INFO_S {
    pub eSensorId: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_ATTR_INFO_S"][::std::mem::size_of::<_ISP_SNS_ATTR_INFO_S>() - 4usize];
    ["Alignment of _ISP_SNS_ATTR_INFO_S"][::std::mem::align_of::<_ISP_SNS_ATTR_INFO_S>() - 4usize];
    ["Offset of field: _ISP_SNS_ATTR_INFO_S::eSensorId"]
        [::std::mem::offset_of!(_ISP_SNS_ATTR_INFO_S, eSensorId) - 0usize];
};
pub type ISP_SNS_ATTR_INFO_S = _ISP_SNS_ATTR_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cviISP_CMOS_NOISE_CALIBRATION_S {
    pub CalibrationCoef: [[[CVI_FLOAT; 2usize]; 4usize]; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cviISP_CMOS_NOISE_CALIBRATION_S"]
        [::std::mem::size_of::<cviISP_CMOS_NOISE_CALIBRATION_S>() - 512usize];
    ["Alignment of cviISP_CMOS_NOISE_CALIBRATION_S"]
        [::std::mem::align_of::<cviISP_CMOS_NOISE_CALIBRATION_S>() - 4usize];
    ["Offset of field: cviISP_CMOS_NOISE_CALIBRATION_S::CalibrationCoef"]
        [::std::mem::offset_of!(cviISP_CMOS_NOISE_CALIBRATION_S, CalibrationCoef) - 0usize];
};
pub type ISP_CMOS_NOISE_CALIBRATION_S = cviISP_CMOS_NOISE_CALIBRATION_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CMOS_DEFAULT_S {
    pub stNoiseCalibration: ISP_CMOS_NOISE_CALIBRATION_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CMOS_DEFAULT_S"][::std::mem::size_of::<_ISP_CMOS_DEFAULT_S>() - 512usize];
    ["Alignment of _ISP_CMOS_DEFAULT_S"][::std::mem::align_of::<_ISP_CMOS_DEFAULT_S>() - 4usize];
    ["Offset of field: _ISP_CMOS_DEFAULT_S::stNoiseCalibration"]
        [::std::mem::offset_of!(_ISP_CMOS_DEFAULT_S, stNoiseCalibration) - 0usize];
};
pub type ISP_CMOS_DEFAULT_S = _ISP_CMOS_DEFAULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SENSOR_EXP_FUNC_S {
    pub pfn_cmos_sensor_init: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE)>,
    pub pfn_cmos_sensor_exit: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE)>,
    pub pfn_cmos_sensor_global_init: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE)>,
    pub pfn_cmos_set_image_mode: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pstSensorImageMode: *mut ISP_CMOS_SENSOR_IMAGE_MODE_S,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_set_wdr_mode:
        ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE, u8Mode: CVI_U8) -> CVI_S32>,
    pub pfn_cmos_get_isp_default: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstDef: *mut ISP_CMOS_DEFAULT_S) -> CVI_S32,
    >,
    pub pfn_cmos_get_isp_black_level: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pstBlackLevel: *mut ISP_CMOS_BLACK_LEVEL_S,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_get_sns_reg_info: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstSnsRegsInfo: *mut ISP_SNS_SYNC_INFO_S) -> CVI_S32,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SENSOR_EXP_FUNC_S"][::std::mem::size_of::<_ISP_SENSOR_EXP_FUNC_S>() - 64usize];
    ["Alignment of _ISP_SENSOR_EXP_FUNC_S"]
        [::std::mem::align_of::<_ISP_SENSOR_EXP_FUNC_S>() - 8usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_sensor_init"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_sensor_init) - 0usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_sensor_exit"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_sensor_exit) - 8usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_sensor_global_init"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_sensor_global_init) - 16usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_set_image_mode"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_set_image_mode) - 24usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_set_wdr_mode"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_set_wdr_mode) - 32usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_get_isp_default"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_get_isp_default) - 40usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_get_isp_black_level"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_get_isp_black_level) - 48usize];
    ["Offset of field: _ISP_SENSOR_EXP_FUNC_S::pfn_cmos_get_sns_reg_info"]
        [::std::mem::offset_of!(_ISP_SENSOR_EXP_FUNC_S, pfn_cmos_get_sns_reg_info) - 56usize];
};
pub type ISP_SENSOR_EXP_FUNC_S = _ISP_SENSOR_EXP_FUNC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bmISP_SENSOR_REGISTER_S {
    pub stSnsExp: ISP_SENSOR_EXP_FUNC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bmISP_SENSOR_REGISTER_S"][::std::mem::size_of::<bmISP_SENSOR_REGISTER_S>() - 64usize];
    ["Alignment of bmISP_SENSOR_REGISTER_S"]
        [::std::mem::align_of::<bmISP_SENSOR_REGISTER_S>() - 8usize];
    ["Offset of field: bmISP_SENSOR_REGISTER_S::stSnsExp"]
        [::std::mem::offset_of!(bmISP_SENSOR_REGISTER_S, stSnsExp) - 0usize];
};
pub type ISP_SENSOR_REGISTER_S = bmISP_SENSOR_REGISTER_S;
pub const _MCLK_FREQ_E_MCLK_FREQ_NONE: _MCLK_FREQ_E = 0;
pub const _MCLK_FREQ_E_MCLK_FREQ_37P125M: _MCLK_FREQ_E = 1;
pub const _MCLK_FREQ_E_MCLK_FREQ_25M: _MCLK_FREQ_E = 2;
pub const _MCLK_FREQ_E_MCLK_FREQ_27M: _MCLK_FREQ_E = 3;
pub const _MCLK_FREQ_E_MCLK_FREQ_NUM: _MCLK_FREQ_E = 4;
pub type _MCLK_FREQ_E = ::std::os::raw::c_uint;
pub use self::_MCLK_FREQ_E as MCLK_FREQ_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SNS_MCLK_S {
    pub u8Cam: CVI_U32,
    pub enFreq: MCLK_FREQ_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SNS_MCLK_S"][::std::mem::size_of::<_SNS_MCLK_S>() - 8usize];
    ["Alignment of _SNS_MCLK_S"][::std::mem::align_of::<_SNS_MCLK_S>() - 4usize];
    ["Offset of field: _SNS_MCLK_S::u8Cam"][::std::mem::offset_of!(_SNS_MCLK_S, u8Cam) - 0usize];
    ["Offset of field: _SNS_MCLK_S::enFreq"][::std::mem::offset_of!(_SNS_MCLK_S, enFreq) - 4usize];
};
pub type SNS_MCLK_S = _SNS_MCLK_S;
pub const _ISP_FSWDR_MODE_E_ISP_FSWDR_NORMAL_MODE: _ISP_FSWDR_MODE_E = 0;
pub const _ISP_FSWDR_MODE_E_ISP_FSWDR_LONG_FRAME_MODE: _ISP_FSWDR_MODE_E = 1;
pub const _ISP_FSWDR_MODE_E_ISP_FSWDR_AUTO_LONG_FRAME_MODE: _ISP_FSWDR_MODE_E = 2;
pub const _ISP_FSWDR_MODE_E_ISP_FSWDR_MODE_BUTT: _ISP_FSWDR_MODE_E = 3;
pub type _ISP_FSWDR_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_FSWDR_MODE_E as ISP_FSWDR_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_RANGE_S {
    pub u32Max: CVI_U32,
    pub u32Min: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_RANGE_S"][::std::mem::size_of::<_ISP_AE_RANGE_S>() - 8usize];
    ["Alignment of _ISP_AE_RANGE_S"][::std::mem::align_of::<_ISP_AE_RANGE_S>() - 4usize];
    ["Offset of field: _ISP_AE_RANGE_S::u32Max"]
        [::std::mem::offset_of!(_ISP_AE_RANGE_S, u32Max) - 0usize];
    ["Offset of field: _ISP_AE_RANGE_S::u32Min"]
        [::std::mem::offset_of!(_ISP_AE_RANGE_S, u32Min) - 4usize];
};
pub type ISP_AE_RANGE_S = _ISP_AE_RANGE_S;
pub const _ISP_AE_STRATEGY_E_AE_EXP_HIGHLIGHT_PRIOR: _ISP_AE_STRATEGY_E = 0;
pub const _ISP_AE_STRATEGY_E_AE_EXP_LOWLIGHT_PRIOR: _ISP_AE_STRATEGY_E = 1;
pub const _ISP_AE_STRATEGY_E_AE_STRATEGY_MODE_BUTT: _ISP_AE_STRATEGY_E = 2;
pub type _ISP_AE_STRATEGY_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_STRATEGY_E as ISP_AE_STRATEGY_E;
pub const _ISP_AE_MODE_E_AE_MODE_SLOW_SHUTTER: _ISP_AE_MODE_E = 0;
pub const _ISP_AE_MODE_E_AE_MODE_FIX_FRAME_RATE: _ISP_AE_MODE_E = 1;
pub const _ISP_AE_MODE_E_AE_MODE_BUTT: _ISP_AE_MODE_E = 2;
pub type _ISP_AE_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_AE_MODE_E as ISP_AE_MODE_E;
pub const _ISP_ANTIFLICKER_MODE_E_ISP_ANTIFLICKER_NORMAL_MODE: _ISP_ANTIFLICKER_MODE_E = 0;
pub const _ISP_ANTIFLICKER_MODE_E_ISP_ANTIFLICKER_AUTO_MODE: _ISP_ANTIFLICKER_MODE_E = 1;
pub const _ISP_ANTIFLICKER_MODE_E_ISP_ANTIFLICKER_MODE_BUTT: _ISP_ANTIFLICKER_MODE_E = 2;
pub type _ISP_ANTIFLICKER_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_ANTIFLICKER_MODE_E as ISP_ANTIFLICKER_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ANTIFLICKER_S {
    pub bEnable: CVI_BOOL,
    pub enFrequency: ISP_AE_ANTIFLICKER_FREQUENCE_E,
    pub enMode: ISP_ANTIFLICKER_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ANTIFLICKER_S"][::std::mem::size_of::<_ISP_ANTIFLICKER_S>() - 12usize];
    ["Alignment of _ISP_ANTIFLICKER_S"][::std::mem::align_of::<_ISP_ANTIFLICKER_S>() - 4usize];
    ["Offset of field: _ISP_ANTIFLICKER_S::bEnable"]
        [::std::mem::offset_of!(_ISP_ANTIFLICKER_S, bEnable) - 0usize];
    ["Offset of field: _ISP_ANTIFLICKER_S::enFrequency"]
        [::std::mem::offset_of!(_ISP_ANTIFLICKER_S, enFrequency) - 4usize];
    ["Offset of field: _ISP_ANTIFLICKER_S::enMode"]
        [::std::mem::offset_of!(_ISP_ANTIFLICKER_S, enMode) - 8usize];
};
pub type ISP_ANTIFLICKER_S = _ISP_ANTIFLICKER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SUBFLICKER_S {
    pub bEnable: CVI_BOOL,
    pub u8LumaDiff: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SUBFLICKER_S"][::std::mem::size_of::<_ISP_SUBFLICKER_S>() - 2usize];
    ["Alignment of _ISP_SUBFLICKER_S"][::std::mem::align_of::<_ISP_SUBFLICKER_S>() - 1usize];
    ["Offset of field: _ISP_SUBFLICKER_S::bEnable"]
        [::std::mem::offset_of!(_ISP_SUBFLICKER_S, bEnable) - 0usize];
    ["Offset of field: _ISP_SUBFLICKER_S::u8LumaDiff"]
        [::std::mem::offset_of!(_ISP_SUBFLICKER_S, u8LumaDiff) - 1usize];
};
pub type ISP_SUBFLICKER_S = _ISP_SUBFLICKER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_DELAY_S {
    pub u16BlackDelayFrame: CVI_U16,
    pub u16WhiteDelayFrame: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_DELAY_S"][::std::mem::size_of::<_ISP_AE_DELAY_S>() - 4usize];
    ["Alignment of _ISP_AE_DELAY_S"][::std::mem::align_of::<_ISP_AE_DELAY_S>() - 2usize];
    ["Offset of field: _ISP_AE_DELAY_S::u16BlackDelayFrame"]
        [::std::mem::offset_of!(_ISP_AE_DELAY_S, u16BlackDelayFrame) - 0usize];
    ["Offset of field: _ISP_AE_DELAY_S::u16WhiteDelayFrame"]
        [::std::mem::offset_of!(_ISP_AE_DELAY_S, u16WhiteDelayFrame) - 2usize];
};
pub type ISP_AE_DELAY_S = _ISP_AE_DELAY_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ME_ATTR_S {
    pub enExpTimeOpType: ISP_OP_TYPE_E,
    pub enAGainOpType: ISP_OP_TYPE_E,
    pub enDGainOpType: ISP_OP_TYPE_E,
    pub enISPDGainOpType: ISP_OP_TYPE_E,
    pub u32ExpTime: CVI_U32,
    pub u32AGain: CVI_U32,
    pub u32DGain: CVI_U32,
    pub u32ISPDGain: CVI_U32,
    pub enISONumOpType: ISP_OP_TYPE_E,
    pub enGainType: ISP_AE_GAIN_TYPE_E,
    pub u32ISONum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ME_ATTR_S"][::std::mem::size_of::<_ISP_ME_ATTR_S>() - 44usize];
    ["Alignment of _ISP_ME_ATTR_S"][::std::mem::align_of::<_ISP_ME_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_ME_ATTR_S::enExpTimeOpType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enExpTimeOpType) - 0usize];
    ["Offset of field: _ISP_ME_ATTR_S::enAGainOpType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enAGainOpType) - 4usize];
    ["Offset of field: _ISP_ME_ATTR_S::enDGainOpType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enDGainOpType) - 8usize];
    ["Offset of field: _ISP_ME_ATTR_S::enISPDGainOpType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enISPDGainOpType) - 12usize];
    ["Offset of field: _ISP_ME_ATTR_S::u32ExpTime"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, u32ExpTime) - 16usize];
    ["Offset of field: _ISP_ME_ATTR_S::u32AGain"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, u32AGain) - 20usize];
    ["Offset of field: _ISP_ME_ATTR_S::u32DGain"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, u32DGain) - 24usize];
    ["Offset of field: _ISP_ME_ATTR_S::u32ISPDGain"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, u32ISPDGain) - 28usize];
    ["Offset of field: _ISP_ME_ATTR_S::enISONumOpType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enISONumOpType) - 32usize];
    ["Offset of field: _ISP_ME_ATTR_S::enGainType"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, enGainType) - 36usize];
    ["Offset of field: _ISP_ME_ATTR_S::u32ISONum"]
        [::std::mem::offset_of!(_ISP_ME_ATTR_S, u32ISONum) - 40usize];
};
pub type ISP_ME_ATTR_S = _ISP_ME_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_ATTR_S {
    pub stExpTimeRange: ISP_AE_RANGE_S,
    pub stAGainRange: ISP_AE_RANGE_S,
    pub stDGainRange: ISP_AE_RANGE_S,
    pub stISPDGainRange: ISP_AE_RANGE_S,
    pub stSysGainRange: ISP_AE_RANGE_S,
    pub u32GainThreshold: CVI_U32,
    pub u8Speed: CVI_U8,
    pub u16BlackSpeedBias: CVI_U16,
    pub u8Tolerance: CVI_U8,
    pub u8Compensation: CVI_U8,
    pub u16EVBias: CVI_U16,
    pub enAEStrategyMode: ISP_AE_STRATEGY_E,
    pub u16HistRatioSlope: CVI_U16,
    pub u8MaxHistOffset: CVI_U8,
    pub enAEMode: ISP_AE_MODE_E,
    pub stAntiflicker: ISP_ANTIFLICKER_S,
    pub stSubflicker: ISP_SUBFLICKER_S,
    pub stAEDelayAttr: ISP_AE_DELAY_S,
    pub bManualExpValue: CVI_BOOL,
    pub u32ExpValue: CVI_U32,
    pub enFSWDRMode: ISP_FSWDR_MODE_E,
    pub bWDRQuick: CVI_BOOL,
    pub u16ISOCalCoef: CVI_U16,
    pub enGainType: ISP_AE_GAIN_TYPE_E,
    pub stISONumRange: ISP_AE_RANGE_S,
    pub s16IRCutOnLv: CVI_S16,
    pub s16IRCutOffLv: CVI_S16,
    pub enIRCutStatus: ISP_AE_IR_CUT_FORCE_STATUS,
    pub au8AdjustTargetMin: [CVI_U8; 21usize],
    pub au8AdjustTargetMax: [CVI_U8; 21usize],
    pub u16LowBinThr: CVI_U16,
    pub u16HighBinThr: CVI_U16,
    pub bEnableFaceAE: CVI_BOOL,
    pub u8FaceTargetLuma: CVI_U8,
    pub u8FaceWeight: CVI_U8,
    pub u8GridBvWeight: CVI_U8,
    pub au32Reserve: [CVI_U32; 10usize],
    pub u8HighLightLumaThr: CVI_U8,
    pub u8HighLightBufLumaThr: CVI_U8,
    pub u8LowLightLumaThr: CVI_U8,
    pub u8LowLightBufLumaThr: CVI_U8,
    pub bHistogramAssist: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_ATTR_S"][::std::mem::size_of::<_ISP_AE_ATTR_S>() - 216usize];
    ["Alignment of _ISP_AE_ATTR_S"][::std::mem::align_of::<_ISP_AE_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_AE_ATTR_S::stExpTimeRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stExpTimeRange) - 0usize];
    ["Offset of field: _ISP_AE_ATTR_S::stAGainRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stAGainRange) - 8usize];
    ["Offset of field: _ISP_AE_ATTR_S::stDGainRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stDGainRange) - 16usize];
    ["Offset of field: _ISP_AE_ATTR_S::stISPDGainRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stISPDGainRange) - 24usize];
    ["Offset of field: _ISP_AE_ATTR_S::stSysGainRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stSysGainRange) - 32usize];
    ["Offset of field: _ISP_AE_ATTR_S::u32GainThreshold"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u32GainThreshold) - 40usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8Speed"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8Speed) - 44usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16BlackSpeedBias"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16BlackSpeedBias) - 46usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8Tolerance"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8Tolerance) - 48usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8Compensation"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8Compensation) - 49usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16EVBias"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16EVBias) - 50usize];
    ["Offset of field: _ISP_AE_ATTR_S::enAEStrategyMode"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, enAEStrategyMode) - 52usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16HistRatioSlope"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16HistRatioSlope) - 56usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8MaxHistOffset"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8MaxHistOffset) - 58usize];
    ["Offset of field: _ISP_AE_ATTR_S::enAEMode"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, enAEMode) - 60usize];
    ["Offset of field: _ISP_AE_ATTR_S::stAntiflicker"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stAntiflicker) - 64usize];
    ["Offset of field: _ISP_AE_ATTR_S::stSubflicker"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stSubflicker) - 76usize];
    ["Offset of field: _ISP_AE_ATTR_S::stAEDelayAttr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stAEDelayAttr) - 78usize];
    ["Offset of field: _ISP_AE_ATTR_S::bManualExpValue"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, bManualExpValue) - 82usize];
    ["Offset of field: _ISP_AE_ATTR_S::u32ExpValue"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u32ExpValue) - 84usize];
    ["Offset of field: _ISP_AE_ATTR_S::enFSWDRMode"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, enFSWDRMode) - 88usize];
    ["Offset of field: _ISP_AE_ATTR_S::bWDRQuick"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, bWDRQuick) - 92usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16ISOCalCoef"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16ISOCalCoef) - 94usize];
    ["Offset of field: _ISP_AE_ATTR_S::enGainType"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, enGainType) - 96usize];
    ["Offset of field: _ISP_AE_ATTR_S::stISONumRange"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, stISONumRange) - 100usize];
    ["Offset of field: _ISP_AE_ATTR_S::s16IRCutOnLv"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, s16IRCutOnLv) - 108usize];
    ["Offset of field: _ISP_AE_ATTR_S::s16IRCutOffLv"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, s16IRCutOffLv) - 110usize];
    ["Offset of field: _ISP_AE_ATTR_S::enIRCutStatus"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, enIRCutStatus) - 112usize];
    ["Offset of field: _ISP_AE_ATTR_S::au8AdjustTargetMin"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, au8AdjustTargetMin) - 116usize];
    ["Offset of field: _ISP_AE_ATTR_S::au8AdjustTargetMax"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, au8AdjustTargetMax) - 137usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16LowBinThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16LowBinThr) - 158usize];
    ["Offset of field: _ISP_AE_ATTR_S::u16HighBinThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u16HighBinThr) - 160usize];
    ["Offset of field: _ISP_AE_ATTR_S::bEnableFaceAE"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, bEnableFaceAE) - 162usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8FaceTargetLuma"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8FaceTargetLuma) - 163usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8FaceWeight"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8FaceWeight) - 164usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8GridBvWeight"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8GridBvWeight) - 165usize];
    ["Offset of field: _ISP_AE_ATTR_S::au32Reserve"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, au32Reserve) - 168usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8HighLightLumaThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8HighLightLumaThr) - 208usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8HighLightBufLumaThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8HighLightBufLumaThr) - 209usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8LowLightLumaThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8LowLightLumaThr) - 210usize];
    ["Offset of field: _ISP_AE_ATTR_S::u8LowLightBufLumaThr"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, u8LowLightBufLumaThr) - 211usize];
    ["Offset of field: _ISP_AE_ATTR_S::bHistogramAssist"]
        [::std::mem::offset_of!(_ISP_AE_ATTR_S, bHistogramAssist) - 212usize];
};
pub type ISP_AE_ATTR_S = _ISP_AE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_EXPOSURE_ATTR_S {
    pub bByPass: CVI_BOOL,
    pub enOpType: ISP_OP_TYPE_E,
    pub u8AERunInterval: CVI_U8,
    pub bHistStatAdjust: CVI_BOOL,
    pub bAERouteExValid: CVI_BOOL,
    pub stManual: ISP_ME_ATTR_S,
    pub stAuto: ISP_AE_ATTR_S,
    pub u8DebugMode: CVI_U8,
    pub enMeterMode: ISP_AE_METER_MODE_E,
    pub bAEGainSepCfg: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_EXPOSURE_ATTR_S"][::std::mem::size_of::<_ISP_EXPOSURE_ATTR_S>() - 284usize];
    ["Alignment of _ISP_EXPOSURE_ATTR_S"][::std::mem::align_of::<_ISP_EXPOSURE_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::bByPass"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, bByPass) - 0usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, enOpType) - 4usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::u8AERunInterval"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, u8AERunInterval) - 8usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::bHistStatAdjust"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, bHistStatAdjust) - 9usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::bAERouteExValid"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, bAERouteExValid) - 10usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::stManual"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, stManual) - 12usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::stAuto"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, stAuto) - 56usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::u8DebugMode"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, u8DebugMode) - 272usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::enMeterMode"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, enMeterMode) - 276usize];
    ["Offset of field: _ISP_EXPOSURE_ATTR_S::bAEGainSepCfg"]
        [::std::mem::offset_of!(_ISP_EXPOSURE_ATTR_S, bAEGainSepCfg) - 280usize];
};
pub type ISP_EXPOSURE_ATTR_S = _ISP_EXPOSURE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ISP_STITCH_ATTR_T {
    pub enable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ISP_STITCH_ATTR_T"][::std::mem::size_of::<ISP_STITCH_ATTR_T>() - 1usize];
    ["Alignment of ISP_STITCH_ATTR_T"][::std::mem::align_of::<ISP_STITCH_ATTR_T>() - 1usize];
    ["Offset of field: ISP_STITCH_ATTR_T::enable"]
        [::std::mem::offset_of!(ISP_STITCH_ATTR_T, enable) - 0usize];
};
pub type ISP_STITCH_ATTR_S = ISP_STITCH_ATTR_T;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ALG_LIB_S {
    pub s32Id: CVI_S32,
    pub acLibName: [CVI_CHAR; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ALG_LIB_S"][::std::mem::size_of::<_ALG_LIB_S>() - 24usize];
    ["Alignment of _ALG_LIB_S"][::std::mem::align_of::<_ALG_LIB_S>() - 4usize];
    ["Offset of field: _ALG_LIB_S::s32Id"][::std::mem::offset_of!(_ALG_LIB_S, s32Id) - 0usize];
    ["Offset of field: _ALG_LIB_S::acLibName"]
        [::std::mem::offset_of!(_ALG_LIB_S, acLibName) - 4usize];
};
pub type ALG_LIB_S = _ALG_LIB_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_PARAM_S {
    pub SensorId: SENSOR_ID,
    pub u8WDRMode: CVI_U8,
    pub u8HDRMode: CVI_U8,
    pub u16BlackLevel: CVI_U16,
    pub f32Fps: CVI_FLOAT,
    pub enBayer: ISP_BAYER_FORMAT_E,
    pub stStitchAttr: ISP_STITCH_ATTR_S,
    pub s32Rsv: CVI_S32,
    pub aeLEWinConfig: [ISP_3AWIN_CONFIG_S; 1usize],
    pub aeSEWinConfig: ISP_3AWIN_CONFIG_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_PARAM_S"][::std::mem::size_of::<_ISP_AE_PARAM_S>() - 44usize];
    ["Alignment of _ISP_AE_PARAM_S"][::std::mem::align_of::<_ISP_AE_PARAM_S>() - 4usize];
    ["Offset of field: _ISP_AE_PARAM_S::SensorId"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, SensorId) - 0usize];
    ["Offset of field: _ISP_AE_PARAM_S::u8WDRMode"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, u8WDRMode) - 4usize];
    ["Offset of field: _ISP_AE_PARAM_S::u8HDRMode"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, u8HDRMode) - 5usize];
    ["Offset of field: _ISP_AE_PARAM_S::u16BlackLevel"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, u16BlackLevel) - 6usize];
    ["Offset of field: _ISP_AE_PARAM_S::f32Fps"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, f32Fps) - 8usize];
    ["Offset of field: _ISP_AE_PARAM_S::enBayer"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, enBayer) - 12usize];
    ["Offset of field: _ISP_AE_PARAM_S::stStitchAttr"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, stStitchAttr) - 16usize];
    ["Offset of field: _ISP_AE_PARAM_S::s32Rsv"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, s32Rsv) - 20usize];
    ["Offset of field: _ISP_AE_PARAM_S::aeLEWinConfig"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, aeLEWinConfig) - 24usize];
    ["Offset of field: _ISP_AE_PARAM_S::aeSEWinConfig"]
        [::std::mem::offset_of!(_ISP_AE_PARAM_S, aeSEWinConfig) - 34usize];
};
pub type ISP_AE_PARAM_S = _ISP_AE_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FE_AE_STAT_1_S {
    pub u32PixelCount: [CVI_U32; 2usize],
    pub u32PixelWeight: [CVI_U32; 2usize],
    pub au32HistogramMemArray: [[CVI_U32; 256usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FE_AE_STAT_1_S"][::std::mem::size_of::<_ISP_FE_AE_STAT_1_S>() - 2064usize];
    ["Alignment of _ISP_FE_AE_STAT_1_S"][::std::mem::align_of::<_ISP_FE_AE_STAT_1_S>() - 4usize];
    ["Offset of field: _ISP_FE_AE_STAT_1_S::u32PixelCount"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_1_S, u32PixelCount) - 0usize];
    ["Offset of field: _ISP_FE_AE_STAT_1_S::u32PixelWeight"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_1_S, u32PixelWeight) - 8usize];
    ["Offset of field: _ISP_FE_AE_STAT_1_S::au32HistogramMemArray"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_1_S, au32HistogramMemArray) - 16usize];
};
pub type ISP_FE_AE_STAT_1_S = _ISP_FE_AE_STAT_1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FE_AE_STAT_2_S {
    pub u16GlobalAvgR: [CVI_U16; 2usize],
    pub u16GlobalAvgGr: [CVI_U16; 2usize],
    pub u16GlobalAvgGb: [CVI_U16; 2usize],
    pub u16GlobalAvgB: [CVI_U16; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FE_AE_STAT_2_S"][::std::mem::size_of::<_ISP_FE_AE_STAT_2_S>() - 16usize];
    ["Alignment of _ISP_FE_AE_STAT_2_S"][::std::mem::align_of::<_ISP_FE_AE_STAT_2_S>() - 2usize];
    ["Offset of field: _ISP_FE_AE_STAT_2_S::u16GlobalAvgR"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_2_S, u16GlobalAvgR) - 0usize];
    ["Offset of field: _ISP_FE_AE_STAT_2_S::u16GlobalAvgGr"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_2_S, u16GlobalAvgGr) - 4usize];
    ["Offset of field: _ISP_FE_AE_STAT_2_S::u16GlobalAvgGb"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_2_S, u16GlobalAvgGb) - 8usize];
    ["Offset of field: _ISP_FE_AE_STAT_2_S::u16GlobalAvgB"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_2_S, u16GlobalAvgB) - 12usize];
};
pub type ISP_FE_AE_STAT_2_S = _ISP_FE_AE_STAT_2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FE_AE_STAT_3_S {
    pub au16ZoneAvg: [[[[CVI_U16; 4usize]; 34usize]; 30usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FE_AE_STAT_3_S"][::std::mem::size_of::<_ISP_FE_AE_STAT_3_S>() - 16320usize];
    ["Alignment of _ISP_FE_AE_STAT_3_S"][::std::mem::align_of::<_ISP_FE_AE_STAT_3_S>() - 2usize];
    ["Offset of field: _ISP_FE_AE_STAT_3_S::au16ZoneAvg"]
        [::std::mem::offset_of!(_ISP_FE_AE_STAT_3_S, au16ZoneAvg) - 0usize];
};
pub type ISP_FE_AE_STAT_3_S = _ISP_FE_AE_STAT_3_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FE_AE_STITCH_STAT_3_S {
    pub au16ZoneAvg: [[[[[CVI_U16; 4usize]; 34usize]; 30usize]; 2usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FE_AE_STITCH_STAT_3_S"]
        [::std::mem::size_of::<_ISP_FE_AE_STITCH_STAT_3_S>() - 32640usize];
    ["Alignment of _ISP_FE_AE_STITCH_STAT_3_S"]
        [::std::mem::align_of::<_ISP_FE_AE_STITCH_STAT_3_S>() - 2usize];
    ["Offset of field: _ISP_FE_AE_STITCH_STAT_3_S::au16ZoneAvg"]
        [::std::mem::offset_of!(_ISP_FE_AE_STITCH_STAT_3_S, au16ZoneAvg) - 0usize];
};
pub type ISP_FE_AE_STITCH_STAT_3_S = _ISP_FE_AE_STITCH_STAT_3_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_STAT_ATTR_S {
    pub bChange: CVI_BOOL,
    pub bHistAdjust: CVI_BOOL,
    pub u8AEBESel: CVI_U8,
    pub u8FourPlaneMode: CVI_U8,
    pub u8HistOffsetX: CVI_U8,
    pub u8HistOffsetY: CVI_U8,
    pub u8HistSkipX: CVI_U8,
    pub u8HistSkipY: CVI_U8,
    pub bModeUpdate: CVI_BOOL,
    pub u8HistMode: CVI_U8,
    pub u8AverMode: CVI_U8,
    pub u8MaxGainMode: CVI_U8,
    pub bWightTableUpdate: CVI_BOOL,
    pub au8WeightTable: [[[CVI_U8; 17usize]; 15usize]; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_STAT_ATTR_S"][::std::mem::size_of::<_ISP_AE_STAT_ATTR_S>() - 1033usize];
    ["Alignment of _ISP_AE_STAT_ATTR_S"][::std::mem::align_of::<_ISP_AE_STAT_ATTR_S>() - 1usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::bChange"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, bChange) - 0usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::bHistAdjust"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, bHistAdjust) - 1usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8AEBESel"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8AEBESel) - 2usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8FourPlaneMode"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8FourPlaneMode) - 3usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8HistOffsetX"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8HistOffsetX) - 4usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8HistOffsetY"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8HistOffsetY) - 5usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8HistSkipX"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8HistSkipX) - 6usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8HistSkipY"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8HistSkipY) - 7usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::bModeUpdate"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, bModeUpdate) - 8usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8HistMode"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8HistMode) - 9usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8AverMode"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8AverMode) - 10usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::u8MaxGainMode"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, u8MaxGainMode) - 11usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::bWightTableUpdate"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, bWightTableUpdate) - 12usize];
    ["Offset of field: _ISP_AE_STAT_ATTR_S::au8WeightTable"]
        [::std::mem::offset_of!(_ISP_AE_STAT_ATTR_S, au8WeightTable) - 13usize];
};
pub type ISP_AE_STAT_ATTR_S = _ISP_AE_STAT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_STAT_RESULT_S {
    pub u32IntTime: [CVI_U32; 4usize],
    pub u32IspDgain: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub u32Iso: CVI_U32,
    pub u8AERunInterval: CVI_U8,
    pub bPirisValid: CVI_BOOL,
    pub s32PirisPos: CVI_S32,
    pub u32PirisGain: CVI_U32,
    pub enFSWDRMode: ISP_FSWDR_MODE_E,
    pub au32WDRGain: [CVI_U32; 4usize],
    pub u32HmaxTimes: CVI_U32,
    pub stStatAttr: ISP_AE_STAT_ATTR_S,
    pub stUpdateInfo: ISP_DCF_UPDATE_INFO_S,
    pub u32ExpRatio: CVI_U32,
    pub s16CurrentLV: CVI_S16,
    pub u32AvgLuma: CVI_U32,
    pub u8MeterFramePeriod: CVI_U8,
    pub bStable: CVI_BOOL,
    pub fBvStep: CVI_FLOAT,
    pub u32BlcIso: CVI_U32,
    pub u32IspDgainSF: CVI_U32,
    pub u32AgainSF: CVI_U32,
    pub u32DgainSF: CVI_U32,
    pub u32IsoSF: CVI_U32,
    pub u32BlcIsoSF: CVI_U32,
    pub fEvRatio: [CVI_FLOAT; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_STAT_RESULT_S"][::std::mem::size_of::<_ISP_AE_STAT_RESULT_S>() - 1184usize];
    ["Alignment of _ISP_AE_STAT_RESULT_S"]
        [::std::mem::align_of::<_ISP_AE_STAT_RESULT_S>() - 4usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32IntTime"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32IntTime) - 0usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32IspDgain) - 16usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32Again"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32Again) - 20usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32Dgain) - 24usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32Iso"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32Iso) - 28usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u8AERunInterval"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u8AERunInterval) - 32usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::bPirisValid"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, bPirisValid) - 33usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::s32PirisPos"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, s32PirisPos) - 36usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32PirisGain"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32PirisGain) - 40usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::enFSWDRMode"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, enFSWDRMode) - 44usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::au32WDRGain"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, au32WDRGain) - 48usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32HmaxTimes) - 64usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::stStatAttr"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, stStatAttr) - 68usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::stUpdateInfo"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, stUpdateInfo) - 1104usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32ExpRatio"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32ExpRatio) - 1132usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::s16CurrentLV"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, s16CurrentLV) - 1136usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32AvgLuma"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32AvgLuma) - 1140usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u8MeterFramePeriod"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u8MeterFramePeriod) - 1144usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::bStable"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, bStable) - 1145usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::fBvStep"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, fBvStep) - 1148usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32BlcIso"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32BlcIso) - 1152usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32IspDgainSF"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32IspDgainSF) - 1156usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32AgainSF"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32AgainSF) - 1160usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32DgainSF"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32DgainSF) - 1164usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32IsoSF"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32IsoSF) - 1168usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::u32BlcIsoSF"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, u32BlcIsoSF) - 1172usize];
    ["Offset of field: _ISP_AE_STAT_RESULT_S::fEvRatio"]
        [::std::mem::offset_of!(_ISP_AE_STAT_RESULT_S, fEvRatio) - 1176usize];
};
pub type ISP_AE_RESULT_S = _ISP_AE_STAT_RESULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BE_AE_STAT_1_S {
    pub bStable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BE_AE_STAT_1_S"][::std::mem::size_of::<_ISP_BE_AE_STAT_1_S>() - 1usize];
    ["Alignment of _ISP_BE_AE_STAT_1_S"][::std::mem::align_of::<_ISP_BE_AE_STAT_1_S>() - 1usize];
    ["Offset of field: _ISP_BE_AE_STAT_1_S::bStable"]
        [::std::mem::offset_of!(_ISP_BE_AE_STAT_1_S, bStable) - 0usize];
};
pub type ISP_BE_AE_STAT_1_S = _ISP_BE_AE_STAT_1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BE_AE_STAT_2_S {
    pub bStable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BE_AE_STAT_2_S"][::std::mem::size_of::<_ISP_BE_AE_STAT_2_S>() - 1usize];
    ["Alignment of _ISP_BE_AE_STAT_2_S"][::std::mem::align_of::<_ISP_BE_AE_STAT_2_S>() - 1usize];
    ["Offset of field: _ISP_BE_AE_STAT_2_S::bStable"]
        [::std::mem::offset_of!(_ISP_BE_AE_STAT_2_S, bStable) - 0usize];
};
pub type ISP_BE_AE_STAT_2_S = _ISP_BE_AE_STAT_2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BE_AE_STAT_3_S {
    pub bStable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BE_AE_STAT_3_S"][::std::mem::size_of::<_ISP_BE_AE_STAT_3_S>() - 1usize];
    ["Alignment of _ISP_BE_AE_STAT_3_S"][::std::mem::align_of::<_ISP_BE_AE_STAT_3_S>() - 1usize];
    ["Offset of field: _ISP_BE_AE_STAT_3_S::bStable"]
        [::std::mem::offset_of!(_ISP_BE_AE_STAT_3_S, bStable) - 0usize];
};
pub type ISP_BE_AE_STAT_3_S = _ISP_BE_AE_STAT_3_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BE_AE_STITCH_STAT_3_S {
    pub bStable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BE_AE_STITCH_STAT_3_S"]
        [::std::mem::size_of::<_ISP_BE_AE_STITCH_STAT_3_S>() - 1usize];
    ["Alignment of _ISP_BE_AE_STITCH_STAT_3_S"]
        [::std::mem::align_of::<_ISP_BE_AE_STITCH_STAT_3_S>() - 1usize];
    ["Offset of field: _ISP_BE_AE_STITCH_STAT_3_S::bStable"]
        [::std::mem::offset_of!(_ISP_BE_AE_STITCH_STAT_3_S, bStable) - 0usize];
};
pub type ISP_BE_AE_STITCH_STAT_3_S = _ISP_BE_AE_STITCH_STAT_3_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_INFO_S {
    pub u32FrameCnt: CVI_U32,
    pub stSmartInfo: ISP_SMART_ROI_S,
    pub pstFEAeStat1: [*mut ISP_FE_AE_STAT_1_S; 1usize],
    pub pstFEAeStat2: [*mut ISP_FE_AE_STAT_2_S; 1usize],
    pub pstFEAeStat3: [*mut ISP_FE_AE_STAT_3_S; 1usize],
    pub pstFEAeStiStat: *mut ISP_FE_AE_STITCH_STAT_3_S,
    pub pstBEAeStat1: *mut ISP_BE_AE_STAT_1_S,
    pub pstBEAeStat2: *mut ISP_BE_AE_STAT_2_S,
    pub pstBEAeStat3: *mut ISP_BE_AE_STAT_3_S,
    pub pstBEAeStiStat: *mut ISP_BE_AE_STITCH_STAT_3_S,
    pub aeLEWinConfig: [ISP_3AWIN_CONFIG_S; 1usize],
    pub aeSEWinConfig: ISP_3AWIN_CONFIG_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_INFO_S"][::std::mem::size_of::<_ISP_AE_INFO_S>() - 128usize];
    ["Alignment of _ISP_AE_INFO_S"][::std::mem::align_of::<_ISP_AE_INFO_S>() - 8usize];
    ["Offset of field: _ISP_AE_INFO_S::u32FrameCnt"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, u32FrameCnt) - 0usize];
    ["Offset of field: _ISP_AE_INFO_S::stSmartInfo"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, stSmartInfo) - 4usize];
    ["Offset of field: _ISP_AE_INFO_S::pstFEAeStat1"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstFEAeStat1) - 40usize];
    ["Offset of field: _ISP_AE_INFO_S::pstFEAeStat2"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstFEAeStat2) - 48usize];
    ["Offset of field: _ISP_AE_INFO_S::pstFEAeStat3"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstFEAeStat3) - 56usize];
    ["Offset of field: _ISP_AE_INFO_S::pstFEAeStiStat"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstFEAeStiStat) - 64usize];
    ["Offset of field: _ISP_AE_INFO_S::pstBEAeStat1"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstBEAeStat1) - 72usize];
    ["Offset of field: _ISP_AE_INFO_S::pstBEAeStat2"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstBEAeStat2) - 80usize];
    ["Offset of field: _ISP_AE_INFO_S::pstBEAeStat3"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstBEAeStat3) - 88usize];
    ["Offset of field: _ISP_AE_INFO_S::pstBEAeStiStat"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, pstBEAeStiStat) - 96usize];
    ["Offset of field: _ISP_AE_INFO_S::aeLEWinConfig"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, aeLEWinConfig) - 104usize];
    ["Offset of field: _ISP_AE_INFO_S::aeSEWinConfig"]
        [::std::mem::offset_of!(_ISP_AE_INFO_S, aeSEWinConfig) - 114usize];
};
pub type ISP_AE_INFO_S = _ISP_AE_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bmISP_DCI_INFO_S {
    pub u32FrameCnt: CVI_U32,
    pub pStat: [CVI_U16; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of bmISP_DCI_INFO_S"][::std::mem::size_of::<bmISP_DCI_INFO_S>() - 516usize];
    ["Alignment of bmISP_DCI_INFO_S"][::std::mem::align_of::<bmISP_DCI_INFO_S>() - 4usize];
    ["Offset of field: bmISP_DCI_INFO_S::u32FrameCnt"]
        [::std::mem::offset_of!(bmISP_DCI_INFO_S, u32FrameCnt) - 0usize];
    ["Offset of field: bmISP_DCI_INFO_S::pStat"]
        [::std::mem::offset_of!(bmISP_DCI_INFO_S, pStat) - 4usize];
};
pub type ISP_DCI_INFO_S = bmISP_DCI_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_PARAM_S {
    pub SensorId: SENSOR_ID,
    pub u8WDRMode: CVI_U8,
    pub u8AWBZoneRow: CVI_U8,
    pub u8AWBZoneCol: CVI_U8,
    pub u8AWBZoneBin: CVI_U8,
    pub stStitchAttr: ISP_STITCH_ATTR_S,
    pub u16AWBWidth: CVI_U16,
    pub u16AWBHeight: CVI_U16,
    pub s8Rsv: CVI_S8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_PARAM_S"][::std::mem::size_of::<_ISP_AWB_PARAM_S>() - 16usize];
    ["Alignment of _ISP_AWB_PARAM_S"][::std::mem::align_of::<_ISP_AWB_PARAM_S>() - 4usize];
    ["Offset of field: _ISP_AWB_PARAM_S::SensorId"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, SensorId) - 0usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u8WDRMode"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u8WDRMode) - 4usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u8AWBZoneRow"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u8AWBZoneRow) - 5usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u8AWBZoneCol"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u8AWBZoneCol) - 6usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u8AWBZoneBin"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u8AWBZoneBin) - 7usize];
    ["Offset of field: _ISP_AWB_PARAM_S::stStitchAttr"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, stStitchAttr) - 8usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u16AWBWidth"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u16AWBWidth) - 10usize];
    ["Offset of field: _ISP_AWB_PARAM_S::u16AWBHeight"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, u16AWBHeight) - 12usize];
    ["Offset of field: _ISP_AWB_PARAM_S::s8Rsv"]
        [::std::mem::offset_of!(_ISP_AWB_PARAM_S, s8Rsv) - 14usize];
};
pub type ISP_AWB_PARAM_S = _ISP_AWB_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_RAW_STAT_ATTR_S {
    pub bStatCfgUpdate: bool,
    pub u16MeteringWhiteLevelAwb: CVI_U16,
    pub u16MeteringBlackLevelAwb: CVI_U16,
    pub u16MeteringCrRefMaxAwb: CVI_U16,
    pub u16MeteringCbRefMaxAwb: CVI_U16,
    pub u16MeteringCrRefMinAwb: CVI_U16,
    pub u16MeteringCbRefMinAwb: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_RAW_STAT_ATTR_S"]
        [::std::mem::size_of::<_ISP_AWB_RAW_STAT_ATTR_S>() - 14usize];
    ["Alignment of _ISP_AWB_RAW_STAT_ATTR_S"]
        [::std::mem::align_of::<_ISP_AWB_RAW_STAT_ATTR_S>() - 2usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::bStatCfgUpdate"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, bStatCfgUpdate) - 0usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringWhiteLevelAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringWhiteLevelAwb) - 2usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringBlackLevelAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringBlackLevelAwb) - 4usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringCrRefMaxAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringCrRefMaxAwb) - 6usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringCbRefMaxAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringCbRefMaxAwb) - 8usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringCrRefMinAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringCrRefMinAwb) - 10usize];
    ["Offset of field: _ISP_AWB_RAW_STAT_ATTR_S::u16MeteringCbRefMinAwb"]
        [::std::mem::offset_of!(_ISP_AWB_RAW_STAT_ATTR_S, u16MeteringCbRefMinAwb) - 12usize];
};
pub type ISP_AWB_RAW_STAT_ATTR_S = _ISP_AWB_RAW_STAT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_RESULT_S {
    pub au32WhiteBalanceGain: [CVI_U32; 4usize],
    pub au16ColorMatrix: [CVI_U16; 9usize],
    pub u32ColorTemp: CVI_U32,
    pub u8Saturation: [CVI_U8; 4usize],
    pub stRawStatAttr: ISP_AWB_RAW_STAT_ATTR_S,
    pub bStable: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_RESULT_S"][::std::mem::size_of::<_ISP_AWB_RESULT_S>() - 60usize];
    ["Alignment of _ISP_AWB_RESULT_S"][::std::mem::align_of::<_ISP_AWB_RESULT_S>() - 4usize];
    ["Offset of field: _ISP_AWB_RESULT_S::au32WhiteBalanceGain"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, au32WhiteBalanceGain) - 0usize];
    ["Offset of field: _ISP_AWB_RESULT_S::au16ColorMatrix"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, au16ColorMatrix) - 16usize];
    ["Offset of field: _ISP_AWB_RESULT_S::u32ColorTemp"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, u32ColorTemp) - 36usize];
    ["Offset of field: _ISP_AWB_RESULT_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, u8Saturation) - 40usize];
    ["Offset of field: _ISP_AWB_RESULT_S::stRawStatAttr"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, stRawStatAttr) - 44usize];
    ["Offset of field: _ISP_AWB_RESULT_S::bStable"]
        [::std::mem::offset_of!(_ISP_AWB_RESULT_S, bStable) - 58usize];
};
pub type ISP_AWB_RESULT_S = _ISP_AWB_RESULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_STAT_1_S {
    pub u16MeteringAwbAvgR: CVI_U16,
    pub u16MeteringAwbAvgG: CVI_U16,
    pub u16MeteringAwbAvgB: CVI_U16,
    pub u16MeteringAwbCountAll: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_STAT_1_S"][::std::mem::size_of::<_ISP_AWB_STAT_1_S>() - 8usize];
    ["Alignment of _ISP_AWB_STAT_1_S"][::std::mem::align_of::<_ISP_AWB_STAT_1_S>() - 2usize];
    ["Offset of field: _ISP_AWB_STAT_1_S::u16MeteringAwbAvgR"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_1_S, u16MeteringAwbAvgR) - 0usize];
    ["Offset of field: _ISP_AWB_STAT_1_S::u16MeteringAwbAvgG"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_1_S, u16MeteringAwbAvgG) - 2usize];
    ["Offset of field: _ISP_AWB_STAT_1_S::u16MeteringAwbAvgB"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_1_S, u16MeteringAwbAvgB) - 4usize];
    ["Offset of field: _ISP_AWB_STAT_1_S::u16MeteringAwbCountAll"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_1_S, u16MeteringAwbCountAll) - 6usize];
};
pub type ISP_AWB_STAT_1_S = _ISP_AWB_STAT_1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_STAT_RESULT_S {
    pub pau16ZoneAvgR: *mut CVI_U16,
    pub pau16ZoneAvgG: *mut CVI_U16,
    pub pau16ZoneAvgB: *mut CVI_U16,
    pub pau16ZoneCount: *mut CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_STAT_RESULT_S"][::std::mem::size_of::<_ISP_AWB_STAT_RESULT_S>() - 32usize];
    ["Alignment of _ISP_AWB_STAT_RESULT_S"]
        [::std::mem::align_of::<_ISP_AWB_STAT_RESULT_S>() - 8usize];
    ["Offset of field: _ISP_AWB_STAT_RESULT_S::pau16ZoneAvgR"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_RESULT_S, pau16ZoneAvgR) - 0usize];
    ["Offset of field: _ISP_AWB_STAT_RESULT_S::pau16ZoneAvgG"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_RESULT_S, pau16ZoneAvgG) - 8usize];
    ["Offset of field: _ISP_AWB_STAT_RESULT_S::pau16ZoneAvgB"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_RESULT_S, pau16ZoneAvgB) - 16usize];
    ["Offset of field: _ISP_AWB_STAT_RESULT_S::pau16ZoneCount"]
        [::std::mem::offset_of!(_ISP_AWB_STAT_RESULT_S, pau16ZoneCount) - 24usize];
};
pub type ISP_AWB_STAT_RESULT_S = _ISP_AWB_STAT_RESULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_INFO_S {
    pub u32FrameCnt: CVI_U32,
    pub stSmartInfo: ISP_SMART_ROI_S,
    pub pstAwbStat1: [*mut ISP_AWB_STAT_1_S; 2usize],
    pub stAwbStat2: [ISP_AWB_STAT_RESULT_S; 2usize],
    pub u8AwbGainSwitch: CVI_U8,
    pub au32WDRWBGain: [CVI_U32; 4usize],
    pub u32IsoNum: CVI_U32,
    pub s16LVx100: CVI_S16,
    pub fBVstep: CVI_FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_INFO_S"][::std::mem::size_of::<_ISP_AWB_INFO_S>() - 152usize];
    ["Alignment of _ISP_AWB_INFO_S"][::std::mem::align_of::<_ISP_AWB_INFO_S>() - 8usize];
    ["Offset of field: _ISP_AWB_INFO_S::u32FrameCnt"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, u32FrameCnt) - 0usize];
    ["Offset of field: _ISP_AWB_INFO_S::stSmartInfo"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, stSmartInfo) - 4usize];
    ["Offset of field: _ISP_AWB_INFO_S::pstAwbStat1"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, pstAwbStat1) - 40usize];
    ["Offset of field: _ISP_AWB_INFO_S::stAwbStat2"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, stAwbStat2) - 56usize];
    ["Offset of field: _ISP_AWB_INFO_S::u8AwbGainSwitch"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, u8AwbGainSwitch) - 120usize];
    ["Offset of field: _ISP_AWB_INFO_S::au32WDRWBGain"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, au32WDRWBGain) - 124usize];
    ["Offset of field: _ISP_AWB_INFO_S::u32IsoNum"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, u32IsoNum) - 140usize];
    ["Offset of field: _ISP_AWB_INFO_S::s16LVx100"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, s16LVx100) - 144usize];
    ["Offset of field: _ISP_AWB_INFO_S::fBVstep"]
        [::std::mem::offset_of!(_ISP_AWB_INFO_S, fBVstep) - 148usize];
};
pub type ISP_AWB_INFO_S = _ISP_AWB_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_PARAM_S {
    pub SensorId: SENSOR_ID,
    pub u8WDRMode: CVI_U8,
    pub s32Rsv: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_PARAM_S"][::std::mem::size_of::<_ISP_AF_PARAM_S>() - 12usize];
    ["Alignment of _ISP_AF_PARAM_S"][::std::mem::align_of::<_ISP_AF_PARAM_S>() - 4usize];
    ["Offset of field: _ISP_AF_PARAM_S::SensorId"]
        [::std::mem::offset_of!(_ISP_AF_PARAM_S, SensorId) - 0usize];
    ["Offset of field: _ISP_AF_PARAM_S::u8WDRMode"]
        [::std::mem::offset_of!(_ISP_AF_PARAM_S, u8WDRMode) - 4usize];
    ["Offset of field: _ISP_AF_PARAM_S::s32Rsv"]
        [::std::mem::offset_of!(_ISP_AF_PARAM_S, s32Rsv) - 8usize];
};
pub type ISP_AF_PARAM_S = _ISP_AF_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_INFO_S {
    pub u32FrameCnt: CVI_U32,
    pub pstAfStat: *mut ISP_AF_STATISTICS_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_INFO_S"][::std::mem::size_of::<_ISP_AF_INFO_S>() - 16usize];
    ["Alignment of _ISP_AF_INFO_S"][::std::mem::align_of::<_ISP_AF_INFO_S>() - 8usize];
    ["Offset of field: _ISP_AF_INFO_S::u32FrameCnt"]
        [::std::mem::offset_of!(_ISP_AF_INFO_S, u32FrameCnt) - 0usize];
    ["Offset of field: _ISP_AF_INFO_S::pstAfStat"]
        [::std::mem::offset_of!(_ISP_AF_INFO_S, pstAfStat) - 8usize];
};
pub type ISP_AF_INFO_S = _ISP_AF_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_RESULT_S {
    pub s32Rsv: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_RESULT_S"][::std::mem::size_of::<_ISP_AF_RESULT_S>() - 4usize];
    ["Alignment of _ISP_AF_RESULT_S"][::std::mem::align_of::<_ISP_AF_RESULT_S>() - 4usize];
    ["Offset of field: _ISP_AF_RESULT_S::s32Rsv"]
        [::std::mem::offset_of!(_ISP_AF_RESULT_S, s32Rsv) - 0usize];
};
pub type ISP_AF_RESULT_S = _ISP_AF_RESULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_STITCH_STATISTICS_S {
    pub enable: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_STITCH_STATISTICS_S"]
        [::std::mem::size_of::<_ISP_AE_STITCH_STATISTICS_S>() - 4usize];
    ["Alignment of _ISP_AE_STITCH_STATISTICS_S"]
        [::std::mem::align_of::<_ISP_AE_STITCH_STATISTICS_S>() - 4usize];
    ["Offset of field: _ISP_AE_STITCH_STATISTICS_S::enable"]
        [::std::mem::offset_of!(_ISP_AE_STITCH_STATISTICS_S, enable) - 0usize];
};
pub type ISP_AE_STITCH_STATISTICS_S = _ISP_AE_STITCH_STATISTICS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_BIND_ATTR_S {
    pub sensorId: SENSOR_ID,
    pub stAeLib: ALG_LIB_S,
    pub stAfLib: ALG_LIB_S,
    pub stAwbLib: ALG_LIB_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_BIND_ATTR_S"][::std::mem::size_of::<_ISP_BIND_ATTR_S>() - 76usize];
    ["Alignment of _ISP_BIND_ATTR_S"][::std::mem::align_of::<_ISP_BIND_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_BIND_ATTR_S::sensorId"]
        [::std::mem::offset_of!(_ISP_BIND_ATTR_S, sensorId) - 0usize];
    ["Offset of field: _ISP_BIND_ATTR_S::stAeLib"]
        [::std::mem::offset_of!(_ISP_BIND_ATTR_S, stAeLib) - 4usize];
    ["Offset of field: _ISP_BIND_ATTR_S::stAfLib"]
        [::std::mem::offset_of!(_ISP_BIND_ATTR_S, stAfLib) - 28usize];
    ["Offset of field: _ISP_BIND_ATTR_S::stAwbLib"]
        [::std::mem::offset_of!(_ISP_BIND_ATTR_S, stAwbLib) - 52usize];
};
pub type ISP_BIND_ATTR_S = _ISP_BIND_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_EXP_FUNC_S {
    pub pfn_ae_init: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstAeParam: *const ISP_AE_PARAM_S) -> CVI_S32,
    >,
    pub pfn_ae_run: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pstAeInfo: *const ISP_AE_INFO_S,
            pstAeResult: *mut ISP_AE_RESULT_S,
            s32Rsv: CVI_S32,
        ) -> CVI_S32,
    >,
    pub pfn_ae_ctrl: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            u32Cmd: CVI_U32,
            pValue: *mut ::std::os::raw::c_void,
        ) -> CVI_S32,
    >,
    pub pfn_ae_exit: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE) -> CVI_S32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_EXP_FUNC_S"][::std::mem::size_of::<_ISP_AE_EXP_FUNC_S>() - 32usize];
    ["Alignment of _ISP_AE_EXP_FUNC_S"][::std::mem::align_of::<_ISP_AE_EXP_FUNC_S>() - 8usize];
    ["Offset of field: _ISP_AE_EXP_FUNC_S::pfn_ae_init"]
        [::std::mem::offset_of!(_ISP_AE_EXP_FUNC_S, pfn_ae_init) - 0usize];
    ["Offset of field: _ISP_AE_EXP_FUNC_S::pfn_ae_run"]
        [::std::mem::offset_of!(_ISP_AE_EXP_FUNC_S, pfn_ae_run) - 8usize];
    ["Offset of field: _ISP_AE_EXP_FUNC_S::pfn_ae_ctrl"]
        [::std::mem::offset_of!(_ISP_AE_EXP_FUNC_S, pfn_ae_ctrl) - 16usize];
    ["Offset of field: _ISP_AE_EXP_FUNC_S::pfn_ae_exit"]
        [::std::mem::offset_of!(_ISP_AE_EXP_FUNC_S, pfn_ae_exit) - 24usize];
};
pub type ISP_AE_EXP_FUNC_S = _ISP_AE_EXP_FUNC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_EXP_FUNC_S {
    pub pfn_awb_init: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstAwbParam: *const ISP_AWB_PARAM_S) -> CVI_S32,
    >,
    pub pfn_awb_run: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pstAwbInfo: *const ISP_AWB_INFO_S,
            pstAwbResult: *mut ISP_AWB_RESULT_S,
            s32Rsv: CVI_S32,
        ) -> CVI_S32,
    >,
    pub pfn_awb_ctrl: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, u32Cmd: CVI_U32, pValue: *mut CVI_VOID) -> CVI_S32,
    >,
    pub pfn_awb_exit: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE) -> CVI_S32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_EXP_FUNC_S"][::std::mem::size_of::<_ISP_AWB_EXP_FUNC_S>() - 32usize];
    ["Alignment of _ISP_AWB_EXP_FUNC_S"][::std::mem::align_of::<_ISP_AWB_EXP_FUNC_S>() - 8usize];
    ["Offset of field: _ISP_AWB_EXP_FUNC_S::pfn_awb_init"]
        [::std::mem::offset_of!(_ISP_AWB_EXP_FUNC_S, pfn_awb_init) - 0usize];
    ["Offset of field: _ISP_AWB_EXP_FUNC_S::pfn_awb_run"]
        [::std::mem::offset_of!(_ISP_AWB_EXP_FUNC_S, pfn_awb_run) - 8usize];
    ["Offset of field: _ISP_AWB_EXP_FUNC_S::pfn_awb_ctrl"]
        [::std::mem::offset_of!(_ISP_AWB_EXP_FUNC_S, pfn_awb_ctrl) - 16usize];
    ["Offset of field: _ISP_AWB_EXP_FUNC_S::pfn_awb_exit"]
        [::std::mem::offset_of!(_ISP_AWB_EXP_FUNC_S, pfn_awb_exit) - 24usize];
};
pub type ISP_AWB_EXP_FUNC_S = _ISP_AWB_EXP_FUNC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_EXP_FUNC_S {
    pub pfn_af_init: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstAfParam: *const ISP_AF_PARAM_S) -> CVI_S32,
    >,
    pub pfn_af_run: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pstAfInfo: *const ISP_AF_INFO_S,
            pstAfResult: *mut ISP_AF_RESULT_S,
            s32Rsv: CVI_S32,
        ) -> CVI_S32,
    >,
    pub pfn_af_ctrl: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, u32Cmd: CVI_U32, pValue: *mut CVI_VOID) -> CVI_S32,
    >,
    pub pfn_af_exit: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE) -> CVI_S32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_EXP_FUNC_S"][::std::mem::size_of::<_ISP_AF_EXP_FUNC_S>() - 32usize];
    ["Alignment of _ISP_AF_EXP_FUNC_S"][::std::mem::align_of::<_ISP_AF_EXP_FUNC_S>() - 8usize];
    ["Offset of field: _ISP_AF_EXP_FUNC_S::pfn_af_init"]
        [::std::mem::offset_of!(_ISP_AF_EXP_FUNC_S, pfn_af_init) - 0usize];
    ["Offset of field: _ISP_AF_EXP_FUNC_S::pfn_af_run"]
        [::std::mem::offset_of!(_ISP_AF_EXP_FUNC_S, pfn_af_run) - 8usize];
    ["Offset of field: _ISP_AF_EXP_FUNC_S::pfn_af_ctrl"]
        [::std::mem::offset_of!(_ISP_AF_EXP_FUNC_S, pfn_af_ctrl) - 16usize];
    ["Offset of field: _ISP_AF_EXP_FUNC_S::pfn_af_exit"]
        [::std::mem::offset_of!(_ISP_AF_EXP_FUNC_S, pfn_af_exit) - 24usize];
};
pub type ISP_AF_EXP_FUNC_S = _ISP_AF_EXP_FUNC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AE_REGISTER_S {
    pub stAeExpFunc: ISP_AE_EXP_FUNC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AE_REGISTER_S"][::std::mem::size_of::<_ISP_AE_REGISTER_S>() - 32usize];
    ["Alignment of _ISP_AE_REGISTER_S"][::std::mem::align_of::<_ISP_AE_REGISTER_S>() - 8usize];
    ["Offset of field: _ISP_AE_REGISTER_S::stAeExpFunc"]
        [::std::mem::offset_of!(_ISP_AE_REGISTER_S, stAeExpFunc) - 0usize];
};
pub type ISP_AE_REGISTER_S = _ISP_AE_REGISTER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AWB_REGISTER_S {
    pub stAwbExpFunc: ISP_AWB_EXP_FUNC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AWB_REGISTER_S"][::std::mem::size_of::<_ISP_AWB_REGISTER_S>() - 32usize];
    ["Alignment of _ISP_AWB_REGISTER_S"][::std::mem::align_of::<_ISP_AWB_REGISTER_S>() - 8usize];
    ["Offset of field: _ISP_AWB_REGISTER_S::stAwbExpFunc"]
        [::std::mem::offset_of!(_ISP_AWB_REGISTER_S, stAwbExpFunc) - 0usize];
};
pub type ISP_AWB_REGISTER_S = _ISP_AWB_REGISTER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_AF_REGISTER_S {
    pub stAfExpFunc: ISP_AF_EXP_FUNC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_AF_REGISTER_S"][::std::mem::size_of::<_ISP_AF_REGISTER_S>() - 32usize];
    ["Alignment of _ISP_AF_REGISTER_S"][::std::mem::align_of::<_ISP_AF_REGISTER_S>() - 8usize];
    ["Offset of field: _ISP_AF_REGISTER_S::stAfExpFunc"]
        [::std::mem::offset_of!(_ISP_AF_REGISTER_S, stAfExpFunc) - 0usize];
};
pub type ISP_AF_REGISTER_S = _ISP_AF_REGISTER_S;
pub const _ISP_CTRL_CMD_E_ISP_WDR_MODE_SET: _ISP_CTRL_CMD_E = 0;
pub const _ISP_CTRL_CMD_E_ISP_CTRL_CMD_BUTT_MAX: _ISP_CTRL_CMD_E = 1;
pub type _ISP_CTRL_CMD_E = ::std::os::raw::c_uint;
pub use self::_ISP_CTRL_CMD_E as ISP_CTRL_CMD_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AWB_DBG_S {
    pub u32Date: CVI_U32,
    pub u16AlgoVer: CVI_U16,
    pub u16DbgVer: CVI_U16,
    pub u16MaxFrameNum: CVI_U16,
    pub u16SensorId: CVI_U16,
    pub u32BinSize: CVI_U32,
    pub u16WinWnum: CVI_U16,
    pub u16WinHnum: CVI_U16,
    pub u16WinOffX: CVI_U16,
    pub u16WinOffY: CVI_U16,
    pub u16WinWsize: CVI_U16,
    pub u16WinHsize: CVI_U16,
    pub u16P_R: [[CVI_U16; 2048usize]; 2usize],
    pub u16P_G: [[CVI_U16; 2048usize]; 2usize],
    pub u16P_B: [[CVI_U16; 2048usize]; 2usize],
    pub u16P_type: [[CVI_U16; 2048usize]; 2usize],
    pub u16GrayCnt: CVI_U16,
    pub u16BalanceR: CVI_U16,
    pub u16BalanceB: CVI_U16,
    pub u16FinalR: CVI_U16,
    pub u16FinalB: CVI_U16,
    pub u16CurrentR: CVI_U16,
    pub u16CurrentB: CVI_U16,
    pub u16IdealR: CVI_U16,
    pub u16IdealB: CVI_U16,
    pub CalibRgain: [CVI_U16; 3usize],
    pub CalibBgain: [CVI_U16; 3usize],
    pub CalibTemp: [CVI_U16; 3usize],
    pub u16CurveR: [CVI_U16; 256usize],
    pub u16CurveB: [CVI_U16; 256usize],
    pub u16CurveB_Top: [CVI_U16; 256usize],
    pub u16CurveB_Bot: [CVI_U16; 256usize],
    pub s16LvX100: CVI_S16,
    pub u32ISONum: CVI_U32,
    pub dbgMPIAttr: [ISP_WB_ATTR_S; 2usize],
    pub dbgInfoAttr: [ISP_WB_ATTR_S; 2usize],
    pub dbgMPIAttrEx: [ISP_AWB_ATTR_EX_S; 2usize],
    pub dbgInfoAttrEx: [ISP_AWB_ATTR_EX_S; 2usize],
    pub calib_sts: CVI_U8,
    pub calib_ex: ISP_AWB_Calibration_Gain_S_EX,
    pub stFace: ISP_SMART_ROI_S,
    pub u16Region_R: [CVI_U16; 4usize],
    pub u8Reserve: [CVI_U8; 120usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AWB_DBG_S"][::std::mem::size_of::<_AWB_DBG_S>() - 42368usize];
    ["Alignment of _AWB_DBG_S"][::std::mem::align_of::<_AWB_DBG_S>() - 4usize];
    ["Offset of field: _AWB_DBG_S::u32Date"][::std::mem::offset_of!(_AWB_DBG_S, u32Date) - 0usize];
    ["Offset of field: _AWB_DBG_S::u16AlgoVer"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16AlgoVer) - 4usize];
    ["Offset of field: _AWB_DBG_S::u16DbgVer"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16DbgVer) - 6usize];
    ["Offset of field: _AWB_DBG_S::u16MaxFrameNum"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16MaxFrameNum) - 8usize];
    ["Offset of field: _AWB_DBG_S::u16SensorId"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16SensorId) - 10usize];
    ["Offset of field: _AWB_DBG_S::u32BinSize"]
        [::std::mem::offset_of!(_AWB_DBG_S, u32BinSize) - 12usize];
    ["Offset of field: _AWB_DBG_S::u16WinWnum"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinWnum) - 16usize];
    ["Offset of field: _AWB_DBG_S::u16WinHnum"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinHnum) - 18usize];
    ["Offset of field: _AWB_DBG_S::u16WinOffX"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinOffX) - 20usize];
    ["Offset of field: _AWB_DBG_S::u16WinOffY"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinOffY) - 22usize];
    ["Offset of field: _AWB_DBG_S::u16WinWsize"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinWsize) - 24usize];
    ["Offset of field: _AWB_DBG_S::u16WinHsize"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16WinHsize) - 26usize];
    ["Offset of field: _AWB_DBG_S::u16P_R"][::std::mem::offset_of!(_AWB_DBG_S, u16P_R) - 28usize];
    ["Offset of field: _AWB_DBG_S::u16P_G"][::std::mem::offset_of!(_AWB_DBG_S, u16P_G) - 8220usize];
    ["Offset of field: _AWB_DBG_S::u16P_B"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16P_B) - 16412usize];
    ["Offset of field: _AWB_DBG_S::u16P_type"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16P_type) - 24604usize];
    ["Offset of field: _AWB_DBG_S::u16GrayCnt"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16GrayCnt) - 32796usize];
    ["Offset of field: _AWB_DBG_S::u16BalanceR"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16BalanceR) - 32798usize];
    ["Offset of field: _AWB_DBG_S::u16BalanceB"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16BalanceB) - 32800usize];
    ["Offset of field: _AWB_DBG_S::u16FinalR"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16FinalR) - 32802usize];
    ["Offset of field: _AWB_DBG_S::u16FinalB"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16FinalB) - 32804usize];
    ["Offset of field: _AWB_DBG_S::u16CurrentR"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurrentR) - 32806usize];
    ["Offset of field: _AWB_DBG_S::u16CurrentB"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurrentB) - 32808usize];
    ["Offset of field: _AWB_DBG_S::u16IdealR"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16IdealR) - 32810usize];
    ["Offset of field: _AWB_DBG_S::u16IdealB"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16IdealB) - 32812usize];
    ["Offset of field: _AWB_DBG_S::CalibRgain"]
        [::std::mem::offset_of!(_AWB_DBG_S, CalibRgain) - 32814usize];
    ["Offset of field: _AWB_DBG_S::CalibBgain"]
        [::std::mem::offset_of!(_AWB_DBG_S, CalibBgain) - 32820usize];
    ["Offset of field: _AWB_DBG_S::CalibTemp"]
        [::std::mem::offset_of!(_AWB_DBG_S, CalibTemp) - 32826usize];
    ["Offset of field: _AWB_DBG_S::u16CurveR"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurveR) - 32832usize];
    ["Offset of field: _AWB_DBG_S::u16CurveB"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurveB) - 33344usize];
    ["Offset of field: _AWB_DBG_S::u16CurveB_Top"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurveB_Top) - 33856usize];
    ["Offset of field: _AWB_DBG_S::u16CurveB_Bot"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16CurveB_Bot) - 34368usize];
    ["Offset of field: _AWB_DBG_S::s16LvX100"]
        [::std::mem::offset_of!(_AWB_DBG_S, s16LvX100) - 34880usize];
    ["Offset of field: _AWB_DBG_S::u32ISONum"]
        [::std::mem::offset_of!(_AWB_DBG_S, u32ISONum) - 34884usize];
    ["Offset of field: _AWB_DBG_S::dbgMPIAttr"]
        [::std::mem::offset_of!(_AWB_DBG_S, dbgMPIAttr) - 34888usize];
    ["Offset of field: _AWB_DBG_S::dbgInfoAttr"]
        [::std::mem::offset_of!(_AWB_DBG_S, dbgInfoAttr) - 37488usize];
    ["Offset of field: _AWB_DBG_S::dbgMPIAttrEx"]
        [::std::mem::offset_of!(_AWB_DBG_S, dbgMPIAttrEx) - 40088usize];
    ["Offset of field: _AWB_DBG_S::dbgInfoAttrEx"]
        [::std::mem::offset_of!(_AWB_DBG_S, dbgInfoAttrEx) - 41112usize];
    ["Offset of field: _AWB_DBG_S::calib_sts"]
        [::std::mem::offset_of!(_AWB_DBG_S, calib_sts) - 42136usize];
    ["Offset of field: _AWB_DBG_S::calib_ex"]
        [::std::mem::offset_of!(_AWB_DBG_S, calib_ex) - 42138usize];
    ["Offset of field: _AWB_DBG_S::stFace"]
        [::std::mem::offset_of!(_AWB_DBG_S, stFace) - 42208usize];
    ["Offset of field: _AWB_DBG_S::u16Region_R"]
        [::std::mem::offset_of!(_AWB_DBG_S, u16Region_R) - 42240usize];
    ["Offset of field: _AWB_DBG_S::u8Reserve"]
        [::std::mem::offset_of!(_AWB_DBG_S, u8Reserve) - 42248usize];
};
pub type s_AWB_DBG_S = _AWB_DBG_S;
pub const _AE_ACCURACY_E_AE_ACCURACY_DB: _AE_ACCURACY_E = 0;
pub const _AE_ACCURACY_E_AE_ACCURACY_LINEAR: _AE_ACCURACY_E = 1;
pub const _AE_ACCURACY_E_AE_ACCURACY_TABLE: _AE_ACCURACY_E = 2;
pub const _AE_ACCURACY_E_AE_ACCURACY_BUTT: _AE_ACCURACY_E = 3;
pub type _AE_ACCURACY_E = ::std::os::raw::c_uint;
pub use self::_AE_ACCURACY_E as AE_ACCURACY_E;
pub const _AE_BLC_TYPE_E_AE_BLC_TYPE_LINEAR: _AE_BLC_TYPE_E = 0;
pub const _AE_BLC_TYPE_E_AE_BLC_TYPE_LADDER: _AE_BLC_TYPE_E = 1;
pub const _AE_BLC_TYPE_E_AE_BLC_TYPE_BUTT: _AE_BLC_TYPE_E = 2;
pub type _AE_BLC_TYPE_E = ::std::os::raw::c_uint;
pub use self::_AE_BLC_TYPE_E as AE_BLC_TYPE_E;
pub const _ISP_SNS_GAIN_MODE_E_SNS_GAIN_MODE_SHARE: _ISP_SNS_GAIN_MODE_E = 0;
pub const _ISP_SNS_GAIN_MODE_E_SNS_GAIN_MODE_WDR_2F: _ISP_SNS_GAIN_MODE_E = 1;
pub const _ISP_SNS_GAIN_MODE_E_SNS_GAIN_MODE_WDR_3F: _ISP_SNS_GAIN_MODE_E = 2;
pub const _ISP_SNS_GAIN_MODE_E_SNS_GAIN_MODE_ONLY_LEF: _ISP_SNS_GAIN_MODE_E = 3;
pub type _ISP_SNS_GAIN_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_SNS_GAIN_MODE_E as ISP_SNS_GAIN_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AE_ACCURACY_S {
    pub enAccuType: AE_ACCURACY_E,
    pub f32Accuracy: f32,
    pub f32Offset: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AE_ACCURACY_S"][::std::mem::size_of::<_AE_ACCURACY_S>() - 12usize];
    ["Alignment of _AE_ACCURACY_S"][::std::mem::align_of::<_AE_ACCURACY_S>() - 4usize];
    ["Offset of field: _AE_ACCURACY_S::enAccuType"]
        [::std::mem::offset_of!(_AE_ACCURACY_S, enAccuType) - 0usize];
    ["Offset of field: _AE_ACCURACY_S::f32Accuracy"]
        [::std::mem::offset_of!(_AE_ACCURACY_S, f32Accuracy) - 4usize];
    ["Offset of field: _AE_ACCURACY_S::f32Offset"]
        [::std::mem::offset_of!(_AE_ACCURACY_S, f32Offset) - 8usize];
};
pub type AE_ACCURACY_S = _AE_ACCURACY_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AE_SENSOR_DEFAULT_S {
    pub au8HistThresh: [CVI_U8; 4usize],
    pub u8AeCompensation: CVI_U8,
    pub u32LinesPer500ms: CVI_U32,
    pub u32FlickerFreq: CVI_U32,
    pub u32HmaxTimes: CVI_U32,
    pub u32InitExposure: CVI_U32,
    pub u32InitAESpeed: CVI_U32,
    pub u32InitAETolerance: CVI_U32,
    pub u32FullLinesStd: CVI_U32,
    pub u32FullLinesMax: CVI_U32,
    pub u32FullLines: CVI_U32,
    pub u32MaxIntTime: CVI_U32,
    pub u32MinIntTime: CVI_U32,
    pub u32MaxIntTimeTarget: CVI_U32,
    pub u32MinIntTimeTarget: CVI_U32,
    pub stIntTimeAccu: AE_ACCURACY_S,
    pub u32MaxAgain: CVI_U32,
    pub u32MinAgain: CVI_U32,
    pub u32MaxAgainTarget: CVI_U32,
    pub u32MinAgainTarget: CVI_U32,
    pub stAgainAccu: AE_ACCURACY_S,
    pub u32MaxDgain: CVI_U32,
    pub u32MinDgain: CVI_U32,
    pub u32MaxDgainTarget: CVI_U32,
    pub u32MinDgainTarget: CVI_U32,
    pub stDgainAccu: AE_ACCURACY_S,
    pub u32MaxISPDgainTarget: CVI_U32,
    pub u32MinISPDgainTarget: CVI_U32,
    pub u32ISPDgainShift: CVI_U32,
    pub u32MaxIntTimeStep: CVI_U32,
    pub u32LFMaxShortTime: CVI_U32,
    pub u32LFMinExposure: CVI_U32,
    pub enAeExpMode: ISP_AE_STRATEGY_E,
    pub u16ISOCalCoef: CVI_U16,
    pub u8AERunInterval: CVI_U8,
    pub f32Fps: CVI_FLOAT,
    pub f32MinFps: CVI_FLOAT,
    pub denom: CVI_U32,
    pub u32AEResponseFrame: CVI_U32,
    pub u32SnsStableFrame: CVI_U32,
    pub enBlcType: AE_BLC_TYPE_E,
    pub enWDRGainMode: ISP_SNS_GAIN_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AE_SENSOR_DEFAULT_S"][::std::mem::size_of::<_AE_SENSOR_DEFAULT_S>() - 188usize];
    ["Alignment of _AE_SENSOR_DEFAULT_S"][::std::mem::align_of::<_AE_SENSOR_DEFAULT_S>() - 4usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::au8HistThresh"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, au8HistThresh) - 0usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u8AeCompensation"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u8AeCompensation) - 4usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32LinesPer500ms"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32LinesPer500ms) - 8usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32FlickerFreq"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32FlickerFreq) - 12usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32HmaxTimes) - 16usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32InitExposure"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32InitExposure) - 20usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32InitAESpeed"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32InitAESpeed) - 24usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32InitAETolerance"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32InitAETolerance) - 28usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32FullLinesStd"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32FullLinesStd) - 32usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32FullLinesMax"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32FullLinesMax) - 36usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32FullLines"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32FullLines) - 40usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxIntTime"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxIntTime) - 44usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinIntTime"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinIntTime) - 48usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxIntTimeTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxIntTimeTarget) - 52usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinIntTimeTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinIntTimeTarget) - 56usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::stIntTimeAccu"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, stIntTimeAccu) - 60usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxAgain"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxAgain) - 72usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinAgain"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinAgain) - 76usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxAgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxAgainTarget) - 80usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinAgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinAgainTarget) - 84usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::stAgainAccu"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, stAgainAccu) - 88usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxDgain"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxDgain) - 100usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinDgain"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinDgain) - 104usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxDgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxDgainTarget) - 108usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinDgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinDgainTarget) - 112usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::stDgainAccu"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, stDgainAccu) - 116usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxISPDgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxISPDgainTarget) - 128usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MinISPDgainTarget"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MinISPDgainTarget) - 132usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32ISPDgainShift"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32ISPDgainShift) - 136usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32MaxIntTimeStep"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32MaxIntTimeStep) - 140usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32LFMaxShortTime"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32LFMaxShortTime) - 144usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32LFMinExposure"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32LFMinExposure) - 148usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::enAeExpMode"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, enAeExpMode) - 152usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u16ISOCalCoef"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u16ISOCalCoef) - 156usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u8AERunInterval"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u8AERunInterval) - 158usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::f32Fps"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, f32Fps) - 160usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::f32MinFps"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, f32MinFps) - 164usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::denom"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, denom) - 168usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32AEResponseFrame"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32AEResponseFrame) - 172usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::u32SnsStableFrame"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, u32SnsStableFrame) - 176usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::enBlcType"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, enBlcType) - 180usize];
    ["Offset of field: _AE_SENSOR_DEFAULT_S::enWDRGainMode"]
        [::std::mem::offset_of!(_AE_SENSOR_DEFAULT_S, enWDRGainMode) - 184usize];
};
pub type AE_SENSOR_DEFAULT_S = _AE_SENSOR_DEFAULT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AE_FSWDR_ATTR_S {
    pub enFSWDRMode: ISP_FSWDR_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AE_FSWDR_ATTR_S"][::std::mem::size_of::<_AE_FSWDR_ATTR_S>() - 4usize];
    ["Alignment of _AE_FSWDR_ATTR_S"][::std::mem::align_of::<_AE_FSWDR_ATTR_S>() - 4usize];
    ["Offset of field: _AE_FSWDR_ATTR_S::enFSWDRMode"]
        [::std::mem::offset_of!(_AE_FSWDR_ATTR_S, enFSWDRMode) - 0usize];
};
pub type AE_FSWDR_ATTR_S = _AE_FSWDR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AE_SENSOR_EXP_FUNC_S {
    pub pfn_cmos_get_ae_default: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstAeSnsDft: *mut AE_SENSOR_DEFAULT_S) -> CVI_S32,
    >,
    pub pfn_cmos_fps_set: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            f32Fps: CVI_FLOAT,
            pstAeSnsDft: *mut AE_SENSOR_DEFAULT_S,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_slow_framerate_set: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            u32FullLines: CVI_U32,
            pstAeSnsDft: *mut AE_SENSOR_DEFAULT_S,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_inttime_update: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, u32IntTime: *mut CVI_U32) -> CVI_S32,
    >,
    pub pfn_cmos_gains_update: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            u32Again: *mut CVI_U32,
            u32Dgain: *mut CVI_U32,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_again_calc_table: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pu32AgainLin: *mut CVI_U32,
            pu32AgainDb: *mut CVI_U32,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_dgain_calc_table: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            pu32DgainLin: *mut CVI_U32,
            pu32DgainDb: *mut CVI_U32,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_get_inttime_max: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            u16ManRatioEnable: CVI_U16,
            au32Ratio: *mut CVI_U32,
            au32IntTimeMax: *mut CVI_U32,
            au32IntTimeMin: *mut CVI_U32,
            pu32LFMaxIntTime: *mut CVI_U32,
        ) -> CVI_S32,
    >,
    pub pfn_cmos_ae_fswdr_attr_set: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, pstAeFSWDRAttr: *mut AE_FSWDR_ATTR_S) -> CVI_S32,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AE_SENSOR_EXP_FUNC_S"][::std::mem::size_of::<_AE_SENSOR_EXP_FUNC_S>() - 72usize];
    ["Alignment of _AE_SENSOR_EXP_FUNC_S"]
        [::std::mem::align_of::<_AE_SENSOR_EXP_FUNC_S>() - 8usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_get_ae_default"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_get_ae_default) - 0usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_fps_set"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_fps_set) - 8usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_slow_framerate_set"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_slow_framerate_set) - 16usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_inttime_update"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_inttime_update) - 24usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_gains_update"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_gains_update) - 32usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_again_calc_table"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_again_calc_table) - 40usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_dgain_calc_table"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_dgain_calc_table) - 48usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_get_inttime_max"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_get_inttime_max) - 56usize];
    ["Offset of field: _AE_SENSOR_EXP_FUNC_S::pfn_cmos_ae_fswdr_attr_set"]
        [::std::mem::offset_of!(_AE_SENSOR_EXP_FUNC_S, pfn_cmos_ae_fswdr_attr_set) - 64usize];
};
pub type AE_SENSOR_EXP_FUNC_S = _AE_SENSOR_EXP_FUNC_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AE_SENSOR_REGISTER_S {
    pub stAeExp: AE_SENSOR_EXP_FUNC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AE_SENSOR_REGISTER_S"][::std::mem::size_of::<_AE_SENSOR_REGISTER_S>() - 72usize];
    ["Alignment of _AE_SENSOR_REGISTER_S"]
        [::std::mem::align_of::<_AE_SENSOR_REGISTER_S>() - 8usize];
    ["Offset of field: _AE_SENSOR_REGISTER_S::stAeExp"]
        [::std::mem::offset_of!(_AE_SENSOR_REGISTER_S, stAeExp) - 0usize];
};
pub type AE_SENSOR_REGISTER_S = _AE_SENSOR_REGISTER_S;
pub type SNS_COMBO_DEV_ATTR_S = combo_dev_attr_s;
pub type SNS_MCLK_ATTR_S = mclk_pll_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SNS_ATTR_S {
    pub u16Min: CVI_U16,
    pub u16Max: CVI_U16,
    pub u16Def: CVI_U16,
    pub u16Step: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SNS_ATTR_S"][::std::mem::size_of::<_SNS_ATTR_S>() - 8usize];
    ["Alignment of _SNS_ATTR_S"][::std::mem::align_of::<_SNS_ATTR_S>() - 2usize];
    ["Offset of field: _SNS_ATTR_S::u16Min"][::std::mem::offset_of!(_SNS_ATTR_S, u16Min) - 0usize];
    ["Offset of field: _SNS_ATTR_S::u16Max"][::std::mem::offset_of!(_SNS_ATTR_S, u16Max) - 2usize];
    ["Offset of field: _SNS_ATTR_S::u16Def"][::std::mem::offset_of!(_SNS_ATTR_S, u16Def) - 4usize];
    ["Offset of field: _SNS_ATTR_S::u16Step"]
        [::std::mem::offset_of!(_SNS_ATTR_S, u16Step) - 6usize];
};
pub type SNS_ATTR_S = _SNS_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SNS_ATTR_LARGE_S {
    pub u32Min: CVI_U32,
    pub u32Max: CVI_U32,
    pub u32Def: CVI_U32,
    pub u32Step: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SNS_ATTR_LARGE_S"][::std::mem::size_of::<_SNS_ATTR_LARGE_S>() - 16usize];
    ["Alignment of _SNS_ATTR_LARGE_S"][::std::mem::align_of::<_SNS_ATTR_LARGE_S>() - 4usize];
    ["Offset of field: _SNS_ATTR_LARGE_S::u32Min"]
        [::std::mem::offset_of!(_SNS_ATTR_LARGE_S, u32Min) - 0usize];
    ["Offset of field: _SNS_ATTR_LARGE_S::u32Max"]
        [::std::mem::offset_of!(_SNS_ATTR_LARGE_S, u32Max) - 4usize];
    ["Offset of field: _SNS_ATTR_LARGE_S::u32Def"]
        [::std::mem::offset_of!(_SNS_ATTR_LARGE_S, u32Def) - 8usize];
    ["Offset of field: _SNS_ATTR_LARGE_S::u32Step"]
        [::std::mem::offset_of!(_SNS_ATTR_LARGE_S, u32Step) - 12usize];
};
pub type SNS_ATTR_LARGE_S = _SNS_ATTR_LARGE_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _ISP_SNS_STATE_S {
    pub bInit: CVI_BOOL,
    pub bSyncInit: CVI_BOOL,
    pub u8ImgMode: CVI_U8,
    pub u8Hdr: CVI_U8,
    pub enWDRMode: WDR_MODE_E,
    pub astSyncInfo: [ISP_SNS_SYNC_INFO_S; 2usize],
    pub au32FL: [CVI_U32; 2usize],
    pub u32FLStd: CVI_U32,
    pub au32WDRIntTime: [CVI_U32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_STATE_S"][::std::mem::size_of::<_ISP_SNS_STATE_S>() - 2076usize];
    ["Alignment of _ISP_SNS_STATE_S"][::std::mem::align_of::<_ISP_SNS_STATE_S>() - 4usize];
    ["Offset of field: _ISP_SNS_STATE_S::bInit"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, bInit) - 0usize];
    ["Offset of field: _ISP_SNS_STATE_S::bSyncInit"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, bSyncInit) - 1usize];
    ["Offset of field: _ISP_SNS_STATE_S::u8ImgMode"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, u8ImgMode) - 2usize];
    ["Offset of field: _ISP_SNS_STATE_S::u8Hdr"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, u8Hdr) - 3usize];
    ["Offset of field: _ISP_SNS_STATE_S::enWDRMode"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, enWDRMode) - 4usize];
    ["Offset of field: _ISP_SNS_STATE_S::astSyncInfo"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, astSyncInfo) - 8usize];
    ["Offset of field: _ISP_SNS_STATE_S::au32FL"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, au32FL) - 2048usize];
    ["Offset of field: _ISP_SNS_STATE_S::u32FLStd"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, u32FLStd) - 2056usize];
    ["Offset of field: _ISP_SNS_STATE_S::au32WDRIntTime"]
        [::std::mem::offset_of!(_ISP_SNS_STATE_S, au32WDRIntTime) - 2060usize];
};
pub type ISP_SNS_STATE_S = _ISP_SNS_STATE_S;
pub const _ISP_SNS_MIRRORFLIP_TYPE_E_ISP_SNS_NORMAL: _ISP_SNS_MIRRORFLIP_TYPE_E = 0;
pub const _ISP_SNS_MIRRORFLIP_TYPE_E_ISP_SNS_MIRROR: _ISP_SNS_MIRRORFLIP_TYPE_E = 1;
pub const _ISP_SNS_MIRRORFLIP_TYPE_E_ISP_SNS_FLIP: _ISP_SNS_MIRRORFLIP_TYPE_E = 2;
pub const _ISP_SNS_MIRRORFLIP_TYPE_E_ISP_SNS_MIRROR_FLIP: _ISP_SNS_MIRRORFLIP_TYPE_E = 3;
pub const _ISP_SNS_MIRRORFLIP_TYPE_E_ISP_SNS_BUTT: _ISP_SNS_MIRRORFLIP_TYPE_E = 4;
pub type _ISP_SNS_MIRRORFLIP_TYPE_E = ::std::os::raw::c_uint;
pub use self::_ISP_SNS_MIRRORFLIP_TYPE_E as ISP_SNS_MIRRORFLIP_TYPE_E;
pub const _ISP_SNS_L2S_MODE_E_SNS_L2S_MODE_AUTO: _ISP_SNS_L2S_MODE_E = 0;
pub const _ISP_SNS_L2S_MODE_E_SNS_L2S_MODE_FIX: _ISP_SNS_L2S_MODE_E = 1;
pub type _ISP_SNS_L2S_MODE_E = ::std::os::raw::c_uint;
pub use self::_ISP_SNS_L2S_MODE_E as ISP_SNS_INTTIME_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MCLK_ATTR_S {
    pub u8Mclk: CVI_U8,
    pub bMclkEn: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MCLK_ATTR_S"][::std::mem::size_of::<_MCLK_ATTR_S>() - 2usize];
    ["Alignment of _MCLK_ATTR_S"][::std::mem::align_of::<_MCLK_ATTR_S>() - 1usize];
    ["Offset of field: _MCLK_ATTR_S::u8Mclk"]
        [::std::mem::offset_of!(_MCLK_ATTR_S, u8Mclk) - 0usize];
    ["Offset of field: _MCLK_ATTR_S::bMclkEn"]
        [::std::mem::offset_of!(_MCLK_ATTR_S, bMclkEn) - 1usize];
};
pub type MCLK_ATTR_S = _MCLK_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RX_INIT_ATTR_S {
    pub MipiDev: CVI_U32,
    pub as16LaneId: [CVI_S16; 5usize],
    pub as8PNSwap: [CVI_S8; 5usize],
    pub stMclkAttr: MCLK_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RX_INIT_ATTR_S"][::std::mem::size_of::<_RX_INIT_ATTR_S>() - 24usize];
    ["Alignment of _RX_INIT_ATTR_S"][::std::mem::align_of::<_RX_INIT_ATTR_S>() - 4usize];
    ["Offset of field: _RX_INIT_ATTR_S::MipiDev"]
        [::std::mem::offset_of!(_RX_INIT_ATTR_S, MipiDev) - 0usize];
    ["Offset of field: _RX_INIT_ATTR_S::as16LaneId"]
        [::std::mem::offset_of!(_RX_INIT_ATTR_S, as16LaneId) - 4usize];
    ["Offset of field: _RX_INIT_ATTR_S::as8PNSwap"]
        [::std::mem::offset_of!(_RX_INIT_ATTR_S, as8PNSwap) - 14usize];
    ["Offset of field: _RX_INIT_ATTR_S::stMclkAttr"]
        [::std::mem::offset_of!(_RX_INIT_ATTR_S, stMclkAttr) - 19usize];
};
pub type RX_INIT_ATTR_S = _RX_INIT_ATTR_S;
pub const _SNS_BDG_MUX_MODE_E_SNS_BDG_MUX_NONE: _SNS_BDG_MUX_MODE_E = 0;
pub const _SNS_BDG_MUX_MODE_E_SNS_BDG_MUX_2: _SNS_BDG_MUX_MODE_E = 1;
pub const _SNS_BDG_MUX_MODE_E_SNS_BDG_MUX_3: _SNS_BDG_MUX_MODE_E = 2;
pub const _SNS_BDG_MUX_MODE_E_SNS_BDG_MUX_4: _SNS_BDG_MUX_MODE_E = 3;
pub type _SNS_BDG_MUX_MODE_E = ::std::os::raw::c_uint;
pub use self::_SNS_BDG_MUX_MODE_E as SNS_BDG_MUX_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_INIT_ATTR_S {
    pub u32ExpTime: CVI_U32,
    pub u32AGain: CVI_U32,
    pub u32DGain: CVI_U32,
    pub u32ISPDGain: CVI_U32,
    pub u32Exposure: CVI_U32,
    pub u32LinesPer500ms: CVI_U32,
    pub u32PirisFNO: CVI_U32,
    pub u16WBRgain: CVI_U16,
    pub u16WBGgain: CVI_U16,
    pub u16WBBgain: CVI_U16,
    pub u16SampleRgain: CVI_U16,
    pub u16SampleBgain: CVI_U16,
    pub u16UseHwSync: CVI_U16,
    pub enGainMode: ISP_SNS_GAIN_MODE_E,
    pub enL2SMode: ISP_SNS_INTTIME_MODE_E,
    pub enSnsBdgMuxMode: SNS_BDG_MUX_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_INIT_ATTR_S"][::std::mem::size_of::<_ISP_INIT_ATTR_S>() - 52usize];
    ["Alignment of _ISP_INIT_ATTR_S"][::std::mem::align_of::<_ISP_INIT_ATTR_S>() - 4usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32ExpTime"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32ExpTime) - 0usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32AGain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32AGain) - 4usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32DGain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32DGain) - 8usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32ISPDGain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32ISPDGain) - 12usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32Exposure"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32Exposure) - 16usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32LinesPer500ms"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32LinesPer500ms) - 20usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u32PirisFNO"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u32PirisFNO) - 24usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16WBRgain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16WBRgain) - 28usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16WBGgain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16WBGgain) - 30usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16WBBgain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16WBBgain) - 32usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16SampleRgain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16SampleRgain) - 34usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16SampleBgain"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16SampleBgain) - 36usize];
    ["Offset of field: _ISP_INIT_ATTR_S::u16UseHwSync"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, u16UseHwSync) - 38usize];
    ["Offset of field: _ISP_INIT_ATTR_S::enGainMode"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, enGainMode) - 40usize];
    ["Offset of field: _ISP_INIT_ATTR_S::enL2SMode"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, enL2SMode) - 44usize];
    ["Offset of field: _ISP_INIT_ATTR_S::enSnsBdgMuxMode"]
        [::std::mem::offset_of!(_ISP_INIT_ATTR_S, enSnsBdgMuxMode) - 48usize];
};
pub type ISP_INIT_ATTR_S = _ISP_INIT_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_SNS_OBJ_S {
    pub pfnRegisterCallback: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            arg1: *mut ALG_LIB_S,
            arg2: *mut ALG_LIB_S,
        ) -> CVI_S32,
    >,
    pub pfnUnRegisterCallback: ::std::option::Option<
        unsafe extern "C" fn(
            ViPipe: VI_PIPE,
            arg1: *mut ALG_LIB_S,
            arg2: *mut ALG_LIB_S,
        ) -> CVI_S32,
    >,
    pub pfnSetBusInfo: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, unSNSBusInfo: ISP_SNS_COMMBUS_U) -> CVI_S32,
    >,
    pub pfnStandby: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE)>,
    pub pfnRestart: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE)>,
    pub pfnMirrorFlip: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, eSnsMirrorFlip: ISP_SNS_MIRRORFLIP_TYPE_E),
    >,
    pub pfnWriteReg: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, s32Addr: CVI_S32, s32Data: CVI_S32) -> CVI_S32,
    >,
    pub pfnReadReg:
        ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE, s32Addr: CVI_S32) -> CVI_S32>,
    pub pfnSetInit: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, arg1: *mut ISP_INIT_ATTR_S) -> CVI_S32,
    >,
    pub pfnPatchRxAttr:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut RX_INIT_ATTR_S) -> CVI_S32>,
    pub pfnPatchI2cAddr: ::std::option::Option<unsafe extern "C" fn(s32I2cAddr: CVI_S32)>,
    pub pfnGetRxAttr: ::std::option::Option<
        unsafe extern "C" fn(ViPipe: VI_PIPE, arg1: *mut SNS_COMBO_DEV_ATTR_S) -> CVI_S32,
    >,
    pub pfnExpSensorCb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ISP_SENSOR_EXP_FUNC_S) -> CVI_S32>,
    pub pfnExpAeCb:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut AE_SENSOR_EXP_FUNC_S) -> CVI_S32>,
    pub pfnSnsProbe: ::std::option::Option<unsafe extern "C" fn(ViPipe: VI_PIPE) -> CVI_S32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_SNS_OBJ_S"][::std::mem::size_of::<_ISP_SNS_OBJ_S>() - 120usize];
    ["Alignment of _ISP_SNS_OBJ_S"][::std::mem::align_of::<_ISP_SNS_OBJ_S>() - 8usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnRegisterCallback"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnRegisterCallback) - 0usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnUnRegisterCallback"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnUnRegisterCallback) - 8usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnSetBusInfo"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnSetBusInfo) - 16usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnStandby"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnStandby) - 24usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnRestart"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnRestart) - 32usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnMirrorFlip"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnMirrorFlip) - 40usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnWriteReg"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnWriteReg) - 48usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnReadReg"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnReadReg) - 56usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnSetInit"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnSetInit) - 64usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnPatchRxAttr"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnPatchRxAttr) - 72usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnPatchI2cAddr"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnPatchI2cAddr) - 80usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnGetRxAttr"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnGetRxAttr) - 88usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnExpSensorCb"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnExpSensorCb) - 96usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnExpAeCb"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnExpAeCb) - 104usize];
    ["Offset of field: _ISP_SNS_OBJ_S::pfnSnsProbe"]
        [::std::mem::offset_of!(_ISP_SNS_OBJ_S, pfnSnsProbe) - 112usize];
};
pub type ISP_SNS_OBJ_S = _ISP_SNS_OBJ_S;
extern "C" {
    pub static mut stSnsBG0808_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc02m1b_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc0312_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc0329_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc1054_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2053_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2053_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2053_1l_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2083_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2093_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2093_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc2145_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc4023_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc4653_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsGc4653_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsMIS2008_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsN5_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsN6_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs02d10_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs02d10_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs02k10_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs04a10_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs04c10_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs04c10_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs08a20_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOs08a20_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOv4689_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOv5647_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOv6211_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsOv7251_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsPICO384_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsPICO640_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsPR2020_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsPR2100_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC035GS_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC035GS_1L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC035HGS_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC1346_1L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC1346_1L_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC200AI_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC301IOT_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC401AI_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC500AI_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC501AI_2L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC531AI_2L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC850SL_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC3332_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC3335_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC3335_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC3336_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC2331_1L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC2335_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC2336_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC2336P_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC4210_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC4336_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC4336P_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC5336_2L_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsSC8238_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsF23_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsF35_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsF35_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsF37P_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsH65_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsK06_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsQ03_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsQ03P_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx290_2l_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx307_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx307_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx307_2l_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx307_Sublvds_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx327_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx327_Slave_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx327_2l_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx327_fpga_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx327_Sublvds_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx334_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx335_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx347_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsImx385_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsTP2850_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsTP2825_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsTP2863_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsMCS369_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsMCS369Q_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsMM308M2_Obj: ISP_SNS_OBJ_S;
}
extern "C" {
    pub static mut stSnsLT6911_Obj: ISP_SNS_OBJ_S;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
