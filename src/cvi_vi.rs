#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals, unused_imports)]
/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const CVI_NULL: u32 = 0;
pub const CVI_SUCCESS: u32 = 0;
pub const CVI_FAILURE: i32 = -1;
pub const CVI_FAILURE_ILLEGAL_PARAM: i32 = -2;
pub const CVI_TRUE: u32 = 1;
pub const CVI_FALSE: u32 = 0;
pub const __BITS_PER_LONG: u32 = 64;
pub const IOCTL_BASE_MAGIC: u8 = 115u8;
pub const CVI_CHIP_NAME: &[u8; 7] = b"CV181X\0";
pub const CVI_CHIP_TEST: u32 = 0;
pub const CVIU01: u32 = 1;
pub const CVIU02: u32 = 2;
pub const CVI_COLDBOOT: u32 = 1;
pub const CVI_WDTBOOT: u32 = 2;
pub const CVI_SUSPENDBOOT: u32 = 3;
pub const CVI_WARMBOOT: u32 = 4;
pub const MMF_VER_PRIX: &[u8; 7] = b"_MMF_V\0";
pub const ALIGN_NUM: u32 = 4;
pub const LUMA_PHY_ALIGN: u32 = 16;
pub const DEFAULT_ALIGN: u32 = 64;
pub const MAX_ALIGN: u32 = 1024;
pub const SEG_CMP_LENGTH: u32 = 256;
pub const VENC_MAX_NAME_LEN: u32 = 16;
pub const VENC_MAX_CHN_NUM: u32 = 16;
pub const VEDU_IP_NUM: u32 = 1;
pub const H264E_MAX_WIDTH: u32 = 4096;
pub const H264E_MAX_HEIGHT: u32 = 4096;
pub const H264E_MIN_WIDTH: u32 = 114;
pub const H264E_MIN_HEIGHT: u32 = 114;
pub const H265E_MAX_WIDTH: u32 = 4096;
pub const H265E_MAX_HEIGHT: u32 = 4096;
pub const H265E_MIN_WIDTH: u32 = 114;
pub const H265E_MIN_HEIGHT: u32 = 114;
pub const JPEGE_MAX_WIDTH: u32 = 8192;
pub const JPEGE_MAX_HEIGHT: u32 = 8192;
pub const JPEGE_MIN_WIDTH: u32 = 32;
pub const JPEGE_MIN_HEIGHT: u32 = 32;
pub const JPGE_MAX_NUM: u32 = 1;
pub const VENC_MAX_ROI_NUM: u32 = 8;
pub const H264E_MIN_HW_INDEX: u32 = 0;
pub const H264E_MAX_HW_INDEX: u32 = 11;
pub const H264E_MIN_VW_INDEX: u32 = 0;
pub const H264E_MAX_VW_INDEX: u32 = 3;
pub const VENC_QP_HISGRM_NUM: u32 = 52;
pub const MAX_TILE_NUM: u32 = 1;
pub const H265E_ADAPTIVE_FRAME_TYPE: u32 = 4;
pub const H265E_ADAPTIVE_QP_TYPE: u32 = 5;
pub const VENC_MIN_INPUT_FRAME_RATE: u32 = 1;
pub const VENC_MAX_INPUT_FRAME_RATE: u32 = 240;
pub const VENC_MAX_RECEIVE_SOURCE: u32 = 4;
pub const VENC_PIC_RECEIVE_SOURCE0: u32 = 0;
pub const VENC_PIC_RECEIVE_SOURCE1: u32 = 1;
pub const VENC_PIC_RECEIVE_SOURCE2: u32 = 2;
pub const VENC_PIC_RECEIVE_SOURCE3: u32 = 3;
pub const VENC_ALIGN_W: u32 = 32;
pub const VENC_ALIGN_H: u32 = 16;
pub const RC_TEXTURE_THR_SIZE: u32 = 16;
pub const MIN_BITRATE: u32 = 2;
pub const MAX_BITRATE: u32 = 102400;
pub const VDEC_MAX_CHN_NUM: u32 = 64;
pub const VDH_MAX_CHN_NUM: u32 = 0;
pub const VEDU_CHN_START: u32 = 0;
pub const VEDU_H264D_ERRRATE: u32 = 10;
pub const VEDU_H264D_FULLERR: u32 = 100;
pub const H264D_ALIGN_W: u32 = 64;
pub const H264D_ALIGN_H: u32 = 64;
pub const H265D_ALIGN_W: u32 = 64;
pub const H265D_ALIGN_H: u32 = 64;
pub const JPEGD_ALIGN_W: u32 = 64;
pub const JPEGD_ALIGN_H: u32 = 16;
pub const JPEGD_RGB_ALIGN: u32 = 16;
pub const H264D_ALIGN_FRM: u32 = 4096;
pub const H265D_ALIGN_FRM: u32 = 4096;
pub const JPEGD_ALIGN_FRM: u32 = 4096;
pub const H264D_MAX_SPS: u32 = 32;
pub const H264D_MIN_SPS: u32 = 1;
pub const H264D_MAX_PPS: u32 = 256;
pub const H264D_MIN_PPS: u32 = 1;
pub const H264D_MAX_SLICE: u32 = 300;
pub const H264D_MIN_SLICE: u32 = 1;
pub const H265D_MAX_VPS: u32 = 16;
pub const H265D_MIN_VPS: u32 = 1;
pub const H265D_MAX_SPS: u32 = 16;
pub const H265D_MIN_SPS: u32 = 1;
pub const H265D_MAX_PPS: u32 = 64;
pub const H265D_MIN_PPS: u32 = 1;
pub const H265D_MAX_SLICE: u32 = 200;
pub const H265D_MIN_SLICE: u32 = 1;
pub const VEDU_H264D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H264D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H264D_MIN_WIDTH: u32 = 114;
pub const VEDU_H264D_MIN_HEIGHT: u32 = 114;
pub const VEDU_H265D_MAX_WIDTH: u32 = 2880;
pub const VEDU_H265D_MAX_HEIGHT: u32 = 1920;
pub const VEDU_H265D_MIN_WIDTH: u32 = 114;
pub const VEDU_H265D_MIN_HEIGHT: u32 = 114;
pub const JPEGD_IP_NUM: u32 = 1;
pub const JPEGD_MAX_WIDTH: u32 = 2880;
pub const JPEGD_MAX_HEIGHT: u32 = 1920;
pub const JPEGD_MIN_WIDTH: u32 = 8;
pub const JPEGD_MIN_HEIGHT: u32 = 8;
pub const RGN_MIN_WIDTH: u32 = 2;
pub const RGN_MIN_HEIGHT: u32 = 2;
pub const RGN_COVER_MAX_WIDTH: u32 = 2880;
pub const RGN_COVER_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVER_MIN_X: u32 = 0;
pub const RGN_COVER_MIN_Y: u32 = 0;
pub const RGN_COVER_MAX_X: u32 = 2878;
pub const RGN_COVER_MAX_Y: u32 = 4094;
pub const RGN_COVEREX_MAX_NUM: u32 = 4;
pub const RGN_COVEREX_MAX_WIDTH: u32 = 2880;
pub const RGN_COVEREX_MAX_HEIGHT: u32 = 4096;
pub const RGN_COVEREX_MIN_X: u32 = 0;
pub const RGN_COVEREX_MIN_Y: u32 = 0;
pub const RGN_COVEREX_MAX_X: u32 = 2878;
pub const RGN_COVEREX_MAX_Y: u32 = 4094;
pub const RGN_OVERLAY_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAY_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAY_MIN_X: u32 = 0;
pub const RGN_OVERLAY_MIN_Y: u32 = 0;
pub const RGN_OVERLAY_MAX_X: u32 = 2878;
pub const RGN_OVERLAY_MAX_Y: u32 = 4094;
pub const RGN_OVERLAYEX_MAX_WIDTH: u32 = 2880;
pub const RGN_OVERLAYEX_MAX_HEIGHT: u32 = 4096;
pub const RGN_OVERLAYEX_MIN_X: u32 = 0;
pub const RGN_OVERLAYEX_MIN_Y: u32 = 0;
pub const RGN_OVERLAYEX_MAX_X: u32 = 2878;
pub const RGN_OVERLAYEX_MAX_Y: u32 = 4094;
pub const RGN_MOSAIC_MAX_NUM: u32 = 8;
pub const RGN_MOSAIC_X_ALIGN: u32 = 4;
pub const RGN_MOSAIC_Y_ALIGN: u32 = 2;
pub const RGN_MOSAIC_WIDTH_ALIGN: u32 = 4;
pub const RGN_MOSAIC_HEIGHT_ALIGN: u32 = 4;
pub const RGN_MOSAIC_MIN_WIDTH: u32 = 8;
pub const RGN_MOSAIC_MIN_HEIGHT: u32 = 8;
pub const RGN_MOSAIC_MAX_WIDTH: u32 = 2880;
pub const RGN_MOSAIC_MAX_HEIGHT: u32 = 4096;
pub const RGN_MOSAIC_MIN_X: u32 = 0;
pub const RGN_MOSAIC_MIN_Y: u32 = 0;
pub const RGN_MOSAIC_MAX_X: u32 = 2872;
pub const RGN_MOSAIC_MAX_Y: u32 = 4088;
pub const RGN_MAX_LAYER_VPSS: u32 = 2;
pub const RGN_ODEC_LAYER_VPSS: u32 = 0;
pub const RGN_NORMAL_LAYER_VPSS: u32 = 1;
pub const RGN_MAX_NUM_VPSS: u32 = 8;
pub const RGN_EX_MAX_NUM_VPSS: u32 = 16;
pub const RGN_EX_MAX_WIDTH: u32 = 2880;
pub const RGN_MAX_NUM_VO: u32 = 8;
pub const RGN_MAX_BUF_NUM: u32 = 2;
pub const RGN_MAX_NUM: u32 = 108;
pub const VENC_MAX_SSE_NUM: u32 = 8;
pub const CVI_MAX_SENSOR_NUM: u32 = 2;
pub const VI_MAX_DEV_NUM: u32 = 3;
pub const VI_MAX_PHY_PIPE_NUM: u32 = 4;
pub const VI_MAX_VIR_PIPE_NUM: u32 = 0;
pub const VI_MAX_PIPE_NUM: u32 = 4;
pub const VI_MAX_WDR_NUM: u32 = 1;
pub const VI_MAX_VIR_CHN_NUM: u32 = 2;
pub const VI_MAX_PHY_CHN_NUM: u32 = 3;
pub const VI_MAX_EXT_CHN_NUM: u32 = 2;
pub const VI_MAX_CHN_NUM: u32 = 5;
pub const VI_EXT_CHN_START: u32 = 5;
pub const VI_MAX_EXTCHN_BIND_PER_CHN: u32 = 1;
pub const VI_MAX_WDR_FRAME_NUM: u32 = 2;
pub const VI_MAX_NODE_NUM: u32 = 3;
pub const VIPROC_IP_NUM: u32 = 1;
pub const VICAP_IP_NUM: u32 = 1;
pub const VI_MAX_SPLIT_NODE_NUM: u32 = 3;
pub const VI_DEV_MIN_WIDTH: u32 = 120;
pub const VI_DEV_MIN_HEIGHT: u32 = 120;
pub const VI_DEV_MAX_WIDTH: u32 = 4608;
pub const VI_DEV_MAX_HEIGHT: u32 = 4608;
pub const VI_FPN_MAX_WIDTH: u32 = 4096;
pub const VI_FPN_MAX_HEIGHT: u32 = 4608;
pub const VI_PIPE_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_OFFLINE_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_OFFLINE_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PIPE_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PIPE_ONLINE_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_ONLINE_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE0_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE0_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE1_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE1_MAX_HEIGHT: u32 = 2160;
pub const VI_PIPE2_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE2_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE3_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE3_MAX_HEIGHT: u32 = 1944;
pub const VI_PIPE_WDR_FIRST_MAX_WIDTH: u32 = 4096;
pub const VI_PIPE_FUSION_MAX_WIDTH: u32 = 2688;
pub const VI_PIPE_FUSION_MAX_HEIGHT: u32 = 1944;
pub const VI_PHYCHN_OFFLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_OFFLINE_MAX_WIDTH: u32 = 4608;
pub const VI_PHYCHN_OFFLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_PHYCHN_ONLINE_MIN_WIDTH: u32 = 120;
pub const VI_PHYCHN_ONLINE_MIN_HEIGHT: u32 = 120;
pub const VI_PHYCHN_ONLINE_MAX_WIDTH: u32 = 2048;
pub const VI_PHYCHN_ONLINE_MAX_HEIGHT: u32 = 4608;
pub const VI_CMP_PARAM_SIZE: u32 = 152;
pub const CVI_VI_VPSS_EXTRA_BUF: u32 = 0;
pub const CVI_VI_CHN_0_BUF: u32 = 2;
pub const CVI_VI_CHN_1_BUF: u32 = 2;
pub const CVI_VI_CHN_2_BUF: u32 = 2;
pub const CVI_VI_CHN_3_BUF: u32 = 2;
pub const CVI_VI_BUF: u32 = 8;
pub const VO_MIN_CHN_WIDTH: u32 = 32;
pub const VO_MIN_CHN_HEIGHT: u32 = 32;
pub const VO_MAX_DEV_NUM: u32 = 1;
pub const VO_MAX_LAYER_NUM: u32 = 1;
pub const VO_MAX_PRIORITY: u32 = 1;
pub const VO_MAX_CHN_NUM: u32 = 1;
pub const VO_MAX_LAYER_IN_DEV: u32 = 1;
pub const VO_MAX_GRAPHICS_LAYER_NUM: u32 = 1;
pub const VO_MIN_TOLERATE: u32 = 1;
pub const VO_MAX_TOLERATE: u32 = 100000;
pub const AI_DEV_MAX_NUM: u32 = 1;
pub const AO_DEV_MIN_NUM: u32 = 0;
pub const AO_DEV_MAX_NUM: u32 = 2;
pub const AIO_MAX_NUM: u32 = 2;
pub const AENC_MAX_CHN_NUM: u32 = 3;
pub const ADEC_MAX_CHN_NUM: u32 = 3;
pub const AI_MAX_CHN_NUM: u32 = 2;
pub const AO_MAX_CHN_NUM: u32 = 1;
pub const AO_SYSCHN_CHNID: u32 = 0;
pub const VPSS_IP_NUM: u32 = 2;
pub const VPSS_DEV_0: u32 = 0;
pub const VPSS_DEV_1: u32 = 1;
pub const VPSS_MAX_GRP_NUM: u32 = 16;
pub const VPSS_ONLINE_NUM: u32 = 3;
pub const VPSS_ONLINE_GRP_0: u32 = 0;
pub const VPSS_ONLINE_GRP_1: u32 = 1;
pub const VPSS_ONLINE_GRP_2: u32 = 2;
pub const VPSS_MAX_PHY_CHN_NUM: u32 = 4;
pub const VPSS_MAX_CHN_NUM: u32 = 4;
pub const VPSS_MIN_IMAGE_WIDTH: u32 = 32;
pub const VPSS_MAX_IMAGE_WIDTH: u32 = 2880;
pub const VPSS_MAX_IMAGE_HEIGHT: u32 = 4096;
pub const VPSS_MAX_ZOOMIN: u32 = 32;
pub const VPSS_MAX_ZOOMOUT: u32 = 32;
pub const LDC_ALIGN: u32 = 64;
pub const LDC_MIN_IMAGE_WIDTH: u32 = 640;
pub const LDC_MIN_IMAGE_HEIGHT: u32 = 480;
pub const SPREAD_MIN_IMAGE_WIDTH: u32 = 640;
pub const SPREAD_MIN_IMAGE_HEIGHT: u32 = 480;
pub const GDC_IP_NUM: u32 = 1;
pub const GDC_PROC_JOB_INFO_NUM: u32 = 500;
pub const VER_X: u32 = 1;
pub const VER_Y: u32 = 0;
pub const VER_Z: u32 = 0;
pub const VER_D: &[u8; 9] = b" Release\0";
pub const CVI_INVALID_CHN: i32 = -1;
pub const CVI_INVALID_LAYER: i32 = -1;
pub const CVI_INVALID_DEV: i32 = -1;
pub const CVI_INVALID_HANDLE: i32 = -1;
pub const CVI_INVALID_VALUE: i32 = -1;
pub const CVI_INVALID_TYPE: i32 = -1;
pub const CCM_MATRIX_SIZE: u32 = 9;
pub const CCM_MATRIX_NUM: u32 = 7;
pub const VERSION_NAME_MAXLEN: u32 = 128;
pub const SRC_LENS_COEF_SEG: u32 = 2;
pub const DST_LENS_COEF_SEG: u32 = 3;
pub const SRC_LENS_COEF_NUM: u32 = 4;
pub const DST_LENS_COEF_NUM: u32 = 4;
pub const ISP_BAYER_CHN: u32 = 4;
pub const ISP_WB_GAIN_NUM: u32 = 4;
pub const ISP_CAP_CCM_NUM: u32 = 9;
pub const VI_MAX_ADCHN_NUM: u32 = 4;
pub const VI_COMPMASK_NUM: u32 = 2;
pub const VI_PRO_MAX_FRAME_NUM: u32 = 8;
pub const VI_SHARPEN_GAIN_NUM: u32 = 32;
pub const VI_AUTO_ISO_STRENGTH_NUM: u32 = 16;
pub const VI_INVALID_FRMRATE: i32 = -1;
pub const VI_CHN0: u32 = 0;
pub const VI_CHN1: u32 = 1;
pub const VI_CHN2: u32 = 2;
pub const VI_CHN3: u32 = 3;
pub const VI_INVALID_CHN: i32 = -1;
pub const VI_MAX_VC_NUM: u32 = 4;
pub const FISHEYE_MAX_REGION_NUM: u32 = 4;
pub const AFFINE_MAX_REGION_NUM: u32 = 32;
pub const CVI_ERR_APPID: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _SYS_SYSLOG_H: u32 = 1;
pub const _BITS_SYSLOG_PATH_H: u32 = 1;
pub const _PATH_LOG: &[u8; 9] = b"/dev/log\0";
pub const LOG_EMERG: u32 = 0;
pub const LOG_ALERT: u32 = 1;
pub const LOG_CRIT: u32 = 2;
pub const LOG_ERR: u32 = 3;
pub const LOG_WARNING: u32 = 4;
pub const LOG_NOTICE: u32 = 5;
pub const LOG_INFO: u32 = 6;
pub const LOG_DEBUG: u32 = 7;
pub const LOG_PRIMASK: u32 = 7;
pub const LOG_KERN: u32 = 0;
pub const LOG_USER: u32 = 8;
pub const LOG_MAIL: u32 = 16;
pub const LOG_DAEMON: u32 = 24;
pub const LOG_AUTH: u32 = 32;
pub const LOG_SYSLOG: u32 = 40;
pub const LOG_LPR: u32 = 48;
pub const LOG_NEWS: u32 = 56;
pub const LOG_UUCP: u32 = 64;
pub const LOG_CRON: u32 = 72;
pub const LOG_AUTHPRIV: u32 = 80;
pub const LOG_FTP: u32 = 88;
pub const LOG_LOCAL0: u32 = 128;
pub const LOG_LOCAL1: u32 = 136;
pub const LOG_LOCAL2: u32 = 144;
pub const LOG_LOCAL3: u32 = 152;
pub const LOG_LOCAL4: u32 = 160;
pub const LOG_LOCAL5: u32 = 168;
pub const LOG_LOCAL6: u32 = 176;
pub const LOG_LOCAL7: u32 = 184;
pub const LOG_NFACILITIES: u32 = 24;
pub const LOG_FACMASK: u32 = 1016;
pub const LOG_PID: u32 = 1;
pub const LOG_CONS: u32 = 2;
pub const LOG_ODELAY: u32 = 4;
pub const LOG_NDELAY: u32 = 8;
pub const LOG_NOWAIT: u32 = 16;
pub const LOG_PERROR: u32 = 32;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const CONFIG_CVI_GDB_NO: u32 = 1;
pub const CONFIG_CVI_GDB: &[u8; 2] = b"n\0";
pub const CONFIG_CVI_LOG_TRACE_SUPPORT: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_ALL: u32 = 1;
pub const CONFIG_CVI_LOG_TRACE_LEVEL: u32 = 4;
pub const CVI_DBG_EMERG: u32 = 0;
pub const CVI_DBG_ALERT: u32 = 1;
pub const CVI_DBG_CRIT: u32 = 2;
pub const CVI_DBG_ERR: u32 = 3;
pub const CVI_DBG_WARN: u32 = 4;
pub const CVI_DBG_NOTICE: u32 = 5;
pub const CVI_DBG_INFO: u32 = 6;
pub const CVI_DBG_DEBUG: u32 = 7;
pub const VB_INVALID_POOLID: i32 = -1;
pub const VB_INVALID_HANDLE: i32 = -1;
pub const VB_STATIC_POOLID: i32 = -2;
pub const VB_MAX_COMM_POOLS: u32 = 16;
pub const VB_POOL_MAX_BLK: u32 = 128;
pub const POOL_OWNER_COMMON: i32 = -1;
pub const POOL_OWNER_PRIVATE: i32 = -2;
pub const MAX_VB_POOL_NAME_LEN: u32 = 32;
pub const VB_SUPPLEMENT_JPEG_MASK: u32 = 1;
pub const VB_SUPPLEMENT_ISPINFO_MASK: u32 = 2;
pub const VB_SUPPLEMENT_MOTION_DATA_MASK: u32 = 4;
pub const VB_SUPPLEMENT_DNG_MASK: u32 = 8;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type CVI_UCHAR = ::std::os::raw::c_uchar;
pub type CVI_U8 = ::std::os::raw::c_uchar;
pub type CVI_U16 = ::std::os::raw::c_ushort;
pub type CVI_U32 = ::std::os::raw::c_uint;
pub type CVI_HANDLE = ::std::os::raw::c_uint;
pub type CVI_S8 = ::std::os::raw::c_schar;
pub type CVI_CHAR = ::std::os::raw::c_char;
pub type CVI_S16 = ::std::os::raw::c_short;
pub type CVI_S32 = ::std::os::raw::c_int;
pub type CVI_UL = ::std::os::raw::c_ulong;
pub type CVI_SL = ::std::os::raw::c_long;
pub type CVI_FLOAT = f32;
pub type CVI_DOUBLE = f64;
pub type CVI_VOID = ::std::os::raw::c_void;
pub type CVI_BOOL = ::std::os::raw::c_uchar;
pub type CVI_U64 = u64;
pub type CVI_S64 = i64;
pub type CVI_SIZE_T = ::std::os::raw::c_uint;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal32 {
    pub signr: ::std::os::raw::c_uint,
    pub context: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal32"][::std::mem::size_of::<base_statesignal32>() - 8usize];
    ["Alignment of base_statesignal32"][::std::mem::align_of::<base_statesignal32>() - 4usize];
    ["Offset of field: base_statesignal32::signr"]
        [::std::mem::offset_of!(base_statesignal32, signr) - 0usize];
    ["Offset of field: base_statesignal32::context"]
        [::std::mem::offset_of!(base_statesignal32, context) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct base_statesignal {
    pub signr: ::std::os::raw::c_uint,
    pub context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of base_statesignal"][::std::mem::size_of::<base_statesignal>() - 16usize];
    ["Alignment of base_statesignal"][::std::mem::align_of::<base_statesignal>() - 8usize];
    ["Offset of field: base_statesignal::signr"]
        [::std::mem::offset_of!(base_statesignal, signr) - 0usize];
    ["Offset of field: base_statesignal::context"]
        [::std::mem::offset_of!(base_statesignal, context) - 8usize];
};
pub const base_state_e_BASE_STATE_NORMAL: base_state_e = 0;
pub const base_state_e_BASE_STATE_SUSPEND_PREPARE: base_state_e = 1;
pub const base_state_e_BASE_STATE_SUSPEND: base_state_e = 2;
pub const base_state_e_BASE_STATE_RESUME: base_state_e = 3;
pub const base_state_e_BASE_STATE_NUM: base_state_e = 4;
pub type base_state_e = ::std::os::raw::c_uint;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822: ENUM_CHIP_ID = 0;
pub const ENUM_CHIP_ID_E_CHIPID_CV1832: ENUM_CHIP_ID = 1;
pub const ENUM_CHIP_ID_E_CHIPID_CV1835: ENUM_CHIP_ID = 2;
pub const ENUM_CHIP_ID_E_CHIPID_CV1838: ENUM_CHIP_ID = 3;
pub const ENUM_CHIP_ID_E_CHIPID_CV1829: ENUM_CHIP_ID = 4;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826: ENUM_CHIP_ID = 5;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821: ENUM_CHIP_ID = 6;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820: ENUM_CHIP_ID = 7;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823: ENUM_CHIP_ID = 8;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825: ENUM_CHIP_ID = 9;
pub const ENUM_CHIP_ID_E_CHIPID_CV1820A: ENUM_CHIP_ID = 10;
pub const ENUM_CHIP_ID_E_CHIPID_CV1821A: ENUM_CHIP_ID = 11;
pub const ENUM_CHIP_ID_E_CHIPID_CV1822A: ENUM_CHIP_ID = 12;
pub const ENUM_CHIP_ID_E_CHIPID_CV1823A: ENUM_CHIP_ID = 13;
pub const ENUM_CHIP_ID_E_CHIPID_CV1825A: ENUM_CHIP_ID = 14;
pub const ENUM_CHIP_ID_E_CHIPID_CV1826A: ENUM_CHIP_ID = 15;
pub const ENUM_CHIP_ID_E_CHIPID_CV1810C: ENUM_CHIP_ID = 16;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811C: ENUM_CHIP_ID = 17;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812C: ENUM_CHIP_ID = 18;
pub const ENUM_CHIP_ID_E_CHIPID_CV1811H: ENUM_CHIP_ID = 19;
pub const ENUM_CHIP_ID_E_CHIPID_CV1812H: ENUM_CHIP_ID = 20;
pub const ENUM_CHIP_ID_E_CHIPID_CV1813H: ENUM_CHIP_ID = 21;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800B: ENUM_CHIP_ID = 22;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801B: ENUM_CHIP_ID = 23;
pub const ENUM_CHIP_ID_E_CHIPID_CV1800C: ENUM_CHIP_ID = 24;
pub const ENUM_CHIP_ID_E_CHIPID_CV1801C: ENUM_CHIP_ID = 25;
pub type ENUM_CHIP_ID = ::std::os::raw::c_uint;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U01: ENUM_CHIP_VERSION = 1;
pub const ENUM_CHIP_VERSION_E_CHIPVERSION_U02: ENUM_CHIP_VERSION = 2;
pub type ENUM_CHIP_VERSION = ::std::os::raw::c_uint;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_COLDBOOT: ENUM_CHIP_PWR_ON_REASON = 1;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WDT: ENUM_CHIP_PWR_ON_REASON = 2;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_SUSPEND: ENUM_CHIP_PWR_ON_REASON = 3;
pub const ENUM_CHIP_PWR_ON_REASON_E_CHIP_PWR_ON_WARM_RST: ENUM_CHIP_PWR_ON_REASON = 4;
pub type ENUM_CHIP_PWR_ON_REASON = ::std::os::raw::c_uint;
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct vb_ext_control {
    pub id: __u32,
    pub reserved: [__u32; 1usize],
    pub __bindgen_anon_1: vb_ext_control__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union vb_ext_control__bindgen_ty_1 {
    pub value: __s32,
    pub value64: __s64,
    pub ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control__bindgen_ty_1"]
        [::std::mem::size_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Alignment of vb_ext_control__bindgen_ty_1"]
        [::std::mem::align_of::<vb_ext_control__bindgen_ty_1>() - 8usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::value64"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, value64) - 0usize];
    ["Offset of field: vb_ext_control__bindgen_ty_1::ptr"]
        [::std::mem::offset_of!(vb_ext_control__bindgen_ty_1, ptr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of vb_ext_control"][::std::mem::size_of::<vb_ext_control>() - 16usize];
    ["Alignment of vb_ext_control"][::std::mem::align_of::<vb_ext_control>() - 1usize];
    ["Offset of field: vb_ext_control::id"][::std::mem::offset_of!(vb_ext_control, id) - 0usize];
    ["Offset of field: vb_ext_control::reserved"]
        [::std::mem::offset_of!(vb_ext_control, reserved) - 4usize];
};
pub type AI_CHN = CVI_S32;
pub type AO_CHN = CVI_S32;
pub type AENC_CHN = CVI_S32;
pub type ADEC_CHN = CVI_S32;
pub type AUDIO_DEV = CVI_S32;
pub type VI_DEV = CVI_S32;
pub type VI_PIPE = CVI_S32;
pub type VI_CHN = CVI_S32;
pub type VO_DEV = CVI_S32;
pub type VO_LAYER = CVI_S32;
pub type VO_CHN = CVI_S32;
pub type GRAPHIC_LAYER = CVI_S32;
pub type VENC_CHN = CVI_S32;
pub type VDEC_CHN = CVI_S32;
pub type ISP_DEV = CVI_S32;
pub type SENSOR_ID = CVI_S32;
pub type MIPI_DEV = CVI_S32;
pub type SLAVE_DEV = CVI_S32;
pub type VPSS_GRP = CVI_S32;
pub type VPSS_CHN = CVI_S32;
pub const _MOD_ID_E_CVI_ID_BASE: _MOD_ID_E = 0;
pub const _MOD_ID_E_CVI_ID_VB: _MOD_ID_E = 1;
pub const _MOD_ID_E_CVI_ID_SYS: _MOD_ID_E = 2;
pub const _MOD_ID_E_CVI_ID_RGN: _MOD_ID_E = 3;
pub const _MOD_ID_E_CVI_ID_CHNL: _MOD_ID_E = 4;
pub const _MOD_ID_E_CVI_ID_VDEC: _MOD_ID_E = 5;
pub const _MOD_ID_E_CVI_ID_VPSS: _MOD_ID_E = 6;
pub const _MOD_ID_E_CVI_ID_VENC: _MOD_ID_E = 7;
pub const _MOD_ID_E_CVI_ID_H264E: _MOD_ID_E = 8;
pub const _MOD_ID_E_CVI_ID_JPEGE: _MOD_ID_E = 9;
pub const _MOD_ID_E_CVI_ID_MPEG4E: _MOD_ID_E = 10;
pub const _MOD_ID_E_CVI_ID_H265E: _MOD_ID_E = 11;
pub const _MOD_ID_E_CVI_ID_JPEGD: _MOD_ID_E = 12;
pub const _MOD_ID_E_CVI_ID_VO: _MOD_ID_E = 13;
pub const _MOD_ID_E_CVI_ID_VI: _MOD_ID_E = 14;
pub const _MOD_ID_E_CVI_ID_DIS: _MOD_ID_E = 15;
pub const _MOD_ID_E_CVI_ID_RC: _MOD_ID_E = 16;
pub const _MOD_ID_E_CVI_ID_AIO: _MOD_ID_E = 17;
pub const _MOD_ID_E_CVI_ID_AI: _MOD_ID_E = 18;
pub const _MOD_ID_E_CVI_ID_AO: _MOD_ID_E = 19;
pub const _MOD_ID_E_CVI_ID_AENC: _MOD_ID_E = 20;
pub const _MOD_ID_E_CVI_ID_ADEC: _MOD_ID_E = 21;
pub const _MOD_ID_E_CVI_ID_AUD: _MOD_ID_E = 22;
pub const _MOD_ID_E_CVI_ID_VPU: _MOD_ID_E = 23;
pub const _MOD_ID_E_CVI_ID_ISP: _MOD_ID_E = 24;
pub const _MOD_ID_E_CVI_ID_IVE: _MOD_ID_E = 25;
pub const _MOD_ID_E_CVI_ID_USER: _MOD_ID_E = 26;
pub const _MOD_ID_E_CVI_ID_PROC: _MOD_ID_E = 27;
pub const _MOD_ID_E_CVI_ID_LOG: _MOD_ID_E = 28;
pub const _MOD_ID_E_CVI_ID_H264D: _MOD_ID_E = 29;
pub const _MOD_ID_E_CVI_ID_GDC: _MOD_ID_E = 30;
pub const _MOD_ID_E_CVI_ID_PHOTO: _MOD_ID_E = 31;
pub const _MOD_ID_E_CVI_ID_FB: _MOD_ID_E = 32;
pub const _MOD_ID_E_CVI_ID_BUTT: _MOD_ID_E = 33;
pub type _MOD_ID_E = ::std::os::raw::c_uint;
pub use self::_MOD_ID_E as MOD_ID_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_CHN_S {
    pub enModId: MOD_ID_E,
    pub s32DevId: CVI_S32,
    pub s32ChnId: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_CHN_S"][::std::mem::size_of::<_MMF_CHN_S>() - 12usize];
    ["Alignment of _MMF_CHN_S"][::std::mem::align_of::<_MMF_CHN_S>() - 4usize];
    ["Offset of field: _MMF_CHN_S::enModId"][::std::mem::offset_of!(_MMF_CHN_S, enModId) - 0usize];
    ["Offset of field: _MMF_CHN_S::s32DevId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32DevId) - 4usize];
    ["Offset of field: _MMF_CHN_S::s32ChnId"]
        [::std::mem::offset_of!(_MMF_CHN_S, s32ChnId) - 8usize];
};
pub type MMF_CHN_S = _MMF_CHN_S;
pub const PAYLOAD_TYPE_E_PT_PCMU: PAYLOAD_TYPE_E = 0;
pub const PAYLOAD_TYPE_E_PT_1016: PAYLOAD_TYPE_E = 1;
pub const PAYLOAD_TYPE_E_PT_G721: PAYLOAD_TYPE_E = 2;
pub const PAYLOAD_TYPE_E_PT_GSM: PAYLOAD_TYPE_E = 3;
pub const PAYLOAD_TYPE_E_PT_G723: PAYLOAD_TYPE_E = 4;
pub const PAYLOAD_TYPE_E_PT_DVI4_8K: PAYLOAD_TYPE_E = 5;
pub const PAYLOAD_TYPE_E_PT_DVI4_16K: PAYLOAD_TYPE_E = 6;
pub const PAYLOAD_TYPE_E_PT_LPC: PAYLOAD_TYPE_E = 7;
pub const PAYLOAD_TYPE_E_PT_PCMA: PAYLOAD_TYPE_E = 8;
pub const PAYLOAD_TYPE_E_PT_G722: PAYLOAD_TYPE_E = 9;
pub const PAYLOAD_TYPE_E_PT_S16BE_STEREO: PAYLOAD_TYPE_E = 10;
pub const PAYLOAD_TYPE_E_PT_S16BE_MONO: PAYLOAD_TYPE_E = 11;
pub const PAYLOAD_TYPE_E_PT_QCELP: PAYLOAD_TYPE_E = 12;
pub const PAYLOAD_TYPE_E_PT_CN: PAYLOAD_TYPE_E = 13;
pub const PAYLOAD_TYPE_E_PT_MPEGAUDIO: PAYLOAD_TYPE_E = 14;
pub const PAYLOAD_TYPE_E_PT_G728: PAYLOAD_TYPE_E = 15;
pub const PAYLOAD_TYPE_E_PT_DVI4_3: PAYLOAD_TYPE_E = 16;
pub const PAYLOAD_TYPE_E_PT_DVI4_4: PAYLOAD_TYPE_E = 17;
pub const PAYLOAD_TYPE_E_PT_G729: PAYLOAD_TYPE_E = 18;
pub const PAYLOAD_TYPE_E_PT_G711A: PAYLOAD_TYPE_E = 19;
pub const PAYLOAD_TYPE_E_PT_G711U: PAYLOAD_TYPE_E = 20;
pub const PAYLOAD_TYPE_E_PT_G726: PAYLOAD_TYPE_E = 21;
pub const PAYLOAD_TYPE_E_PT_G729A: PAYLOAD_TYPE_E = 22;
pub const PAYLOAD_TYPE_E_PT_LPCM: PAYLOAD_TYPE_E = 23;
pub const PAYLOAD_TYPE_E_PT_CelB: PAYLOAD_TYPE_E = 25;
pub const PAYLOAD_TYPE_E_PT_JPEG: PAYLOAD_TYPE_E = 26;
pub const PAYLOAD_TYPE_E_PT_CUSM: PAYLOAD_TYPE_E = 27;
pub const PAYLOAD_TYPE_E_PT_NV: PAYLOAD_TYPE_E = 28;
pub const PAYLOAD_TYPE_E_PT_PICW: PAYLOAD_TYPE_E = 29;
pub const PAYLOAD_TYPE_E_PT_CPV: PAYLOAD_TYPE_E = 30;
pub const PAYLOAD_TYPE_E_PT_H261: PAYLOAD_TYPE_E = 31;
pub const PAYLOAD_TYPE_E_PT_MPEGVIDEO: PAYLOAD_TYPE_E = 32;
pub const PAYLOAD_TYPE_E_PT_MPEG2TS: PAYLOAD_TYPE_E = 33;
pub const PAYLOAD_TYPE_E_PT_H263: PAYLOAD_TYPE_E = 34;
pub const PAYLOAD_TYPE_E_PT_SPEG: PAYLOAD_TYPE_E = 35;
pub const PAYLOAD_TYPE_E_PT_MPEG2VIDEO: PAYLOAD_TYPE_E = 36;
pub const PAYLOAD_TYPE_E_PT_AAC: PAYLOAD_TYPE_E = 37;
pub const PAYLOAD_TYPE_E_PT_WMA9STD: PAYLOAD_TYPE_E = 38;
pub const PAYLOAD_TYPE_E_PT_HEAAC: PAYLOAD_TYPE_E = 39;
pub const PAYLOAD_TYPE_E_PT_PCM_VOICE: PAYLOAD_TYPE_E = 40;
pub const PAYLOAD_TYPE_E_PT_PCM_AUDIO: PAYLOAD_TYPE_E = 41;
pub const PAYLOAD_TYPE_E_PT_MP3: PAYLOAD_TYPE_E = 43;
pub const PAYLOAD_TYPE_E_PT_ADPCMA: PAYLOAD_TYPE_E = 49;
pub const PAYLOAD_TYPE_E_PT_AEC: PAYLOAD_TYPE_E = 50;
pub const PAYLOAD_TYPE_E_PT_X_LD: PAYLOAD_TYPE_E = 95;
pub const PAYLOAD_TYPE_E_PT_H264: PAYLOAD_TYPE_E = 96;
pub const PAYLOAD_TYPE_E_PT_D_GSM_HR: PAYLOAD_TYPE_E = 200;
pub const PAYLOAD_TYPE_E_PT_D_GSM_EFR: PAYLOAD_TYPE_E = 201;
pub const PAYLOAD_TYPE_E_PT_D_L8: PAYLOAD_TYPE_E = 202;
pub const PAYLOAD_TYPE_E_PT_D_RED: PAYLOAD_TYPE_E = 203;
pub const PAYLOAD_TYPE_E_PT_D_VDVI: PAYLOAD_TYPE_E = 204;
pub const PAYLOAD_TYPE_E_PT_D_BT656: PAYLOAD_TYPE_E = 220;
pub const PAYLOAD_TYPE_E_PT_D_H263_1998: PAYLOAD_TYPE_E = 221;
pub const PAYLOAD_TYPE_E_PT_D_MP1S: PAYLOAD_TYPE_E = 222;
pub const PAYLOAD_TYPE_E_PT_D_MP2P: PAYLOAD_TYPE_E = 223;
pub const PAYLOAD_TYPE_E_PT_D_BMPEG: PAYLOAD_TYPE_E = 224;
pub const PAYLOAD_TYPE_E_PT_MP4VIDEO: PAYLOAD_TYPE_E = 230;
pub const PAYLOAD_TYPE_E_PT_MP4AUDIO: PAYLOAD_TYPE_E = 237;
pub const PAYLOAD_TYPE_E_PT_VC1: PAYLOAD_TYPE_E = 238;
pub const PAYLOAD_TYPE_E_PT_JVC_ASF: PAYLOAD_TYPE_E = 255;
pub const PAYLOAD_TYPE_E_PT_D_AVI: PAYLOAD_TYPE_E = 256;
pub const PAYLOAD_TYPE_E_PT_DIVX3: PAYLOAD_TYPE_E = 257;
pub const PAYLOAD_TYPE_E_PT_AVS: PAYLOAD_TYPE_E = 258;
pub const PAYLOAD_TYPE_E_PT_REAL8: PAYLOAD_TYPE_E = 259;
pub const PAYLOAD_TYPE_E_PT_REAL9: PAYLOAD_TYPE_E = 260;
pub const PAYLOAD_TYPE_E_PT_VP6: PAYLOAD_TYPE_E = 261;
pub const PAYLOAD_TYPE_E_PT_VP6F: PAYLOAD_TYPE_E = 262;
pub const PAYLOAD_TYPE_E_PT_VP6A: PAYLOAD_TYPE_E = 263;
pub const PAYLOAD_TYPE_E_PT_SORENSON: PAYLOAD_TYPE_E = 264;
pub const PAYLOAD_TYPE_E_PT_H265: PAYLOAD_TYPE_E = 265;
pub const PAYLOAD_TYPE_E_PT_VP8: PAYLOAD_TYPE_E = 266;
pub const PAYLOAD_TYPE_E_PT_MVC: PAYLOAD_TYPE_E = 267;
pub const PAYLOAD_TYPE_E_PT_PNG: PAYLOAD_TYPE_E = 268;
pub const PAYLOAD_TYPE_E_PT_AMR: PAYLOAD_TYPE_E = 1001;
pub const PAYLOAD_TYPE_E_PT_MJPEG: PAYLOAD_TYPE_E = 1002;
pub const PAYLOAD_TYPE_E_PT_BUTT: PAYLOAD_TYPE_E = 1003;
pub type PAYLOAD_TYPE_E = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MMF_VERSION_S {
    pub version: [::std::os::raw::c_char; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MMF_VERSION_S"][::std::mem::size_of::<_MMF_VERSION_S>() - 128usize];
    ["Alignment of _MMF_VERSION_S"][::std::mem::align_of::<_MMF_VERSION_S>() - 1usize];
    ["Offset of field: _MMF_VERSION_S::version"]
        [::std::mem::offset_of!(_MMF_VERSION_S, version) - 0usize];
};
pub type MMF_VERSION_S = _MMF_VERSION_S;
pub const _OPERATION_MODE_E_OPERATION_MODE_AUTO: _OPERATION_MODE_E = 0;
pub const _OPERATION_MODE_E_OPERATION_MODE_MANUAL: _OPERATION_MODE_E = 1;
pub const _OPERATION_MODE_E_OPERATION_MODE_BUTT: _OPERATION_MODE_E = 2;
pub type _OPERATION_MODE_E = ::std::os::raw::c_uint;
pub use self::_OPERATION_MODE_E as OPERATION_MODE_E;
pub const _ROTATION_E_ROTATION_0: _ROTATION_E = 0;
pub const _ROTATION_E_ROTATION_90: _ROTATION_E = 1;
pub const _ROTATION_E_ROTATION_180: _ROTATION_E = 2;
pub const _ROTATION_E_ROTATION_270: _ROTATION_E = 3;
pub const _ROTATION_E_ROTATION_XY_FLIP: _ROTATION_E = 4;
pub const _ROTATION_E_ROTATION_MAX: _ROTATION_E = 5;
pub type _ROTATION_E = ::std::os::raw::c_uint;
pub use self::_ROTATION_E as ROTATION_E;
pub const _VB_SOURCE_E_VB_SOURCE_COMMON: _VB_SOURCE_E = 0;
pub const _VB_SOURCE_E_VB_SOURCE_MODULE: _VB_SOURCE_E = 1;
pub const _VB_SOURCE_E_VB_SOURCE_PRIVATE: _VB_SOURCE_E = 2;
pub const _VB_SOURCE_E_VB_SOURCE_USER: _VB_SOURCE_E = 3;
pub const _VB_SOURCE_E_VB_SOURCE_BUTT: _VB_SOURCE_E = 4;
pub type _VB_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VB_SOURCE_E as VB_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BORDER_S {
    pub u32TopWidth: CVI_U32,
    pub u32BottomWidth: CVI_U32,
    pub u32LeftWidth: CVI_U32,
    pub u32RightWidth: CVI_U32,
    pub u32Color: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BORDER_S"][::std::mem::size_of::<_BORDER_S>() - 20usize];
    ["Alignment of _BORDER_S"][::std::mem::align_of::<_BORDER_S>() - 4usize];
    ["Offset of field: _BORDER_S::u32TopWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32TopWidth) - 0usize];
    ["Offset of field: _BORDER_S::u32BottomWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32BottomWidth) - 4usize];
    ["Offset of field: _BORDER_S::u32LeftWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32LeftWidth) - 8usize];
    ["Offset of field: _BORDER_S::u32RightWidth"]
        [::std::mem::offset_of!(_BORDER_S, u32RightWidth) - 12usize];
    ["Offset of field: _BORDER_S::u32Color"][::std::mem::offset_of!(_BORDER_S, u32Color) - 16usize];
};
pub type BORDER_S = _BORDER_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINT_S"][::std::mem::size_of::<_POINT_S>() - 8usize];
    ["Alignment of _POINT_S"][::std::mem::align_of::<_POINT_S>() - 4usize];
    ["Offset of field: _POINT_S::s32X"][::std::mem::offset_of!(_POINT_S, s32X) - 0usize];
    ["Offset of field: _POINT_S::s32Y"][::std::mem::offset_of!(_POINT_S, s32Y) - 4usize];
};
pub type POINT_S = _POINT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SIZE_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SIZE_S"][::std::mem::size_of::<_SIZE_S>() - 8usize];
    ["Alignment of _SIZE_S"][::std::mem::align_of::<_SIZE_S>() - 4usize];
    ["Offset of field: _SIZE_S::u32Width"][::std::mem::offset_of!(_SIZE_S, u32Width) - 0usize];
    ["Offset of field: _SIZE_S::u32Height"][::std::mem::offset_of!(_SIZE_S, u32Height) - 4usize];
};
pub type SIZE_S = _SIZE_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RECT_S {
    pub s32X: CVI_S32,
    pub s32Y: CVI_S32,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RECT_S"][::std::mem::size_of::<_RECT_S>() - 16usize];
    ["Alignment of _RECT_S"][::std::mem::align_of::<_RECT_S>() - 4usize];
    ["Offset of field: _RECT_S::s32X"][::std::mem::offset_of!(_RECT_S, s32X) - 0usize];
    ["Offset of field: _RECT_S::s32Y"][::std::mem::offset_of!(_RECT_S, s32Y) - 4usize];
    ["Offset of field: _RECT_S::u32Width"][::std::mem::offset_of!(_RECT_S, u32Width) - 8usize];
    ["Offset of field: _RECT_S::u32Height"][::std::mem::offset_of!(_RECT_S, u32Height) - 12usize];
};
pub type RECT_S = _RECT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_REGION_INFO_S {
    pub u32RegionNum: CVI_U32,
    pub pstRegion: *mut RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_REGION_INFO_S"][::std::mem::size_of::<_VIDEO_REGION_INFO_S>() - 16usize];
    ["Alignment of _VIDEO_REGION_INFO_S"][::std::mem::align_of::<_VIDEO_REGION_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::u32RegionNum"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, u32RegionNum) - 0usize];
    ["Offset of field: _VIDEO_REGION_INFO_S::pstRegion"]
        [::std::mem::offset_of!(_VIDEO_REGION_INFO_S, pstRegion) - 8usize];
};
pub type VIDEO_REGION_INFO_S = _VIDEO_REGION_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub stRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _CROP_INFO_S"][::std::mem::size_of::<_CROP_INFO_S>() - 20usize];
    ["Alignment of _CROP_INFO_S"][::std::mem::align_of::<_CROP_INFO_S>() - 4usize];
    ["Offset of field: _CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _CROP_INFO_S::stRect"]
        [::std::mem::offset_of!(_CROP_INFO_S, stRect) - 4usize];
};
pub type CROP_INFO_S = _CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FRAME_RATE_CTRL_S {
    pub s32SrcFrameRate: CVI_S32,
    pub s32DstFrameRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FRAME_RATE_CTRL_S"][::std::mem::size_of::<_FRAME_RATE_CTRL_S>() - 8usize];
    ["Alignment of _FRAME_RATE_CTRL_S"][::std::mem::align_of::<_FRAME_RATE_CTRL_S>() - 4usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32SrcFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32SrcFrameRate) - 0usize];
    ["Offset of field: _FRAME_RATE_CTRL_S::s32DstFrameRate"]
        [::std::mem::offset_of!(_FRAME_RATE_CTRL_S, s32DstFrameRate) - 4usize];
};
pub type FRAME_RATE_CTRL_S = _FRAME_RATE_CTRL_S;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_NONE: _ASPECT_RATIO_E = 0;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_AUTO: _ASPECT_RATIO_E = 1;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MANUAL: _ASPECT_RATIO_E = 2;
pub const _ASPECT_RATIO_E_ASPECT_RATIO_MAX: _ASPECT_RATIO_E = 3;
pub type _ASPECT_RATIO_E = ::std::os::raw::c_uint;
pub use self::_ASPECT_RATIO_E as ASPECT_RATIO_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ASPECT_RATIO_S {
    pub enMode: ASPECT_RATIO_E,
    pub bEnableBgColor: CVI_BOOL,
    pub u32BgColor: CVI_U32,
    pub stVideoRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ASPECT_RATIO_S"][::std::mem::size_of::<_ASPECT_RATIO_S>() - 28usize];
    ["Alignment of _ASPECT_RATIO_S"][::std::mem::align_of::<_ASPECT_RATIO_S>() - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::enMode"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, enMode) - 0usize];
    ["Offset of field: _ASPECT_RATIO_S::bEnableBgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, bEnableBgColor) - 4usize];
    ["Offset of field: _ASPECT_RATIO_S::u32BgColor"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, u32BgColor) - 8usize];
    ["Offset of field: _ASPECT_RATIO_S::stVideoRect"]
        [::std::mem::offset_of!(_ASPECT_RATIO_S, stVideoRect) - 12usize];
};
pub type ASPECT_RATIO_S = _ASPECT_RATIO_S;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888: _PIXEL_FORMAT_E = 0;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888: _PIXEL_FORMAT_E = 1;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_888_PLANAR: _PIXEL_FORMAT_E = 2;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BGR_888_PLANAR: _PIXEL_FORMAT_E = 3;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_1555: _PIXEL_FORMAT_E = 4;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_4444: _PIXEL_FORMAT_E = 5;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_ARGB_8888: _PIXEL_FORMAT_E = 6;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_8BPP: _PIXEL_FORMAT_E = 7;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_10BPP: _PIXEL_FORMAT_E = 8;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_12BPP: _PIXEL_FORMAT_E = 9;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_14BPP: _PIXEL_FORMAT_E = 10;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_RGB_BAYER_16BPP: _PIXEL_FORMAT_E = 11;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_422: _PIXEL_FORMAT_E = 12;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_420: _PIXEL_FORMAT_E = 13;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_PLANAR_444: _PIXEL_FORMAT_E = 14;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUV_400: _PIXEL_FORMAT_E = 15;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888: _PIXEL_FORMAT_E = 16;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_HSV_888_PLANAR: _PIXEL_FORMAT_E = 17;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV12: _PIXEL_FORMAT_E = 18;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV21: _PIXEL_FORMAT_E = 19;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV16: _PIXEL_FORMAT_E = 20;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_NV61: _PIXEL_FORMAT_E = 21;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YUYV: _PIXEL_FORMAT_E = 22;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UYVY: _PIXEL_FORMAT_E = 23;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_YVYU: _PIXEL_FORMAT_E = 24;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_VYUY: _PIXEL_FORMAT_E = 25;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C1: _PIXEL_FORMAT_E = 32;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_FP32_C3_PLANAR: _PIXEL_FORMAT_E = 33;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C1: _PIXEL_FORMAT_E = 34;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT32_C3_PLANAR: _PIXEL_FORMAT_E = 35;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C1: _PIXEL_FORMAT_E = 36;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT32_C3_PLANAR: _PIXEL_FORMAT_E = 37;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C1: _PIXEL_FORMAT_E = 38;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_BF16_C3_PLANAR: _PIXEL_FORMAT_E = 39;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C1: _PIXEL_FORMAT_E = 40;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT16_C3_PLANAR: _PIXEL_FORMAT_E = 41;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C1: _PIXEL_FORMAT_E = 42;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT16_C3_PLANAR: _PIXEL_FORMAT_E = 43;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C1: _PIXEL_FORMAT_E = 44;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_INT8_C3_PLANAR: _PIXEL_FORMAT_E = 45;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C1: _PIXEL_FORMAT_E = 46;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_UINT8_C3_PLANAR: _PIXEL_FORMAT_E = 47;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_8BIT_MODE: _PIXEL_FORMAT_E = 48;
pub const _PIXEL_FORMAT_E_PIXEL_FORMAT_MAX: _PIXEL_FORMAT_E = 49;
pub type _PIXEL_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_PIXEL_FORMAT_E as PIXEL_FORMAT_E;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_LINEAR: _VIDEO_FORMAT_E = 0;
pub const _VIDEO_FORMAT_E_VIDEO_FORMAT_MAX: _VIDEO_FORMAT_E = 1;
pub type _VIDEO_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_FORMAT_E as VIDEO_FORMAT_E;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_NONE: _COMPRESS_MODE_E = 0;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_TILE: _COMPRESS_MODE_E = 1;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_LINE: _COMPRESS_MODE_E = 2;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_FRAME: _COMPRESS_MODE_E = 3;
pub const _COMPRESS_MODE_E_COMPRESS_MODE_BUTT: _COMPRESS_MODE_E = 4;
pub type _COMPRESS_MODE_E = ::std::os::raw::c_uint;
pub use self::_COMPRESS_MODE_E as COMPRESS_MODE_E;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_BG: _BAYER_FORMAT_E = 0;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GB: _BAYER_FORMAT_E = 1;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_GR: _BAYER_FORMAT_E = 2;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_RG: _BAYER_FORMAT_E = 3;
pub const _BAYER_FORMAT_E_BAYER_FORMAT_MAX: _BAYER_FORMAT_E = 4;
pub type _BAYER_FORMAT_E = ::std::os::raw::c_uint;
pub use self::_BAYER_FORMAT_E as BAYER_FORMAT_E;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PREVIEW: _VIDEO_DISPLAY_MODE_E = 0;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_PLAYBACK: _VIDEO_DISPLAY_MODE_E = 1;
pub const _VIDEO_DISPLAY_MODE_E_VIDEO_DISPLAY_MODE_MAX: _VIDEO_DISPLAY_MODE_E = 2;
pub type _VIDEO_DISPLAY_MODE_E = ::std::os::raw::c_uint;
pub use self::_VIDEO_DISPLAY_MODE_E as VIDEO_DISPLAY_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_FRAME_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32Again: CVI_U32,
    pub u32Dgain: CVI_U32,
    pub au32Ratio: [CVI_U32; 3usize],
    pub u32IspNrStrength: CVI_U32,
    pub u32FNumber: CVI_U32,
    pub u32SensorID: CVI_U32,
    pub u32SensorMode: CVI_U32,
    pub u32HmaxTimes: CVI_U32,
    pub u32VcNum: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_FRAME_INFO_S"][::std::mem::size_of::<_ISP_FRAME_INFO_S>() - 56usize];
    ["Alignment of _ISP_FRAME_INFO_S"][::std::mem::align_of::<_ISP_FRAME_INFO_S>() - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32ExposureTime) - 4usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspDgain) - 8usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Again"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Again) - 12usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32Dgain"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32Dgain) - 16usize];
    ["Offset of field: _ISP_FRAME_INFO_S::au32Ratio"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, au32Ratio) - 20usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32IspNrStrength"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32IspNrStrength) - 32usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32FNumber"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32FNumber) - 36usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorID"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorID) - 40usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32SensorMode"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32SensorMode) - 44usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32HmaxTimes"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32HmaxTimes) - 48usize];
    ["Offset of field: _ISP_FRAME_INFO_S::u32VcNum"]
        [::std::mem::offset_of!(_ISP_FRAME_INFO_S, u32VcNum) - 52usize];
};
pub type ISP_FRAME_INFO_S = _ISP_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_HDR_INFO_S {
    pub u32ColorTemp: CVI_U32,
    pub au16CCM: [CVI_U16; 9usize],
    pub u8Saturation: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_HDR_INFO_S"][::std::mem::size_of::<_ISP_HDR_INFO_S>() - 24usize];
    ["Alignment of _ISP_HDR_INFO_S"][::std::mem::align_of::<_ISP_HDR_INFO_S>() - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u32ColorTemp"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u32ColorTemp) - 0usize];
    ["Offset of field: _ISP_HDR_INFO_S::au16CCM"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, au16CCM) - 4usize];
    ["Offset of field: _ISP_HDR_INFO_S::u8Saturation"]
        [::std::mem::offset_of!(_ISP_HDR_INFO_S, u8Saturation) - 22usize];
};
pub type ISP_HDR_INFO_S = _ISP_HDR_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_ATTACH_INFO_S {
    pub stIspHdr: ISP_HDR_INFO_S,
    pub u32ISO: CVI_U32,
    pub u8SnsWDRMode: *mut CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_ATTACH_INFO_S"][::std::mem::size_of::<_ISP_ATTACH_INFO_S>() - 40usize];
    ["Alignment of _ISP_ATTACH_INFO_S"][::std::mem::align_of::<_ISP_ATTACH_INFO_S>() - 8usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::stIspHdr"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, stIspHdr) - 0usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u32ISO) - 24usize];
    ["Offset of field: _ISP_ATTACH_INFO_S::u8SnsWDRMode"]
        [::std::mem::offset_of!(_ISP_ATTACH_INFO_S, u8SnsWDRMode) - 32usize];
};
pub type ISP_ATTACH_INFO_S = _ISP_ATTACH_INFO_S;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_FLASH: _FRAME_FLAG_E = 1;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_CUR: _FRAME_FLAG_E = 2;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_REF: _FRAME_FLAG_E = 4;
pub const _FRAME_FLAG_E_FRAME_FLAG_SNAP_END: _FRAME_FLAG_E = -2147483648;
pub const _FRAME_FLAG_E_FRAME_FLAG_MAX: _FRAME_FLAG_E = -2147483647;
pub type _FRAME_FLAG_E = ::std::os::raw::c_int;
pub use self::_FRAME_FLAG_E as FRAME_FLAG_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_CONFIG_INFO_S {
    pub u32ISO: CVI_U32,
    pub u32IspDgain: CVI_U32,
    pub u32ExposureTime: CVI_U32,
    pub au32WhiteBalanceGain: [CVI_U32; 4usize],
    pub u32ColorTemperature: CVI_U32,
    pub au16CapCCM: [CVI_U16; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_CONFIG_INFO_S"][::std::mem::size_of::<_ISP_CONFIG_INFO_S>() - 52usize];
    ["Alignment of _ISP_CONFIG_INFO_S"][::std::mem::align_of::<_ISP_CONFIG_INFO_S>() - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ISO"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ISO) - 0usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32IspDgain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32IspDgain) - 4usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ExposureTime"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ExposureTime) - 8usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au32WhiteBalanceGain"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au32WhiteBalanceGain) - 12usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::u32ColorTemperature"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, u32ColorTemperature) - 28usize];
    ["Offset of field: _ISP_CONFIG_INFO_S::au16CapCCM"]
        [::std::mem::offset_of!(_ISP_CONFIG_INFO_S, au16CapCCM) - 32usize];
};
pub type ISP_CONFIG_INFO_S = _ISP_CONFIG_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_SUPPLEMENT_S {
    pub u64JpegDCFPhyAddr: CVI_U64,
    pub u64IspInfoPhyAddr: CVI_U64,
    pub u64LowDelayPhyAddr: CVI_U64,
    pub u64FrameDNGPhyAddr: CVI_U64,
    pub pJpegDCFVirAddr: *mut CVI_VOID,
    pub pIspInfoVirAddr: *mut CVI_VOID,
    pub pLowDelayVirAddr: *mut CVI_VOID,
    pub pFrameDNGVirAddr: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_SUPPLEMENT_S"][::std::mem::size_of::<_VIDEO_SUPPLEMENT_S>() - 64usize];
    ["Alignment of _VIDEO_SUPPLEMENT_S"][::std::mem::align_of::<_VIDEO_SUPPLEMENT_S>() - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64JpegDCFPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64JpegDCFPhyAddr) - 0usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64IspInfoPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64IspInfoPhyAddr) - 8usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64LowDelayPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64LowDelayPhyAddr) - 16usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::u64FrameDNGPhyAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, u64FrameDNGPhyAddr) - 24usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pJpegDCFVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pJpegDCFVirAddr) - 32usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pIspInfoVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pIspInfoVirAddr) - 40usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pLowDelayVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pLowDelayVirAddr) - 48usize];
    ["Offset of field: _VIDEO_SUPPLEMENT_S::pFrameDNGVirAddr"]
        [::std::mem::offset_of!(_VIDEO_SUPPLEMENT_S, pFrameDNGVirAddr) - 56usize];
};
pub type VIDEO_SUPPLEMENT_S = _VIDEO_SUPPLEMENT_S;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT601: _COLOR_GAMUT_E = 0;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT709: _COLOR_GAMUT_E = 1;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_BT2020: _COLOR_GAMUT_E = 2;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_USER: _COLOR_GAMUT_E = 3;
pub const _COLOR_GAMUT_E_COLOR_GAMUT_MAX: _COLOR_GAMUT_E = 4;
pub type _COLOR_GAMUT_E = ::std::os::raw::c_uint;
pub use self::_COLOR_GAMUT_E as COLOR_GAMUT_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ISP_COLORGAMMUT_INFO_S {
    pub enColorGamut: COLOR_GAMUT_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ISP_COLORGAMMUT_INFO_S"][::std::mem::size_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Alignment of _ISP_COLORGAMMUT_INFO_S"]
        [::std::mem::align_of::<_ISP_COLORGAMMUT_INFO_S>() - 4usize];
    ["Offset of field: _ISP_COLORGAMMUT_INFO_S::enColorGamut"]
        [::std::mem::offset_of!(_ISP_COLORGAMMUT_INFO_S, enColorGamut) - 0usize];
};
pub type ISP_COLORGAMMUT_INFO_S = _ISP_COLORGAMMUT_INFO_S;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR8: _DYNAMIC_RANGE_E = 0;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SDR10: _DYNAMIC_RANGE_E = 1;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HDR10: _DYNAMIC_RANGE_E = 2;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_HLG: _DYNAMIC_RANGE_E = 3;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_SLF: _DYNAMIC_RANGE_E = 4;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_XDR: _DYNAMIC_RANGE_E = 5;
pub const _DYNAMIC_RANGE_E_DYNAMIC_RANGE_MAX: _DYNAMIC_RANGE_E = 6;
pub type _DYNAMIC_RANGE_E = ::std::os::raw::c_uint;
pub use self::_DYNAMIC_RANGE_E as DYNAMIC_RANGE_E;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_8: _DATA_BITWIDTH_E = 0;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_10: _DATA_BITWIDTH_E = 1;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_12: _DATA_BITWIDTH_E = 2;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_14: _DATA_BITWIDTH_E = 3;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_16: _DATA_BITWIDTH_E = 4;
pub const _DATA_BITWIDTH_E_DATA_BITWIDTH_MAX: _DATA_BITWIDTH_E = 5;
pub type _DATA_BITWIDTH_E = ::std::os::raw::c_uint;
pub use self::_DATA_BITWIDTH_E as DATA_BITWIDTH_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_S {
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enColorGamut: COLOR_GAMUT_E,
    pub u32Stride: [CVI_U32; 3usize],
    pub u64PhyAddr: [CVI_U64; 3usize],
    pub pu8VirAddr: [*mut CVI_U8; 3usize],
    pub u32Length: [CVI_U32; 3usize],
    pub s16OffsetTop: CVI_S16,
    pub s16OffsetBottom: CVI_S16,
    pub s16OffsetLeft: CVI_S16,
    pub s16OffsetRight: CVI_S16,
    pub u32TimeRef: CVI_U32,
    pub u64PTS: CVI_U64,
    pub pPrivateData: *mut ::std::os::raw::c_void,
    pub u32FrameFlag: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_S"][::std::mem::size_of::<_VIDEO_FRAME_S>() - 144usize];
    ["Alignment of _VIDEO_FRAME_S"][::std::mem::align_of::<_VIDEO_FRAME_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Width"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Width) - 0usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Height"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Height) - 4usize];
    ["Offset of field: _VIDEO_FRAME_S::enPixelFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enPixelFormat) - 8usize];
    ["Offset of field: _VIDEO_FRAME_S::enBayerFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enBayerFormat) - 12usize];
    ["Offset of field: _VIDEO_FRAME_S::enVideoFormat"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enVideoFormat) - 16usize];
    ["Offset of field: _VIDEO_FRAME_S::enCompressMode"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enCompressMode) - 20usize];
    ["Offset of field: _VIDEO_FRAME_S::enDynamicRange"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enDynamicRange) - 24usize];
    ["Offset of field: _VIDEO_FRAME_S::enColorGamut"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, enColorGamut) - 28usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Stride"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Stride) - 32usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PhyAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PhyAddr) - 48usize];
    ["Offset of field: _VIDEO_FRAME_S::pu8VirAddr"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pu8VirAddr) - 72usize];
    ["Offset of field: _VIDEO_FRAME_S::u32Length"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32Length) - 96usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetTop"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetTop) - 108usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetBottom"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetBottom) - 110usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetLeft"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetLeft) - 112usize];
    ["Offset of field: _VIDEO_FRAME_S::s16OffsetRight"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, s16OffsetRight) - 114usize];
    ["Offset of field: _VIDEO_FRAME_S::u32TimeRef"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32TimeRef) - 116usize];
    ["Offset of field: _VIDEO_FRAME_S::u64PTS"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u64PTS) - 120usize];
    ["Offset of field: _VIDEO_FRAME_S::pPrivateData"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, pPrivateData) - 128usize];
    ["Offset of field: _VIDEO_FRAME_S::u32FrameFlag"]
        [::std::mem::offset_of!(_VIDEO_FRAME_S, u32FrameFlag) - 136usize];
};
pub type VIDEO_FRAME_S = _VIDEO_FRAME_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VIDEO_FRAME_INFO_S {
    pub stVFrame: VIDEO_FRAME_S,
    pub u32PoolId: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VIDEO_FRAME_INFO_S"][::std::mem::size_of::<_VIDEO_FRAME_INFO_S>() - 152usize];
    ["Alignment of _VIDEO_FRAME_INFO_S"][::std::mem::align_of::<_VIDEO_FRAME_INFO_S>() - 8usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::stVFrame"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, stVFrame) - 0usize];
    ["Offset of field: _VIDEO_FRAME_INFO_S::u32PoolId"]
        [::std::mem::offset_of!(_VIDEO_FRAME_INFO_S, u32PoolId) - 144usize];
};
pub type VIDEO_FRAME_INFO_S = _VIDEO_FRAME_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CAL_CONFIG_S {
    pub u32VBSize: CVI_U32,
    pub u32MainStride: CVI_U32,
    pub u32CStride: CVI_U32,
    pub u32MainSize: CVI_U32,
    pub u32MainYSize: CVI_U32,
    pub u32MainCSize: CVI_U32,
    pub u16AddrAlign: CVI_U16,
    pub plane_num: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CAL_CONFIG_S"][::std::mem::size_of::<_VB_CAL_CONFIG_S>() - 28usize];
    ["Alignment of _VB_CAL_CONFIG_S"][::std::mem::align_of::<_VB_CAL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32VBSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32VBSize) - 0usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainStride) - 4usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32CStride"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32CStride) - 8usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainSize) - 12usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainYSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainYSize) - 16usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u32MainCSize"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u32MainCSize) - 20usize];
    ["Offset of field: _VB_CAL_CONFIG_S::u16AddrAlign"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, u16AddrAlign) - 24usize];
    ["Offset of field: _VB_CAL_CONFIG_S::plane_num"]
        [::std::mem::offset_of!(_VB_CAL_CONFIG_S, plane_num) - 26usize];
};
pub type VB_CAL_CONFIG_S = _VB_CAL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _BITMAP_S {
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Width: CVI_U32,
    pub u32Height: CVI_U32,
    pub pData: *mut CVI_VOID,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _BITMAP_S"][::std::mem::size_of::<_BITMAP_S>() - 24usize];
    ["Alignment of _BITMAP_S"][::std::mem::align_of::<_BITMAP_S>() - 8usize];
    ["Offset of field: _BITMAP_S::enPixelFormat"]
        [::std::mem::offset_of!(_BITMAP_S, enPixelFormat) - 0usize];
    ["Offset of field: _BITMAP_S::u32Width"][::std::mem::offset_of!(_BITMAP_S, u32Width) - 4usize];
    ["Offset of field: _BITMAP_S::u32Height"]
        [::std::mem::offset_of!(_BITMAP_S, u32Height) - 8usize];
    ["Offset of field: _BITMAP_S::pData"][::std::mem::offset_of!(_BITMAP_S, pData) - 16usize];
};
pub type BITMAP_S = _BITMAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDC_ATTR_S {
    pub bAspect: CVI_BOOL,
    pub s32XRatio: CVI_S32,
    pub s32YRatio: CVI_S32,
    pub s32XYRatio: CVI_S32,
    pub s32CenterXOffset: CVI_S32,
    pub s32CenterYOffset: CVI_S32,
    pub s32DistortionRatio: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LDC_ATTR_S"][::std::mem::size_of::<_LDC_ATTR_S>() - 28usize];
    ["Alignment of _LDC_ATTR_S"][::std::mem::align_of::<_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _LDC_ATTR_S::bAspect"]
        [::std::mem::offset_of!(_LDC_ATTR_S, bAspect) - 0usize];
    ["Offset of field: _LDC_ATTR_S::s32XRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XRatio) - 4usize];
    ["Offset of field: _LDC_ATTR_S::s32YRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32YRatio) - 8usize];
    ["Offset of field: _LDC_ATTR_S::s32XYRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32XYRatio) - 12usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterXOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterXOffset) - 16usize];
    ["Offset of field: _LDC_ATTR_S::s32CenterYOffset"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32CenterYOffset) - 20usize];
    ["Offset of field: _LDC_ATTR_S::s32DistortionRatio"]
        [::std::mem::offset_of!(_LDC_ATTR_S, s32DistortionRatio) - 24usize];
};
pub type LDC_ATTR_S = _LDC_ATTR_S;
pub const _WDR_MODE_E_WDR_MODE_NONE: _WDR_MODE_E = 0;
pub const _WDR_MODE_E_WDR_MODE_BUILT_IN: _WDR_MODE_E = 1;
pub const _WDR_MODE_E_WDR_MODE_QUDRA: _WDR_MODE_E = 2;
pub const _WDR_MODE_E_WDR_MODE_2To1_LINE: _WDR_MODE_E = 3;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME: _WDR_MODE_E = 4;
pub const _WDR_MODE_E_WDR_MODE_2To1_FRAME_FULL_RATE: _WDR_MODE_E = 5;
pub const _WDR_MODE_E_WDR_MODE_3To1_LINE: _WDR_MODE_E = 6;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME: _WDR_MODE_E = 7;
pub const _WDR_MODE_E_WDR_MODE_3To1_FRAME_FULL_RATE: _WDR_MODE_E = 8;
pub const _WDR_MODE_E_WDR_MODE_4To1_LINE: _WDR_MODE_E = 9;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME: _WDR_MODE_E = 10;
pub const _WDR_MODE_E_WDR_MODE_4To1_FRAME_FULL_RATE: _WDR_MODE_E = 11;
pub const _WDR_MODE_E_WDR_MODE_MAX: _WDR_MODE_E = 12;
pub type _WDR_MODE_E = ::std::os::raw::c_uint;
pub use self::_WDR_MODE_E as WDR_MODE_E;
pub const _PROC_AMP_E_PROC_AMP_BRIGHTNESS: _PROC_AMP_E = 0;
pub const _PROC_AMP_E_PROC_AMP_CONTRAST: _PROC_AMP_E = 1;
pub const _PROC_AMP_E_PROC_AMP_SATURATION: _PROC_AMP_E = 2;
pub const _PROC_AMP_E_PROC_AMP_HUE: _PROC_AMP_E = 3;
pub const _PROC_AMP_E_PROC_AMP_MAX: _PROC_AMP_E = 4;
pub type _PROC_AMP_E = ::std::os::raw::c_uint;
pub use self::_PROC_AMP_E as PROC_AMP_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PROC_AMP_CTRL_S {
    pub minimum: CVI_S32,
    pub maximum: CVI_S32,
    pub step: CVI_S32,
    pub default_value: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _PROC_AMP_CTRL_S"][::std::mem::size_of::<_PROC_AMP_CTRL_S>() - 16usize];
    ["Alignment of _PROC_AMP_CTRL_S"][::std::mem::align_of::<_PROC_AMP_CTRL_S>() - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::minimum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, minimum) - 0usize];
    ["Offset of field: _PROC_AMP_CTRL_S::maximum"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, maximum) - 4usize];
    ["Offset of field: _PROC_AMP_CTRL_S::step"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, step) - 8usize];
    ["Offset of field: _PROC_AMP_CTRL_S::default_value"]
        [::std::mem::offset_of!(_PROC_AMP_CTRL_S, default_value) - 12usize];
};
pub type PROC_AMP_CTRL_S = _PROC_AMP_CTRL_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VCODEC_PERF_FPS_S {
    pub u32InFPS: CVI_U32,
    pub u32OutFPS: CVI_U32,
    pub u64HwTime: CVI_U64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VCODEC_PERF_FPS_S"][::std::mem::size_of::<_VCODEC_PERF_FPS_S>() - 16usize];
    ["Alignment of _VCODEC_PERF_FPS_S"][::std::mem::align_of::<_VCODEC_PERF_FPS_S>() - 8usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32InFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32InFPS) - 0usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u32OutFPS"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u32OutFPS) - 4usize];
    ["Offset of field: _VCODEC_PERF_FPS_S::u64HwTime"]
        [::std::mem::offset_of!(_VCODEC_PERF_FPS_S, u64HwTime) - 8usize];
};
pub type VCODEC_PERF_FPS_S = _VCODEC_PERF_FPS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_LOW_DELAY_INFO_S {
    pub bEnable: CVI_BOOL,
    pub u32LineCnt: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_LOW_DELAY_INFO_S"][::std::mem::size_of::<_VI_LOW_DELAY_INFO_S>() - 8usize];
    ["Alignment of _VI_LOW_DELAY_INFO_S"][::std::mem::align_of::<_VI_LOW_DELAY_INFO_S>() - 4usize];
    ["Offset of field: _VI_LOW_DELAY_INFO_S::bEnable"]
        [::std::mem::offset_of!(_VI_LOW_DELAY_INFO_S, bEnable) - 0usize];
    ["Offset of field: _VI_LOW_DELAY_INFO_S::u32LineCnt"]
        [::std::mem::offset_of!(_VI_LOW_DELAY_INFO_S, u32LineCnt) - 4usize];
};
pub type VI_LOW_DELAY_INFO_S = _VI_LOW_DELAY_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CMP_PARAM_S {
    pub au8CmpParam: [CVI_U8; 152usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CMP_PARAM_S"][::std::mem::size_of::<_VI_CMP_PARAM_S>() - 152usize];
    ["Alignment of _VI_CMP_PARAM_S"][::std::mem::align_of::<_VI_CMP_PARAM_S>() - 1usize];
    ["Offset of field: _VI_CMP_PARAM_S::au8CmpParam"]
        [::std::mem::offset_of!(_VI_CMP_PARAM_S, au8CmpParam) - 0usize];
};
pub type VI_CMP_PARAM_S = _VI_CMP_PARAM_S;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_PIC: _VI_USERPIC_MODE_E = 0;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_BGC: _VI_USERPIC_MODE_E = 1;
pub const _VI_USERPIC_MODE_E_VI_USERPIC_MODE_BUTT: _VI_USERPIC_MODE_E = 2;
pub type _VI_USERPIC_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_USERPIC_MODE_E as VI_USERPIC_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_USERPIC_BGC_S {
    pub u32BgColor: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_BGC_S"][::std::mem::size_of::<_VI_USERPIC_BGC_S>() - 4usize];
    ["Alignment of _VI_USERPIC_BGC_S"][::std::mem::align_of::<_VI_USERPIC_BGC_S>() - 4usize];
    ["Offset of field: _VI_USERPIC_BGC_S::u32BgColor"]
        [::std::mem::offset_of!(_VI_USERPIC_BGC_S, u32BgColor) - 0usize];
};
pub type VI_USERPIC_BGC_S = _VI_USERPIC_BGC_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VI_USERPIC_ATTR_S {
    pub enUsrPicMode: VI_USERPIC_MODE_E,
    pub unUsrPic: _VI_USERPIC_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VI_USERPIC_ATTR_S__bindgen_ty_1 {
    pub stUsrPicFrm: VIDEO_FRAME_INFO_S,
    pub stUsrPicBg: VI_USERPIC_BGC_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VI_USERPIC_ATTR_S__bindgen_ty_1>() - 152usize];
    ["Alignment of _VI_USERPIC_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VI_USERPIC_ATTR_S__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VI_USERPIC_ATTR_S__bindgen_ty_1::stUsrPicFrm"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S__bindgen_ty_1, stUsrPicFrm) - 0usize];
    ["Offset of field: _VI_USERPIC_ATTR_S__bindgen_ty_1::stUsrPicBg"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S__bindgen_ty_1, stUsrPicBg) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_USERPIC_ATTR_S"][::std::mem::size_of::<_VI_USERPIC_ATTR_S>() - 160usize];
    ["Alignment of _VI_USERPIC_ATTR_S"][::std::mem::align_of::<_VI_USERPIC_ATTR_S>() - 8usize];
    ["Offset of field: _VI_USERPIC_ATTR_S::enUsrPicMode"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S, enUsrPicMode) - 0usize];
    ["Offset of field: _VI_USERPIC_ATTR_S::unUsrPic"]
        [::std::mem::offset_of!(_VI_USERPIC_ATTR_S, unUsrPic) - 8usize];
};
pub type VI_USERPIC_ATTR_S = _VI_USERPIC_ATTR_S;
pub const _VI_INTF_MODE_E_VI_MODE_BT656: _VI_INTF_MODE_E = 0;
pub const _VI_INTF_MODE_E_VI_MODE_BT601: _VI_INTF_MODE_E = 1;
pub const _VI_INTF_MODE_E_VI_MODE_DIGITAL_CAMERA: _VI_INTF_MODE_E = 2;
pub const _VI_INTF_MODE_E_VI_MODE_BT1120_STANDARD: _VI_INTF_MODE_E = 3;
pub const _VI_INTF_MODE_E_VI_MODE_BT1120_INTERLEAVED: _VI_INTF_MODE_E = 4;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI: _VI_INTF_MODE_E = 5;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV420_NORMAL: _VI_INTF_MODE_E = 6;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV420_LEGACY: _VI_INTF_MODE_E = 7;
pub const _VI_INTF_MODE_E_VI_MODE_MIPI_YUV422: _VI_INTF_MODE_E = 8;
pub const _VI_INTF_MODE_E_VI_MODE_LVDS: _VI_INTF_MODE_E = 9;
pub const _VI_INTF_MODE_E_VI_MODE_HISPI: _VI_INTF_MODE_E = 10;
pub const _VI_INTF_MODE_E_VI_MODE_SLVS: _VI_INTF_MODE_E = 11;
pub const _VI_INTF_MODE_E_VI_MODE_BUTT: _VI_INTF_MODE_E = 12;
pub type _VI_INTF_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_INTF_MODE_E as VI_INTF_MODE_E;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BT656: _VI_INPUT_MODE_E = 0;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BT601: _VI_INPUT_MODE_E = 1;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_DIGITAL_CAMERA: _VI_INPUT_MODE_E = 2;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_INTERLEAVED: _VI_INPUT_MODE_E = 3;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_MIPI: _VI_INPUT_MODE_E = 4;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_LVDS: _VI_INPUT_MODE_E = 5;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_HISPI: _VI_INPUT_MODE_E = 6;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_SLVS: _VI_INPUT_MODE_E = 7;
pub const _VI_INPUT_MODE_E_VI_INPUT_MODE_BUTT: _VI_INPUT_MODE_E = 8;
pub type _VI_INPUT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_INPUT_MODE_E as VI_INPUT_MODE_E;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_1Multiplex: _VI_WORK_MODE_E = 0;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_2Multiplex: _VI_WORK_MODE_E = 1;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_3Multiplex: _VI_WORK_MODE_E = 2;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_4Multiplex: _VI_WORK_MODE_E = 3;
pub const _VI_WORK_MODE_E_VI_WORK_MODE_BUTT: _VI_WORK_MODE_E = 4;
pub type _VI_WORK_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_WORK_MODE_E as VI_WORK_MODE_E;
pub const _VI_SCAN_MODE_E_VI_SCAN_INTERLACED: _VI_SCAN_MODE_E = 0;
pub const _VI_SCAN_MODE_E_VI_SCAN_PROGRESSIVE: _VI_SCAN_MODE_E = 1;
pub const _VI_SCAN_MODE_E_VI_SCAN_BUTT: _VI_SCAN_MODE_E = 2;
pub type _VI_SCAN_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_SCAN_MODE_E as VI_SCAN_MODE_E;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VUVU: _VI_YUV_DATA_SEQ_E = 0;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UVUV: _VI_YUV_DATA_SEQ_E = 1;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_UYVY: _VI_YUV_DATA_SEQ_E = 2;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_VYUY: _VI_YUV_DATA_SEQ_E = 3;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YUYV: _VI_YUV_DATA_SEQ_E = 4;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_YVYU: _VI_YUV_DATA_SEQ_E = 5;
pub const _VI_YUV_DATA_SEQ_E_VI_DATA_SEQ_BUTT: _VI_YUV_DATA_SEQ_E = 6;
pub type _VI_YUV_DATA_SEQ_E = ::std::os::raw::c_uint;
pub use self::_VI_YUV_DATA_SEQ_E as VI_YUV_DATA_SEQ_E;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_SINGLE_UP: _VI_CLK_EDGE_E = 0;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_SINGLE_DOWN: _VI_CLK_EDGE_E = 1;
pub const _VI_CLK_EDGE_E_VI_CLK_EDGE_BUTT: _VI_CLK_EDGE_E = 2;
pub type _VI_CLK_EDGE_E = ::std::os::raw::c_uint;
pub use self::_VI_CLK_EDGE_E as VI_CLK_EDGE_E;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_SINGLE: _VI_COMPONENT_MODE_E = 0;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_DOUBLE: _VI_COMPONENT_MODE_E = 1;
pub const _VI_COMPONENT_MODE_E_VI_COMPONENT_MODE_BUTT: _VI_COMPONENT_MODE_E = 2;
pub type _VI_COMPONENT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_COMPONENT_MODE_E as VI_COMPONENT_MODE_E;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_COMPOSITE: _VI_COMBINE_MODE_E = 0;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_SEPARATE: _VI_COMBINE_MODE_E = 1;
pub const _VI_COMBINE_MODE_E_VI_COMBINE_BUTT: _VI_COMBINE_MODE_E = 2;
pub type _VI_COMBINE_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_COMBINE_MODE_E as VI_COMBINE_MODE_E;
pub const _VI_VSYNC_E_VI_VSYNC_FIELD: _VI_VSYNC_E = 0;
pub const _VI_VSYNC_E_VI_VSYNC_PULSE: _VI_VSYNC_E = 1;
pub const _VI_VSYNC_E_VI_VSYNC_BUTT: _VI_VSYNC_E = 2;
pub type _VI_VSYNC_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_E as VI_VSYNC_E;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_HIGH: _VI_VSYNC_NEG_E = 0;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_LOW: _VI_VSYNC_NEG_E = 1;
pub const _VI_VSYNC_NEG_E_VI_VSYNC_NEG_BUTT: _VI_VSYNC_NEG_E = 2;
pub type _VI_VSYNC_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_NEG_E as VI_VSYNC_NEG_E;
pub const _VI_HSYNC_E_VI_HSYNC_VALID_SINGNAL: _VI_HSYNC_E = 0;
pub const _VI_HSYNC_E_VI_HSYNC_PULSE: _VI_HSYNC_E = 1;
pub const _VI_HSYNC_E_VI_HSYNC_BUTT: _VI_HSYNC_E = 2;
pub type _VI_HSYNC_E = ::std::os::raw::c_uint;
pub use self::_VI_HSYNC_E as VI_HSYNC_E;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_HIGH: _VI_HSYNC_NEG_E = 0;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_LOW: _VI_HSYNC_NEG_E = 1;
pub const _VI_HSYNC_NEG_E_VI_HSYNC_NEG_BUTT: _VI_HSYNC_NEG_E = 2;
pub type _VI_HSYNC_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_HSYNC_NEG_E as VI_HSYNC_NEG_E;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_NORM_PULSE: _VI_VSYNC_VALID_E = 0;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_VALID_SIGNAL: _VI_VSYNC_VALID_E = 1;
pub const _VI_VSYNC_VALID_E_VI_VSYNC_VALID_BUTT: _VI_VSYNC_VALID_E = 2;
pub type _VI_VSYNC_VALID_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_VALID_E as VI_VSYNC_VALID_E;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_HIGH: _VI_VSYNC_VALID_NEG_E = 0;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_LOW: _VI_VSYNC_VALID_NEG_E = 1;
pub const _VI_VSYNC_VALID_NEG_E_VI_VSYNC_VALID_NEG_BUTT: _VI_VSYNC_VALID_NEG_E = 2;
pub type _VI_VSYNC_VALID_NEG_E = ::std::os::raw::c_uint;
pub use self::_VI_VSYNC_VALID_NEG_E as VI_VSYNC_VALID_NEG_E;
pub const _VI_STATE_VI_RUNNING: _VI_STATE = 0;
pub const _VI_STATE_VI_SUSPEND: _VI_STATE = 1;
pub const _VI_STATE_VI_MAX: _VI_STATE = 2;
pub type _VI_STATE = ::std::os::raw::c_uint;
pub use self::_VI_STATE as VI_STATE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_TIMING_BLANK_S {
    pub u32HsyncHfb: CVI_U32,
    pub u32HsyncAct: CVI_U32,
    pub u32HsyncHbb: CVI_U32,
    pub u32VsyncVfb: CVI_U32,
    pub u32VsyncVact: CVI_U32,
    pub u32VsyncVbb: CVI_U32,
    pub u32VsyncVbfb: CVI_U32,
    pub u32VsyncVbact: CVI_U32,
    pub u32VsyncVbbb: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_TIMING_BLANK_S"][::std::mem::size_of::<_VI_TIMING_BLANK_S>() - 36usize];
    ["Alignment of _VI_TIMING_BLANK_S"][::std::mem::align_of::<_VI_TIMING_BLANK_S>() - 4usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncHfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncHfb) - 0usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncAct"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncAct) - 4usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32HsyncHbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32HsyncHbb) - 8usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVfb) - 12usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVact"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVact) - 16usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbb) - 20usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbfb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbfb) - 24usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbact"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbact) - 28usize];
    ["Offset of field: _VI_TIMING_BLANK_S::u32VsyncVbbb"]
        [::std::mem::offset_of!(_VI_TIMING_BLANK_S, u32VsyncVbbb) - 32usize];
};
pub type VI_TIMING_BLANK_S = _VI_TIMING_BLANK_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_SYNC_CFG_S {
    pub enVsync: VI_VSYNC_E,
    pub enVsyncNeg: VI_VSYNC_NEG_E,
    pub enHsync: VI_HSYNC_E,
    pub enHsyncNeg: VI_HSYNC_NEG_E,
    pub enVsyncValid: VI_VSYNC_VALID_E,
    pub enVsyncValidNeg: VI_VSYNC_VALID_NEG_E,
    pub stTimingBlank: VI_TIMING_BLANK_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_SYNC_CFG_S"][::std::mem::size_of::<_VI_SYNC_CFG_S>() - 60usize];
    ["Alignment of _VI_SYNC_CFG_S"][::std::mem::align_of::<_VI_SYNC_CFG_S>() - 4usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsync"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsync) - 0usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncNeg) - 4usize];
    ["Offset of field: _VI_SYNC_CFG_S::enHsync"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enHsync) - 8usize];
    ["Offset of field: _VI_SYNC_CFG_S::enHsyncNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enHsyncNeg) - 12usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncValid"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncValid) - 16usize];
    ["Offset of field: _VI_SYNC_CFG_S::enVsyncValidNeg"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, enVsyncValidNeg) - 20usize];
    ["Offset of field: _VI_SYNC_CFG_S::stTimingBlank"]
        [::std::mem::offset_of!(_VI_SYNC_CFG_S, stTimingBlank) - 24usize];
};
pub type VI_SYNC_CFG_S = _VI_SYNC_CFG_S;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_1: _VI_BT656_FIXCODE_E = 0;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_0: _VI_BT656_FIXCODE_E = 1;
pub const _VI_BT656_FIXCODE_E_VI_BT656_FIXCODE_BUTT: _VI_BT656_FIXCODE_E = 2;
pub type _VI_BT656_FIXCODE_E = ::std::os::raw::c_uint;
pub use self::_VI_BT656_FIXCODE_E as VI_BT656_FIXCODE_E;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_STD: _VI_BT656_FIELD_POLAR_E = 0;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_NSTD: _VI_BT656_FIELD_POLAR_E = 1;
pub const _VI_BT656_FIELD_POLAR_E_VI_BT656_FIELD_POLAR_BUTT: _VI_BT656_FIELD_POLAR_E = 2;
pub type _VI_BT656_FIELD_POLAR_E = ::std::os::raw::c_uint;
pub use self::_VI_BT656_FIELD_POLAR_E as VI_BT656_FIELD_POLAR_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_BT656_SYNC_CFG_S {
    pub enFixCode: VI_BT656_FIXCODE_E,
    pub enFieldPolar: VI_BT656_FIELD_POLAR_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_BT656_SYNC_CFG_S"][::std::mem::size_of::<_VI_BT656_SYNC_CFG_S>() - 8usize];
    ["Alignment of _VI_BT656_SYNC_CFG_S"][::std::mem::align_of::<_VI_BT656_SYNC_CFG_S>() - 4usize];
    ["Offset of field: _VI_BT656_SYNC_CFG_S::enFixCode"]
        [::std::mem::offset_of!(_VI_BT656_SYNC_CFG_S, enFixCode) - 0usize];
    ["Offset of field: _VI_BT656_SYNC_CFG_S::enFieldPolar"]
        [::std::mem::offset_of!(_VI_BT656_SYNC_CFG_S, enFieldPolar) - 4usize];
};
pub type VI_BT656_SYNC_CFG_S = _VI_BT656_SYNC_CFG_S;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_YUV: _VI_DATA_TYPE_E = 0;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_RGB: _VI_DATA_TYPE_E = 1;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_YUV_EARLY: _VI_DATA_TYPE_E = 2;
pub const _VI_DATA_TYPE_E_VI_DATA_TYPE_BUTT: _VI_DATA_TYPE_E = 3;
pub type _VI_DATA_TYPE_E = ::std::os::raw::c_uint;
pub use self::_VI_DATA_TYPE_E as VI_DATA_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_WDR_ATTR_S {
    pub enWDRMode: WDR_MODE_E,
    pub u32CacheLine: CVI_U32,
    pub bSyntheticWDR: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_WDR_ATTR_S"][::std::mem::size_of::<_VI_WDR_ATTR_S>() - 12usize];
    ["Alignment of _VI_WDR_ATTR_S"][::std::mem::align_of::<_VI_WDR_ATTR_S>() - 4usize];
    ["Offset of field: _VI_WDR_ATTR_S::enWDRMode"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, enWDRMode) - 0usize];
    ["Offset of field: _VI_WDR_ATTR_S::u32CacheLine"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, u32CacheLine) - 4usize];
    ["Offset of field: _VI_WDR_ATTR_S::bSyntheticWDR"]
        [::std::mem::offset_of!(_VI_WDR_ATTR_S, bSyntheticWDR) - 8usize];
};
pub type VI_WDR_ATTR_S = _VI_WDR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_ATTR_EX_S {
    pub enInputMode: VI_INPUT_MODE_E,
    pub enWorkMode: VI_WORK_MODE_E,
    pub enCombineMode: VI_COMBINE_MODE_E,
    pub enComponentMode: VI_COMPONENT_MODE_E,
    pub enClkEdge: VI_CLK_EDGE_E,
    pub au32ComponentMask: [CVI_U32; 2usize],
    pub enScanMode: VI_SCAN_MODE_E,
    pub as32AdChnId: [CVI_S32; 4usize],
    pub enDataSeq: VI_YUV_DATA_SEQ_E,
    pub stSynCfg: VI_SYNC_CFG_S,
    pub stBT656SynCfg: VI_BT656_SYNC_CFG_S,
    pub enInputDataType: VI_DATA_TYPE_E,
    pub bDataReverse: CVI_BOOL,
    pub stSize: SIZE_S,
    pub stWDRAttr: VI_WDR_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_ATTR_EX_S"][::std::mem::size_of::<_VI_DEV_ATTR_EX_S>() - 148usize];
    ["Alignment of _VI_DEV_ATTR_EX_S"][::std::mem::align_of::<_VI_DEV_ATTR_EX_S>() - 4usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enInputMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enInputMode) - 0usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enWorkMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enWorkMode) - 4usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enCombineMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enCombineMode) - 8usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enComponentMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enComponentMode) - 12usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enClkEdge"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enClkEdge) - 16usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::au32ComponentMask"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, au32ComponentMask) - 20usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enScanMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enScanMode) - 28usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::as32AdChnId"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, as32AdChnId) - 32usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enDataSeq"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enDataSeq) - 48usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stSynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stSynCfg) - 52usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stBT656SynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stBT656SynCfg) - 112usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::enInputDataType"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, enInputDataType) - 120usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::bDataReverse"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, bDataReverse) - 124usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stSize"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stSize) - 128usize];
    ["Offset of field: _VI_DEV_ATTR_EX_S::stWDRAttr"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_EX_S, stWDRAttr) - 136usize];
};
pub type VI_DEV_ATTR_EX_S = _VI_DEV_ATTR_EX_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_ATTR_S {
    pub enIntfMode: VI_INTF_MODE_E,
    pub enWorkMode: VI_WORK_MODE_E,
    pub enScanMode: VI_SCAN_MODE_E,
    pub as32AdChnId: [CVI_S32; 4usize],
    pub enDataSeq: VI_YUV_DATA_SEQ_E,
    pub stSynCfg: VI_SYNC_CFG_S,
    pub enInputDataType: VI_DATA_TYPE_E,
    pub stSize: SIZE_S,
    pub stWDRAttr: VI_WDR_ATTR_S,
    pub enBayerFormat: BAYER_FORMAT_E,
    pub chn_num: CVI_U32,
    pub snrFps: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_ATTR_S"][::std::mem::size_of::<_VI_DEV_ATTR_S>() - 128usize];
    ["Alignment of _VI_DEV_ATTR_S"][::std::mem::align_of::<_VI_DEV_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DEV_ATTR_S::enIntfMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enIntfMode) - 0usize];
    ["Offset of field: _VI_DEV_ATTR_S::enWorkMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enWorkMode) - 4usize];
    ["Offset of field: _VI_DEV_ATTR_S::enScanMode"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enScanMode) - 8usize];
    ["Offset of field: _VI_DEV_ATTR_S::as32AdChnId"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, as32AdChnId) - 12usize];
    ["Offset of field: _VI_DEV_ATTR_S::enDataSeq"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enDataSeq) - 28usize];
    ["Offset of field: _VI_DEV_ATTR_S::stSynCfg"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stSynCfg) - 32usize];
    ["Offset of field: _VI_DEV_ATTR_S::enInputDataType"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enInputDataType) - 92usize];
    ["Offset of field: _VI_DEV_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stSize) - 96usize];
    ["Offset of field: _VI_DEV_ATTR_S::stWDRAttr"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, stWDRAttr) - 104usize];
    ["Offset of field: _VI_DEV_ATTR_S::enBayerFormat"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, enBayerFormat) - 116usize];
    ["Offset of field: _VI_DEV_ATTR_S::chn_num"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, chn_num) - 120usize];
    ["Offset of field: _VI_DEV_ATTR_S::snrFps"]
        [::std::mem::offset_of!(_VI_DEV_ATTR_S, snrFps) - 124usize];
};
pub type VI_DEV_ATTR_S = _VI_DEV_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_BIND_PIPE_S {
    pub u32Num: CVI_U32,
    pub PipeId: [VI_PIPE; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_BIND_PIPE_S"][::std::mem::size_of::<_VI_DEV_BIND_PIPE_S>() - 20usize];
    ["Alignment of _VI_DEV_BIND_PIPE_S"][::std::mem::align_of::<_VI_DEV_BIND_PIPE_S>() - 4usize];
    ["Offset of field: _VI_DEV_BIND_PIPE_S::u32Num"]
        [::std::mem::offset_of!(_VI_DEV_BIND_PIPE_S, u32Num) - 0usize];
    ["Offset of field: _VI_DEV_BIND_PIPE_S::PipeId"]
        [::std::mem::offset_of!(_VI_DEV_BIND_PIPE_S, PipeId) - 4usize];
};
pub type VI_DEV_BIND_PIPE_S = _VI_DEV_BIND_PIPE_S;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_RFR: _VI_NR_REF_SOURCE_E = 0;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_CHN0: _VI_NR_REF_SOURCE_E = 1;
pub const _VI_NR_REF_SOURCE_E_VI_NR_REF_FROM_BUTT: _VI_NR_REF_SOURCE_E = 2;
pub type _VI_NR_REF_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_NR_REF_SOURCE_E as VI_NR_REF_SOURCE_E;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_NONE: _VI_PIPE_BYPASS_MODE_E = 0;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_FE: _VI_PIPE_BYPASS_MODE_E = 1;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_BE: _VI_PIPE_BYPASS_MODE_E = 2;
pub const _VI_PIPE_BYPASS_MODE_E_VI_PIPE_BYPASS_BUTT: _VI_PIPE_BYPASS_MODE_E = 3;
pub type _VI_PIPE_BYPASS_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_BYPASS_MODE_E as VI_PIPE_BYPASS_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_NR_ATTR_S {
    pub enPixFmt: PIXEL_FORMAT_E,
    pub enBitWidth: DATA_BITWIDTH_E,
    pub enNrRefSource: VI_NR_REF_SOURCE_E,
    pub enCompressMode: COMPRESS_MODE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_NR_ATTR_S"][::std::mem::size_of::<_VI_NR_ATTR_S>() - 16usize];
    ["Alignment of _VI_NR_ATTR_S"][::std::mem::align_of::<_VI_NR_ATTR_S>() - 4usize];
    ["Offset of field: _VI_NR_ATTR_S::enPixFmt"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enPixFmt) - 0usize];
    ["Offset of field: _VI_NR_ATTR_S::enBitWidth"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enBitWidth) - 4usize];
    ["Offset of field: _VI_NR_ATTR_S::enNrRefSource"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enNrRefSource) - 8usize];
    ["Offset of field: _VI_NR_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_NR_ATTR_S, enCompressMode) - 12usize];
};
pub type VI_NR_ATTR_S = _VI_NR_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_ATTR_S {
    pub enPipeBypassMode: VI_PIPE_BYPASS_MODE_E,
    pub bYuvSkip: CVI_BOOL,
    pub bIspBypass: CVI_BOOL,
    pub u32MaxW: CVI_U32,
    pub u32MaxH: CVI_U32,
    pub enPixFmt: PIXEL_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub enBitWidth: DATA_BITWIDTH_E,
    pub bNrEn: CVI_BOOL,
    pub bSharpenEn: CVI_BOOL,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub bDiscardProPic: CVI_BOOL,
    pub bYuvBypassPath: CVI_BOOL,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_ATTR_S"][::std::mem::size_of::<_VI_PIPE_ATTR_S>() - 44usize];
    ["Alignment of _VI_PIPE_ATTR_S"][::std::mem::align_of::<_VI_PIPE_ATTR_S>() - 4usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enPipeBypassMode"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enPipeBypassMode) - 0usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bYuvSkip"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bYuvSkip) - 4usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bIspBypass"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bIspBypass) - 5usize];
    ["Offset of field: _VI_PIPE_ATTR_S::u32MaxW"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, u32MaxW) - 8usize];
    ["Offset of field: _VI_PIPE_ATTR_S::u32MaxH"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, u32MaxH) - 12usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enPixFmt"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enPixFmt) - 16usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enCompressMode) - 20usize];
    ["Offset of field: _VI_PIPE_ATTR_S::enBitWidth"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, enBitWidth) - 24usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bNrEn"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bNrEn) - 28usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bSharpenEn"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bSharpenEn) - 29usize];
    ["Offset of field: _VI_PIPE_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, stFrameRate) - 32usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bDiscardProPic"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bDiscardProPic) - 40usize];
    ["Offset of field: _VI_PIPE_ATTR_S::bYuvBypassPath"]
        [::std::mem::offset_of!(_VI_PIPE_ATTR_S, bYuvBypassPath) - 41usize];
};
pub type VI_PIPE_ATTR_S = _VI_PIPE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_MANUAL_ATTR_S {
    pub au16TextureStr: [CVI_U16; 32usize],
    pub au16EdgeStr: [CVI_U16; 32usize],
    pub u16TextureFreq: CVI_U16,
    pub u16EdgeFreq: CVI_U16,
    pub u8OverShoot: CVI_U8,
    pub u8UnderShoot: CVI_U8,
    pub u8ShootSupStr: CVI_U8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_MANUAL_ATTR_S>() - 136usize];
    ["Alignment of _VI_PIPE_SHARPEN_MANUAL_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_MANUAL_ATTR_S>() - 2usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::au16TextureStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, au16TextureStr) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::au16EdgeStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, au16EdgeStr) - 64usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u16TextureFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u16TextureFreq) - 128usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u16EdgeFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u16EdgeFreq) - 130usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8OverShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8OverShoot) - 132usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8UnderShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8UnderShoot) - 133usize];
    ["Offset of field: _VI_PIPE_SHARPEN_MANUAL_ATTR_S::u8ShootSupStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_MANUAL_ATTR_S, u8ShootSupStr) - 134usize];
};
pub type VI_PIPE_SHARPEN_MANUAL_ATTR_S = _VI_PIPE_SHARPEN_MANUAL_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_AUTO_ATTR_S {
    pub au16TextureStr: [[CVI_U16; 16usize]; 32usize],
    pub au16EdgeStr: [[CVI_U16; 16usize]; 32usize],
    pub au16TextureFreq: [CVI_U16; 16usize],
    pub au16EdgeFreq: [CVI_U16; 16usize],
    pub au8OverShoot: [CVI_U8; 16usize],
    pub au8UnderShoot: [CVI_U8; 16usize],
    pub au8ShootSupStr: [CVI_U8; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_AUTO_ATTR_S>() - 2160usize];
    ["Alignment of _VI_PIPE_SHARPEN_AUTO_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_AUTO_ATTR_S>() - 2usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16TextureStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16TextureStr) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16EdgeStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16EdgeStr) - 1024usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16TextureFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16TextureFreq) - 2048usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au16EdgeFreq"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au16EdgeFreq) - 2080usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8OverShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8OverShoot) - 2112usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8UnderShoot"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8UnderShoot) - 2128usize];
    ["Offset of field: _VI_PIPE_SHARPEN_AUTO_ATTR_S::au8ShootSupStr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_AUTO_ATTR_S, au8ShootSupStr) - 2144usize];
};
pub type VI_PIPE_SHARPEN_AUTO_ATTR_S = _VI_PIPE_SHARPEN_AUTO_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_SHARPEN_ATTR_S {
    pub enOpType: OPERATION_MODE_E,
    pub au8LumaWgt: [CVI_U8; 32usize],
    pub stSharpenManualAttr: VI_PIPE_SHARPEN_MANUAL_ATTR_S,
    pub stSharpenAutoAttr: VI_PIPE_SHARPEN_AUTO_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_SHARPEN_ATTR_S"]
        [::std::mem::size_of::<_VI_PIPE_SHARPEN_ATTR_S>() - 2332usize];
    ["Alignment of _VI_PIPE_SHARPEN_ATTR_S"]
        [::std::mem::align_of::<_VI_PIPE_SHARPEN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::enOpType"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, enOpType) - 0usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::au8LumaWgt"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, au8LumaWgt) - 4usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::stSharpenManualAttr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, stSharpenManualAttr) - 36usize];
    ["Offset of field: _VI_PIPE_SHARPEN_ATTR_S::stSharpenAutoAttr"]
        [::std::mem::offset_of!(_VI_PIPE_SHARPEN_ATTR_S, stSharpenAutoAttr) - 172usize];
};
pub type VI_PIPE_SHARPEN_ATTR_S = _VI_PIPE_SHARPEN_ATTR_S;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_NONE: _VI_PIPE_REPEAT_MODE_E = 0;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_ONCE: _VI_PIPE_REPEAT_MODE_E = 1;
pub const _VI_PIPE_REPEAT_MODE_E_VI_PIPE_REPEAT_BUTT: _VI_PIPE_REPEAT_MODE_E = 2;
pub type _VI_PIPE_REPEAT_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_REPEAT_MODE_E as VI_PIPE_REPEAT_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aIEy {
    pub IES: CVI_U8,
    pub IESS: CVI_U8,
    pub IEDZ: CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aIEy"][::std::mem::size_of::<tV59aIEy>() - 4usize];
    ["Alignment of tV59aIEy"][::std::mem::align_of::<tV59aIEy>() - 2usize];
    ["Offset of field: tV59aIEy::IES"][::std::mem::offset_of!(tV59aIEy, IES) - 0usize];
    ["Offset of field: tV59aIEy::IESS"][::std::mem::offset_of!(tV59aIEy, IESS) - 1usize];
    ["Offset of field: tV59aIEy::IEDZ"][::std::mem::offset_of!(tV59aIEy, IEDZ) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aSFy {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub STH: [CVI_U16; 3usize],
    pub SBS: [CVI_U16; 3usize],
    pub SDS: [CVI_U16; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aSFy"][::std::mem::size_of::<tV59aSFy>() - 20usize];
    ["Alignment of tV59aSFy"][::std::mem::align_of::<tV59aSFy>() - 2usize];
    ["Offset of field: tV59aSFy::STH"][::std::mem::offset_of!(tV59aSFy, STH) - 2usize];
    ["Offset of field: tV59aSFy::SBS"][::std::mem::offset_of!(tV59aSFy, SBS) - 8usize];
    ["Offset of field: tV59aSFy::SDS"][::std::mem::offset_of!(tV59aSFy, SDS) - 14usize];
};
impl tV59aSFy {
    #[inline]
    pub fn SBF(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_SBF(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn STR(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_STR(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn STHp(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 2u8) as u8) }
    }
    #[inline]
    pub fn set_STHp(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn SFT(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_SFT(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn kPro(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_kPro(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SBF: CVI_U8,
        STR: CVI_U8,
        STHp: CVI_U8,
        SFT: CVI_U8,
        kPro: CVI_U8,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let SBF: u8 = unsafe { ::std::mem::transmute(SBF) };
            SBF as u64
        });
        __bindgen_bitfield_unit.set(2usize, 4u8, {
            let STR: u8 = unsafe { ::std::mem::transmute(STR) };
            STR as u64
        });
        __bindgen_bitfield_unit.set(6usize, 2u8, {
            let STHp: u8 = unsafe { ::std::mem::transmute(STHp) };
            STHp as u64
        });
        __bindgen_bitfield_unit.set(8usize, 5u8, {
            let SFT: u8 = unsafe { ::std::mem::transmute(SFT) };
            SFT as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let kPro: u8 = unsafe { ::std::mem::transmute(kPro) };
            kPro as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aMDy {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aMDy"][::std::mem::size_of::<tV59aMDy>() - 4usize];
    ["Alignment of tV59aMDy"][::std::mem::align_of::<tV59aMDy>() - 2usize];
};
impl tV59aMDy {
    #[inline]
    pub fn MATH(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_MATH(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn MATE(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_MATE(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MATW(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_MATW(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn MASW(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_MASW(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn MABW(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_MABW(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn MAXN(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(23usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_MAXN(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(23usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        MATH: CVI_U16,
        MATE: CVI_U16,
        MATW: CVI_U16,
        MASW: CVI_U8,
        MABW: CVI_U8,
        MAXN: CVI_U8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let MATH: u16 = unsafe { ::std::mem::transmute(MATH) };
            MATH as u64
        });
        __bindgen_bitfield_unit.set(10usize, 4u8, {
            let MATE: u16 = unsafe { ::std::mem::transmute(MATE) };
            MATE as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let MATW: u16 = unsafe { ::std::mem::transmute(MATW) };
            MATW as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let MASW: u8 = unsafe { ::std::mem::transmute(MASW) };
            MASW as u64
        });
        __bindgen_bitfield_unit.set(20usize, 3u8, {
            let MABW: u8 = unsafe { ::std::mem::transmute(MABW) };
            MABW as u64
        });
        __bindgen_bitfield_unit.set(23usize, 1u8, {
            let MAXN: u8 = unsafe { ::std::mem::transmute(MAXN) };
            MAXN as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aTFy {
    pub TFR: [CVI_U8; 4usize],
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aTFy"][::std::mem::size_of::<tV59aTFy>() - 8usize];
    ["Alignment of tV59aTFy"][::std::mem::align_of::<tV59aTFy>() - 2usize];
    ["Offset of field: tV59aTFy::TFR"][::std::mem::offset_of!(tV59aTFy, TFR) - 0usize];
};
impl tV59aTFy {
    #[inline]
    pub fn TDZ(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_TDZ(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn TDX(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_TDX(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn TFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_TFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        TDZ: CVI_U16,
        TDX: CVI_U16,
        TFS: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 14u8, {
            let TDZ: u16 = unsafe { ::std::mem::transmute(TDZ) };
            TDZ as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let TDX: u16 = unsafe { ::std::mem::transmute(TDX) };
            TDX as u64
        });
        __bindgen_bitfield_unit.set(16usize, 6u8, {
            let TFS: u16 = unsafe { ::std::mem::transmute(TFS) };
            TFS as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV59aNRc {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 6usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV59aNRc"][::std::mem::size_of::<tV59aNRc>() - 6usize];
    ["Alignment of tV59aNRc"][::std::mem::align_of::<tV59aNRc>() - 2usize];
};
impl tV59aNRc {
    #[inline]
    pub fn SFC(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_SFC(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn TFC(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set_TFC(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn CSFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 14u8) as u16) }
    }
    #[inline]
    pub fn set_CSFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn CSFk(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_CSFk(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn CTFS(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_CTFS(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn CIIR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(36usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_CIIR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(36usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn CTFR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(37usize, 11u8) as u16) }
    }
    #[inline]
    pub fn set_CTFR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(37usize, 11u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SFC: CVI_U16,
        TFC: CVI_U16,
        CSFS: CVI_U16,
        CSFk: CVI_U16,
        CTFS: CVI_U16,
        CIIR: CVI_U16,
        CTFR: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let SFC: u16 = unsafe { ::std::mem::transmute(SFC) };
            SFC as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let TFC: u16 = unsafe { ::std::mem::transmute(TFC) };
            TFC as u64
        });
        __bindgen_bitfield_unit.set(16usize, 14u8, {
            let CSFS: u16 = unsafe { ::std::mem::transmute(CSFS) };
            CSFS as u64
        });
        __bindgen_bitfield_unit.set(30usize, 2u8, {
            let CSFk: u16 = unsafe { ::std::mem::transmute(CSFk) };
            CSFk as u64
        });
        __bindgen_bitfield_unit.set(32usize, 4u8, {
            let CTFS: u16 = unsafe { ::std::mem::transmute(CTFS) };
            CTFS as u64
        });
        __bindgen_bitfield_unit.set(36usize, 1u8, {
            let CIIR: u16 = unsafe { ::std::mem::transmute(CIIR) };
            CIIR as u64
        });
        __bindgen_bitfield_unit.set(37usize, 11u8, {
            let CTFR: u16 = unsafe { ::std::mem::transmute(CTFR) };
            CTFR as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VI_PIPE_NRX_PARAM_V1_S {
    pub IEy: tV59aIEy,
    pub SFy: [tV59aSFy; 5usize],
    pub MDy: [tV59aMDy; 2usize],
    pub TFy: [tV59aTFy; 2usize],
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub HdgIES: CVI_U8,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 1usize]>,
    pub IEyEx: [CVI_U8; 4usize],
    pub SFRi: [CVI_U8; 4usize],
    pub SFRk: [CVI_U8; 4usize],
    pub SBSk2: [CVI_U16; 32usize],
    pub SBSk3: [CVI_U16; 32usize],
    pub SDSk2: [CVI_U16; 32usize],
    pub SDSk3: [CVI_U16; 32usize],
    pub BriThr: [CVI_U16; 16usize],
    pub NRc: tV59aNRc,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VI_PIPE_NRX_PARAM_V1_S"][::std::mem::size_of::<VI_PIPE_NRX_PARAM_V1_S>() - 438usize];
    ["Alignment of VI_PIPE_NRX_PARAM_V1_S"]
        [::std::mem::align_of::<VI_PIPE_NRX_PARAM_V1_S>() - 2usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::IEy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, IEy) - 0usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFy) - 4usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::MDy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, MDy) - 104usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::TFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, TFy) - 112usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::HdgIES"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, HdgIES) - 130usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::IEyEx"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, IEyEx) - 132usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFRi"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFRi) - 136usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SFRk"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SFRk) - 140usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SBSk2"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SBSk2) - 144usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SBSk3"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SBSk3) - 208usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SDSk2"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SDSk2) - 272usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::SDSk3"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, SDSk3) - 336usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::BriThr"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, BriThr) - 400usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V1_S::NRc"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V1_S, NRc) - 432usize];
};
impl VI_PIPE_NRX_PARAM_V1_S {
    #[inline]
    pub fn HdgType(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_HdgType(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn BriType(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_BriType(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgMode(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_HdgMode(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn kTab2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kTab2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgWnd(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_HdgWnd(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn kTab3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_kTab3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn HdgSFR(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 4u8) as u16) }
    }
    #[inline]
    pub fn set_HdgSFR(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn nOut(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_nOut(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        HdgType: CVI_U16,
        BriType: CVI_U16,
        HdgMode: CVI_U16,
        kTab2: CVI_U16,
        HdgWnd: CVI_U16,
        kTab3: CVI_U16,
        HdgSFR: CVI_U16,
        nOut: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let HdgType: u16 = unsafe { ::std::mem::transmute(HdgType) };
            HdgType as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let BriType: u16 = unsafe { ::std::mem::transmute(BriType) };
            BriType as u64
        });
        __bindgen_bitfield_unit.set(2usize, 2u8, {
            let HdgMode: u16 = unsafe { ::std::mem::transmute(HdgMode) };
            HdgMode as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let kTab2: u16 = unsafe { ::std::mem::transmute(kTab2) };
            kTab2 as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let HdgWnd: u16 = unsafe { ::std::mem::transmute(HdgWnd) };
            HdgWnd as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let kTab3: u16 = unsafe { ::std::mem::transmute(kTab3) };
            kTab3 as u64
        });
        __bindgen_bitfield_unit.set(7usize, 4u8, {
            let HdgSFR: u16 = unsafe { ::std::mem::transmute(HdgSFR) };
            HdgSFR as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let nOut: u16 = unsafe { ::std::mem::transmute(nOut) };
            nOut as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn nRef(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_nRef(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn IEyMode(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_IEyMode(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_2.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(nRef: CVI_U8, IEyMode: CVI_U8) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let nRef: u8 = unsafe { ::std::mem::transmute(nRef) };
            nRef as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let IEyMode: u8 = unsafe { ::std::mem::transmute(IEyMode) };
            IEyMode as u64
        });
        __bindgen_bitfield_unit
    }
}
pub const _VI_NR_VERSION_E_VI_NR_V1: _VI_NR_VERSION_E = 1;
pub const _VI_NR_VERSION_E_VI_NR_V2: _VI_NR_VERSION_E = 2;
pub const _VI_NR_VERSION_E_VI_NR_V3: _VI_NR_VERSION_E = 3;
pub const _VI_NR_VERSION_E_VI_NR_V4: _VI_NR_VERSION_E = 4;
pub const _VI_NR_VERSION_E_VI_NR_BUTT: _VI_NR_VERSION_E = 5;
pub type _VI_NR_VERSION_E = ::std::os::raw::c_uint;
pub use self::_VI_NR_VERSION_E as VI_NR_VERSION_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_MANUAL_V1_S {
    pub stNRXParamV1: VI_PIPE_NRX_PARAM_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_MANUAL_V1_S"][::std::mem::size_of::<_NRX_PARAM_MANUAL_V1_S>() - 438usize];
    ["Alignment of _NRX_PARAM_MANUAL_V1_S"]
        [::std::mem::align_of::<_NRX_PARAM_MANUAL_V1_S>() - 2usize];
    ["Offset of field: _NRX_PARAM_MANUAL_V1_S::stNRXParamV1"]
        [::std::mem::offset_of!(_NRX_PARAM_MANUAL_V1_S, stNRXParamV1) - 0usize];
};
pub type NRX_PARAM_MANUAL_V1_S = _NRX_PARAM_MANUAL_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_AUTO_V1_S {
    pub u32ParamNum: CVI_U32,
    pub pau32ISO: *mut CVI_U32,
    pub pastNRXParamV1: *mut VI_PIPE_NRX_PARAM_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_AUTO_V1_S"][::std::mem::size_of::<_NRX_PARAM_AUTO_V1_S>() - 24usize];
    ["Alignment of _NRX_PARAM_AUTO_V1_S"][::std::mem::align_of::<_NRX_PARAM_AUTO_V1_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::u32ParamNum"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, u32ParamNum) - 0usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::pau32ISO"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, pau32ISO) - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V1_S::pastNRXParamV1"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V1_S, pastNRXParamV1) - 16usize];
};
pub type NRX_PARAM_AUTO_V1_S = _NRX_PARAM_AUTO_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_V1_S {
    pub enOptMode: OPERATION_MODE_E,
    pub stNRXManualV1: NRX_PARAM_MANUAL_V1_S,
    pub stNRXAutoV1: NRX_PARAM_AUTO_V1_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_V1_S"][::std::mem::size_of::<_NRX_PARAM_V1_S>() - 472usize];
    ["Alignment of _NRX_PARAM_V1_S"][::std::mem::align_of::<_NRX_PARAM_V1_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_V1_S::enOptMode"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, enOptMode) - 0usize];
    ["Offset of field: _NRX_PARAM_V1_S::stNRXManualV1"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, stNRXManualV1) - 4usize];
    ["Offset of field: _NRX_PARAM_V1_S::stNRXAutoV1"]
        [::std::mem::offset_of!(_NRX_PARAM_V1_S, stNRXAutoV1) - 448usize];
};
pub type NRX_PARAM_V1_S = _NRX_PARAM_V1_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV500_VI_IEy {
    pub IES0: CVI_U8,
    pub IES1: CVI_U8,
    pub IES2: CVI_U8,
    pub IES3: CVI_U8,
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV500_VI_IEy"][::std::mem::size_of::<tV500_VI_IEy>() - 6usize];
    ["Alignment of tV500_VI_IEy"][::std::mem::align_of::<tV500_VI_IEy>() - 2usize];
    ["Offset of field: tV500_VI_IEy::IES0"][::std::mem::offset_of!(tV500_VI_IEy, IES0) - 0usize];
    ["Offset of field: tV500_VI_IEy::IES1"][::std::mem::offset_of!(tV500_VI_IEy, IES1) - 1usize];
    ["Offset of field: tV500_VI_IEy::IES2"][::std::mem::offset_of!(tV500_VI_IEy, IES2) - 2usize];
    ["Offset of field: tV500_VI_IEy::IES3"][::std::mem::offset_of!(tV500_VI_IEy, IES3) - 3usize];
};
impl tV500_VI_IEy {
    #[inline]
    pub fn IEDZ(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u16) }
    }
    #[inline]
    pub fn set_IEDZ(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn _rb_(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 6u8) as u16) }
    }
    #[inline]
    pub fn set__rb_(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(IEDZ: CVI_U16, _rb_: CVI_U16) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let IEDZ: u16 = unsafe { ::std::mem::transmute(IEDZ) };
            IEDZ as u64
        });
        __bindgen_bitfield_unit.set(10usize, 6u8, {
            let _rb_: u16 = unsafe { ::std::mem::transmute(_rb_) };
            _rb_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tV500_VI_SFy {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub DeRate: CVI_U8,
    pub SFR6: [CVI_U8; 3usize],
    pub SFS1: CVI_U8,
    pub SFT1: CVI_U8,
    pub SBR1: CVI_U8,
    pub SFS2: CVI_U8,
    pub SFT2: CVI_U8,
    pub SBR2: CVI_U8,
    pub SFS4: CVI_U8,
    pub SFT4: CVI_U8,
    pub SBR4: CVI_U8,
    pub _bitfield_align_2: [u16; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 6usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tV500_VI_SFy"][::std::mem::size_of::<tV500_VI_SFy>() - 24usize];
    ["Alignment of tV500_VI_SFy"][::std::mem::align_of::<tV500_VI_SFy>() - 2usize];
    ["Offset of field: tV500_VI_SFy::DeRate"]
        [::std::mem::offset_of!(tV500_VI_SFy, DeRate) - 4usize];
    ["Offset of field: tV500_VI_SFy::SFR6"][::std::mem::offset_of!(tV500_VI_SFy, SFR6) - 5usize];
    ["Offset of field: tV500_VI_SFy::SFS1"][::std::mem::offset_of!(tV500_VI_SFy, SFS1) - 8usize];
    ["Offset of field: tV500_VI_SFy::SFT1"][::std::mem::offset_of!(tV500_VI_SFy, SFT1) - 9usize];
    ["Offset of field: tV500_VI_SFy::SBR1"][::std::mem::offset_of!(tV500_VI_SFy, SBR1) - 10usize];
    ["Offset of field: tV500_VI_SFy::SFS2"][::std::mem::offset_of!(tV500_VI_SFy, SFS2) - 11usize];
    ["Offset of field: tV500_VI_SFy::SFT2"][::std::mem::offset_of!(tV500_VI_SFy, SFT2) - 12usize];
    ["Offset of field: tV500_VI_SFy::SBR2"][::std::mem::offset_of!(tV500_VI_SFy, SBR2) - 13usize];
    ["Offset of field: tV500_VI_SFy::SFS4"][::std::mem::offset_of!(tV500_VI_SFy, SFS4) - 14usize];
    ["Offset of field: tV500_VI_SFy::SFT4"][::std::mem::offset_of!(tV500_VI_SFy, SFT4) - 15usize];
    ["Offset of field: tV500_VI_SFy::SBR4"][::std::mem::offset_of!(tV500_VI_SFy, SBR4) - 16usize];
};
impl tV500_VI_SFy {
    #[inline]
    pub fn SPN6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_SPN6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn SFR(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_SFR(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SBN6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 3u8) as u8) }
    }
    #[inline]
    pub fn set_SBN6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn PBR6(&self) -> CVI_U8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_PBR6(&mut self, val: CVI_U8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SRT0(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_SRT0(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn SRT1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 5u8) as u16) }
    }
    #[inline]
    pub fn set_SRT1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn JMODE(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(26usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_JMODE(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(26usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn DeIdx(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_DeIdx(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        SPN6: CVI_U8,
        SFR: CVI_U8,
        SBN6: CVI_U8,
        PBR6: CVI_U8,
        SRT0: CVI_U16,
        SRT1: CVI_U16,
        JMODE: CVI_U16,
        DeIdx: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 3u8, {
            let SPN6: u8 = unsafe { ::std::mem::transmute(SPN6) };
            SPN6 as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let SFR: u8 = unsafe { ::std::mem::transmute(SFR) };
            SFR as u64
        });
        __bindgen_bitfield_unit.set(8usize, 3u8, {
            let SBN6: u8 = unsafe { ::std::mem::transmute(SBN6) };
            SBN6 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 5u8, {
            let PBR6: u8 = unsafe { ::std::mem::transmute(PBR6) };
            PBR6 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 5u8, {
            let SRT0: u16 = unsafe { ::std::mem::transmute(SRT0) };
            SRT0 as u64
        });
        __bindgen_bitfield_unit.set(21usize, 5u8, {
            let SRT1: u16 = unsafe { ::std::mem::transmute(SRT1) };
            SRT1 as u64
        });
        __bindgen_bitfield_unit.set(26usize, 3u8, {
            let JMODE: u16 = unsafe { ::std::mem::transmute(JMODE) };
            JMODE as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let DeIdx: u16 = unsafe { ::std::mem::transmute(DeIdx) };
            DeIdx as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn STH1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN1(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(9usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN1(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn NRyEn(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(12usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_NRyEn(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN0(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(13usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN0(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(13usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn STH2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(16usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(16usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN2(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(25usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN2(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(25usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn BWSF4(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(28usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_BWSF4(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(28usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn kMode(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(29usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_kMode(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn STH3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(32usize, 9u8) as u16) }
    }
    #[inline]
    pub fn set_STH3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(32usize, 9u8, val as u64)
        }
    }
    #[inline]
    pub fn SFN3(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(41usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set_SFN3(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(41usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn TriTh(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(44usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_TriTh(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(44usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn _rb0_(&self) -> CVI_U16 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(45usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set__rb0_(&mut self, val: CVI_U16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_2.set(45usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        STH1: CVI_U16,
        SFN1: CVI_U16,
        NRyEn: CVI_U16,
        SFN0: CVI_U16,
        STH2: CVI_U16,
        SFN2: CVI_U16,
        BWSF4: CVI_U16,
        kMode: CVI_U16,
        STH3: CVI_U16,
        SFN3: CVI_U16,
        TriTh: CVI_U16,
        _rb0_: CVI_U16,
    ) -> __BindgenBitfieldUnit<[u8; 6usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 6usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 9u8, {
            let STH1: u16 = unsafe { ::std::mem::transmute(STH1) };
            STH1 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let SFN1: u16 = unsafe { ::std::mem::transmute(SFN1) };
            SFN1 as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let NRyEn: u16 = unsafe { ::std::mem::transmute(NRyEn) };
            NRyEn as u64
        });
        __bindgen_bitfield_unit.set(13usize, 3u8, {
            let SFN0: u16 = unsafe { ::std::mem::transmute(SFN0) };
            SFN0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 9u8, {
            let STH2: u16 = unsafe { ::std::mem::transmute(STH2) };
            STH2 as u64
        });
        __bindgen_bitfield_unit.set(25usize, 3u8, {
            let SFN2: u16 = unsafe { ::std::mem::transmute(SFN2) };
            SFN2 as u64
        });
        __bindgen_bitfield_unit.set(28usize, 1u8, {
            let BWSF4: u16 = unsafe { ::std::mem::transmute(BWSF4) };
            BWSF4 as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let kMode: u16 = unsafe { ::std::mem::transmute(kMode) };
            kMode as u64
        });
        __bindgen_bitfield_unit.set(32usize, 9u8, {
            let STH3: u16 = unsafe { ::std::mem::transmute(STH3) };
            STH3 as u64
        });
        __bindgen_bitfield_unit.set(41usize, 3u8, {
            let SFN3: u16 = unsafe { ::std::mem::transmute(SFN3) };
            SFN3 as u64
        });
        __bindgen_bitfield_unit.set(44usize, 1u8, {
            let TriTh: u16 = unsafe { ::std::mem::transmute(TriTh) };
            TriTh as u64
        });
        __bindgen_bitfield_unit.set(45usize, 3u8, {
            let _rb0_: u16 = unsafe { ::std::mem::transmute(_rb0_) };
            _rb0_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VI_PIPE_NRX_PARAM_V2_S {
    pub IEy: tV500_VI_IEy,
    pub SFy: tV500_VI_SFy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of VI_PIPE_NRX_PARAM_V2_S"][::std::mem::size_of::<VI_PIPE_NRX_PARAM_V2_S>() - 30usize];
    ["Alignment of VI_PIPE_NRX_PARAM_V2_S"]
        [::std::mem::align_of::<VI_PIPE_NRX_PARAM_V2_S>() - 2usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V2_S::IEy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V2_S, IEy) - 0usize];
    ["Offset of field: VI_PIPE_NRX_PARAM_V2_S::SFy"]
        [::std::mem::offset_of!(VI_PIPE_NRX_PARAM_V2_S, SFy) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_MANUAL_V2_S {
    pub stNRXParamV2: VI_PIPE_NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_MANUAL_V2_S"][::std::mem::size_of::<_NRX_PARAM_MANUAL_V2_S>() - 30usize];
    ["Alignment of _NRX_PARAM_MANUAL_V2_S"]
        [::std::mem::align_of::<_NRX_PARAM_MANUAL_V2_S>() - 2usize];
    ["Offset of field: _NRX_PARAM_MANUAL_V2_S::stNRXParamV2"]
        [::std::mem::offset_of!(_NRX_PARAM_MANUAL_V2_S, stNRXParamV2) - 0usize];
};
pub type NRX_PARAM_MANUAL_V2_S = _NRX_PARAM_MANUAL_V2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_AUTO_V2_S {
    pub u32ParamNum: CVI_U32,
    pub pau32ISO: *mut CVI_U32,
    pub pastNRXParamV2: *mut VI_PIPE_NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_AUTO_V2_S"][::std::mem::size_of::<_NRX_PARAM_AUTO_V2_S>() - 24usize];
    ["Alignment of _NRX_PARAM_AUTO_V2_S"][::std::mem::align_of::<_NRX_PARAM_AUTO_V2_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::u32ParamNum"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, u32ParamNum) - 0usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::pau32ISO"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, pau32ISO) - 8usize];
    ["Offset of field: _NRX_PARAM_AUTO_V2_S::pastNRXParamV2"]
        [::std::mem::offset_of!(_NRX_PARAM_AUTO_V2_S, pastNRXParamV2) - 16usize];
};
pub type NRX_PARAM_AUTO_V2_S = _NRX_PARAM_AUTO_V2_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _NRX_PARAM_V2_S {
    pub enOptMode: OPERATION_MODE_E,
    pub stNRXManualV2: NRX_PARAM_MANUAL_V2_S,
    pub stNRXAutoV2: NRX_PARAM_AUTO_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _NRX_PARAM_V2_S"][::std::mem::size_of::<_NRX_PARAM_V2_S>() - 64usize];
    ["Alignment of _NRX_PARAM_V2_S"][::std::mem::align_of::<_NRX_PARAM_V2_S>() - 8usize];
    ["Offset of field: _NRX_PARAM_V2_S::enOptMode"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, enOptMode) - 0usize];
    ["Offset of field: _NRX_PARAM_V2_S::stNRXManualV2"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, stNRXManualV2) - 4usize];
    ["Offset of field: _NRX_PARAM_V2_S::stNRXAutoV2"]
        [::std::mem::offset_of!(_NRX_PARAM_V2_S, stNRXAutoV2) - 40usize];
};
pub type NRX_PARAM_V2_S = _NRX_PARAM_V2_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _VI_PIPE_NRX_PARAM_S {
    pub enNRVersion: VI_NR_VERSION_E,
    pub __bindgen_anon_1: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _VI_PIPE_NRX_PARAM_S__bindgen_ty_1 {
    pub stNRXParamV1: NRX_PARAM_V1_S,
    pub stNRXParamV2: NRX_PARAM_V2_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_NRX_PARAM_S__bindgen_ty_1"]
        [::std::mem::size_of::<_VI_PIPE_NRX_PARAM_S__bindgen_ty_1>() - 472usize];
    ["Alignment of _VI_PIPE_NRX_PARAM_S__bindgen_ty_1"]
        [::std::mem::align_of::<_VI_PIPE_NRX_PARAM_S__bindgen_ty_1>() - 8usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1::stNRXParamV1"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S__bindgen_ty_1, stNRXParamV1) - 0usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S__bindgen_ty_1::stNRXParamV2"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S__bindgen_ty_1, stNRXParamV2) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_NRX_PARAM_S"][::std::mem::size_of::<_VI_PIPE_NRX_PARAM_S>() - 480usize];
    ["Alignment of _VI_PIPE_NRX_PARAM_S"][::std::mem::align_of::<_VI_PIPE_NRX_PARAM_S>() - 8usize];
    ["Offset of field: _VI_PIPE_NRX_PARAM_S::enNRVersion"]
        [::std::mem::offset_of!(_VI_PIPE_NRX_PARAM_S, enNRVersion) - 0usize];
};
pub type VI_PIPE_NRX_PARAM_S = _VI_PIPE_NRX_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CHN_ATTR_S {
    pub stSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub enDynamicRange: DYNAMIC_RANGE_E,
    pub enVideoFormat: VIDEO_FORMAT_E,
    pub enCompressMode: COMPRESS_MODE_E,
    pub bMirror: CVI_BOOL,
    pub bFlip: CVI_BOOL,
    pub u32Depth: CVI_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
    pub u32BindVbPool: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CHN_ATTR_S"][::std::mem::size_of::<_VI_CHN_ATTR_S>() - 44usize];
    ["Alignment of _VI_CHN_ATTR_S"][::std::mem::align_of::<_VI_CHN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_CHN_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, stSize) - 0usize];
    ["Offset of field: _VI_CHN_ATTR_S::enPixelFormat"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enPixelFormat) - 8usize];
    ["Offset of field: _VI_CHN_ATTR_S::enDynamicRange"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enDynamicRange) - 12usize];
    ["Offset of field: _VI_CHN_ATTR_S::enVideoFormat"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enVideoFormat) - 16usize];
    ["Offset of field: _VI_CHN_ATTR_S::enCompressMode"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, enCompressMode) - 20usize];
    ["Offset of field: _VI_CHN_ATTR_S::bMirror"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, bMirror) - 24usize];
    ["Offset of field: _VI_CHN_ATTR_S::bFlip"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, bFlip) - 25usize];
    ["Offset of field: _VI_CHN_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, u32Depth) - 28usize];
    ["Offset of field: _VI_CHN_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, stFrameRate) - 32usize];
    ["Offset of field: _VI_CHN_ATTR_S::u32BindVbPool"]
        [::std::mem::offset_of!(_VI_CHN_ATTR_S, u32BindVbPool) - 40usize];
};
pub type VI_CHN_ATTR_S = _VI_CHN_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PIPE_STATUS_S {
    pub bEnable: CVI_BOOL,
    pub u32IntCnt: CVI_U32,
    pub u32FrameRate: CVI_U32,
    pub u32LostFrame: CVI_U32,
    pub u32VbFail: CVI_U32,
    pub stSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PIPE_STATUS_S"][::std::mem::size_of::<_VI_PIPE_STATUS_S>() - 28usize];
    ["Alignment of _VI_PIPE_STATUS_S"][::std::mem::align_of::<_VI_PIPE_STATUS_S>() - 4usize];
    ["Offset of field: _VI_PIPE_STATUS_S::bEnable"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, bEnable) - 0usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32IntCnt"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32IntCnt) - 4usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32FrameRate"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32FrameRate) - 8usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32LostFrame"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32LostFrame) - 12usize];
    ["Offset of field: _VI_PIPE_STATUS_S::u32VbFail"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, u32VbFail) - 16usize];
    ["Offset of field: _VI_PIPE_STATUS_S::stSize"]
        [::std::mem::offset_of!(_VI_PIPE_STATUS_S, stSize) - 20usize];
};
pub type VI_PIPE_STATUS_S = _VI_PIPE_STATUS_S;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_ONCE: _VI_VS_SIGNAL_MODE_E = 0;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_FREQ: _VI_VS_SIGNAL_MODE_E = 1;
pub const _VI_VS_SIGNAL_MODE_E_VI_VS_SIGNAL_MODE_BUTT: _VI_VS_SIGNAL_MODE_E = 2;
pub type _VI_VS_SIGNAL_MODE_E = ::std::os::raw::c_uint;
pub use self::_VI_VS_SIGNAL_MODE_E as VI_VS_SIGNAL_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_VS_SIGNAL_ATTR_S {
    pub enMode: VI_VS_SIGNAL_MODE_E,
    pub u32StartTime: CVI_U32,
    pub u32Duration: CVI_U32,
    pub u32CapFrmIndex: CVI_U32,
    pub u32Interval: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_VS_SIGNAL_ATTR_S"][::std::mem::size_of::<_VI_VS_SIGNAL_ATTR_S>() - 20usize];
    ["Alignment of _VI_VS_SIGNAL_ATTR_S"][::std::mem::align_of::<_VI_VS_SIGNAL_ATTR_S>() - 4usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::enMode"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, enMode) - 0usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32StartTime"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32StartTime) - 4usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32Duration"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32Duration) - 8usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32CapFrmIndex"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32CapFrmIndex) - 12usize];
    ["Offset of field: _VI_VS_SIGNAL_ATTR_S::u32Interval"]
        [::std::mem::offset_of!(_VI_VS_SIGNAL_ATTR_S, u32Interval) - 16usize];
};
pub type VI_VS_SIGNAL_ATTR_S = _VI_VS_SIGNAL_ATTR_S;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_TAIL: _VI_EXT_CHN_SOURCE_E = 0;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_HEAD: _VI_EXT_CHN_SOURCE_E = 1;
pub const _VI_EXT_CHN_SOURCE_E_VI_EXT_CHN_SOURCE_BUTT: _VI_EXT_CHN_SOURCE_E = 2;
pub type _VI_EXT_CHN_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_EXT_CHN_SOURCE_E as VI_EXT_CHN_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_EXT_CHN_ATTR_S {
    pub enSource: VI_EXT_CHN_SOURCE_E,
    pub s32BindChn: VI_CHN,
    pub stSize: SIZE_S,
    pub enPixelFormat: PIXEL_FORMAT_E,
    pub u32Depth: CVI_U32,
    pub stFrameRate: FRAME_RATE_CTRL_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_EXT_CHN_ATTR_S"][::std::mem::size_of::<_VI_EXT_CHN_ATTR_S>() - 32usize];
    ["Alignment of _VI_EXT_CHN_ATTR_S"][::std::mem::align_of::<_VI_EXT_CHN_ATTR_S>() - 4usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::enSource"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, enSource) - 0usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::s32BindChn"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, s32BindChn) - 4usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::stSize"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, stSize) - 8usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::enPixelFormat"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, enPixelFormat) - 16usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, u32Depth) - 20usize];
    ["Offset of field: _VI_EXT_CHN_ATTR_S::stFrameRate"]
        [::std::mem::offset_of!(_VI_EXT_CHN_ATTR_S, stFrameRate) - 24usize];
};
pub type VI_EXT_CHN_ATTR_S = _VI_EXT_CHN_ATTR_S;
pub const _VI_CROP_COORDINATE_E_VI_CROP_RATIO_COOR: _VI_CROP_COORDINATE_E = 0;
pub const _VI_CROP_COORDINATE_E_VI_CROP_ABS_COOR: _VI_CROP_COORDINATE_E = 1;
pub const _VI_CROP_COORDINATE_E_VI_CROP_BUTT: _VI_CROP_COORDINATE_E = 2;
pub type _VI_CROP_COORDINATE_E = ::std::os::raw::c_uint;
pub use self::_VI_CROP_COORDINATE_E as VI_CROP_COORDINATE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CROP_INFO_S {
    pub bEnable: CVI_BOOL,
    pub enCropCoordinate: VI_CROP_COORDINATE_E,
    pub stCropRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CROP_INFO_S"][::std::mem::size_of::<_VI_CROP_INFO_S>() - 24usize];
    ["Alignment of _VI_CROP_INFO_S"][::std::mem::align_of::<_VI_CROP_INFO_S>() - 4usize];
    ["Offset of field: _VI_CROP_INFO_S::bEnable"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, bEnable) - 0usize];
    ["Offset of field: _VI_CROP_INFO_S::enCropCoordinate"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, enCropCoordinate) - 4usize];
    ["Offset of field: _VI_CROP_INFO_S::stCropRect"]
        [::std::mem::offset_of!(_VI_CROP_INFO_S, stCropRect) - 8usize];
};
pub type VI_CROP_INFO_S = _VI_CROP_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_LDC_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub stAttr: LDC_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_LDC_ATTR_S"][::std::mem::size_of::<_VI_LDC_ATTR_S>() - 32usize];
    ["Alignment of _VI_LDC_ATTR_S"][::std::mem::align_of::<_VI_LDC_ATTR_S>() - 4usize];
    ["Offset of field: _VI_LDC_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_LDC_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_LDC_ATTR_S::stAttr"]
        [::std::mem::offset_of!(_VI_LDC_ATTR_S, stAttr) - 4usize];
};
pub type VI_LDC_ATTR_S = _VI_LDC_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_CHN_STATUS_S {
    pub bEnable: CVI_BOOL,
    pub u32FrameRate: CVI_U32,
    pub u64PrevTime: CVI_U64,
    pub u32FrameNum: CVI_U32,
    pub u32LostFrame: CVI_U32,
    pub u32VbFail: CVI_U32,
    pub u32IntCnt: CVI_U32,
    pub u32RecvPic: CVI_U32,
    pub u32TotalMemByte: CVI_U32,
    pub stSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_CHN_STATUS_S"][::std::mem::size_of::<_VI_CHN_STATUS_S>() - 48usize];
    ["Alignment of _VI_CHN_STATUS_S"][::std::mem::align_of::<_VI_CHN_STATUS_S>() - 8usize];
    ["Offset of field: _VI_CHN_STATUS_S::bEnable"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, bEnable) - 0usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32FrameRate"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32FrameRate) - 4usize];
    ["Offset of field: _VI_CHN_STATUS_S::u64PrevTime"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u64PrevTime) - 8usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32FrameNum"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32FrameNum) - 16usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32LostFrame"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32LostFrame) - 20usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32VbFail"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32VbFail) - 24usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32IntCnt"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32IntCnt) - 28usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32RecvPic"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32RecvPic) - 32usize];
    ["Offset of field: _VI_CHN_STATUS_S::u32TotalMemByte"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, u32TotalMemByte) - 36usize];
    ["Offset of field: _VI_CHN_STATUS_S::stSize"]
        [::std::mem::offset_of!(_VI_CHN_STATUS_S, stSize) - 40usize];
};
pub type VI_CHN_STATUS_S = _VI_CHN_STATUS_S;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_RAW: _VI_DUMP_TYPE_E = 0;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_YUV: _VI_DUMP_TYPE_E = 1;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_IR: _VI_DUMP_TYPE_E = 2;
pub const _VI_DUMP_TYPE_E_VI_DUMP_TYPE_BUTT: _VI_DUMP_TYPE_E = 3;
pub type _VI_DUMP_TYPE_E = ::std::os::raw::c_uint;
pub use self::_VI_DUMP_TYPE_E as VI_DUMP_TYPE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DUMP_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub u32Depth: CVI_U32,
    pub enDumpType: VI_DUMP_TYPE_E,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DUMP_ATTR_S"][::std::mem::size_of::<_VI_DUMP_ATTR_S>() - 12usize];
    ["Alignment of _VI_DUMP_ATTR_S"][::std::mem::align_of::<_VI_DUMP_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DUMP_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_DUMP_ATTR_S::u32Depth"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, u32Depth) - 4usize];
    ["Offset of field: _VI_DUMP_ATTR_S::enDumpType"]
        [::std::mem::offset_of!(_VI_DUMP_ATTR_S, enDumpType) - 8usize];
};
pub type VI_DUMP_ATTR_S = _VI_DUMP_ATTR_S;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_DEV: _VI_PIPE_FRAME_SOURCE_E = 0;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_USER_FE: _VI_PIPE_FRAME_SOURCE_E = 1;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_USER_BE: _VI_PIPE_FRAME_SOURCE_E = 2;
pub const _VI_PIPE_FRAME_SOURCE_E_VI_PIPE_FRAME_SOURCE_BUTT: _VI_PIPE_FRAME_SOURCE_E = 3;
pub type _VI_PIPE_FRAME_SOURCE_E = ::std::os::raw::c_uint;
pub use self::_VI_PIPE_FRAME_SOURCE_E as VI_PIPE_FRAME_SOURCE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_RAW_INFO_S {
    pub stVideoFrame: VIDEO_FRAME_INFO_S,
    pub stIspInfo: ISP_CONFIG_INFO_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_RAW_INFO_S"][::std::mem::size_of::<_VI_RAW_INFO_S>() - 208usize];
    ["Alignment of _VI_RAW_INFO_S"][::std::mem::align_of::<_VI_RAW_INFO_S>() - 8usize];
    ["Offset of field: _VI_RAW_INFO_S::stVideoFrame"]
        [::std::mem::offset_of!(_VI_RAW_INFO_S, stVideoFrame) - 0usize];
    ["Offset of field: _VI_RAW_INFO_S::stIspInfo"]
        [::std::mem::offset_of!(_VI_RAW_INFO_S, stIspInfo) - 152usize];
};
pub type VI_RAW_INFO_S = _VI_RAW_INFO_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_MOD_PARAM_S {
    pub s32DetectErrFrame: CVI_S32,
    pub u32DropErrFrame: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_MOD_PARAM_S"][::std::mem::size_of::<_VI_MOD_PARAM_S>() - 8usize];
    ["Alignment of _VI_MOD_PARAM_S"][::std::mem::align_of::<_VI_MOD_PARAM_S>() - 4usize];
    ["Offset of field: _VI_MOD_PARAM_S::s32DetectErrFrame"]
        [::std::mem::offset_of!(_VI_MOD_PARAM_S, s32DetectErrFrame) - 0usize];
    ["Offset of field: _VI_MOD_PARAM_S::u32DropErrFrame"]
        [::std::mem::offset_of!(_VI_MOD_PARAM_S, u32DropErrFrame) - 4usize];
};
pub type VI_MOD_PARAM_S = _VI_MOD_PARAM_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DEV_TIMING_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub s32FrmRate: CVI_S32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DEV_TIMING_ATTR_S"][::std::mem::size_of::<_VI_DEV_TIMING_ATTR_S>() - 8usize];
    ["Alignment of _VI_DEV_TIMING_ATTR_S"]
        [::std::mem::align_of::<_VI_DEV_TIMING_ATTR_S>() - 4usize];
    ["Offset of field: _VI_DEV_TIMING_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_VI_DEV_TIMING_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _VI_DEV_TIMING_ATTR_S::s32FrmRate"]
        [::std::mem::offset_of!(_VI_DEV_TIMING_ATTR_S, s32FrmRate) - 4usize];
};
pub type VI_DEV_TIMING_ATTR_S = _VI_DEV_TIMING_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_EARLY_INTERRUPT_S {
    pub bEnable: CVI_BOOL,
    pub u32LineCnt: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_EARLY_INTERRUPT_S"][::std::mem::size_of::<_VI_EARLY_INTERRUPT_S>() - 8usize];
    ["Alignment of _VI_EARLY_INTERRUPT_S"]
        [::std::mem::align_of::<_VI_EARLY_INTERRUPT_S>() - 4usize];
    ["Offset of field: _VI_EARLY_INTERRUPT_S::bEnable"]
        [::std::mem::offset_of!(_VI_EARLY_INTERRUPT_S, bEnable) - 0usize];
    ["Offset of field: _VI_EARLY_INTERRUPT_S::u32LineCnt"]
        [::std::mem::offset_of!(_VI_EARLY_INTERRUPT_S, u32LineCnt) - 4usize];
};
pub type VI_EARLY_INTERRUPT_S = _VI_EARLY_INTERRUPT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MLSC_GAIN_LUT_S {
    pub RGain: *mut CVI_U16,
    pub GGain: *mut CVI_U16,
    pub BGain: *mut CVI_U16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MLSC_GAIN_LUT_S"][::std::mem::size_of::<_MLSC_GAIN_LUT_S>() - 24usize];
    ["Alignment of _MLSC_GAIN_LUT_S"][::std::mem::align_of::<_MLSC_GAIN_LUT_S>() - 8usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::RGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, RGain) - 0usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::GGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, GGain) - 8usize];
    ["Offset of field: _MLSC_GAIN_LUT_S::BGain"]
        [::std::mem::offset_of!(_MLSC_GAIN_LUT_S, BGain) - 16usize];
};
pub type MLSC_GAIN_LUT_S = _MLSC_GAIN_LUT_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_DUMP_REGISTER_TABLE_S {
    pub MlscGainLut: MLSC_GAIN_LUT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_DUMP_REGISTER_TABLE_S"]
        [::std::mem::size_of::<_VI_DUMP_REGISTER_TABLE_S>() - 24usize];
    ["Alignment of _VI_DUMP_REGISTER_TABLE_S"]
        [::std::mem::align_of::<_VI_DUMP_REGISTER_TABLE_S>() - 8usize];
    ["Offset of field: _VI_DUMP_REGISTER_TABLE_S::MlscGainLut"]
        [::std::mem::offset_of!(_VI_DUMP_REGISTER_TABLE_S, MlscGainLut) - 0usize];
};
pub type VI_DUMP_REGISTER_TABLE_S = _VI_DUMP_REGISTER_TABLE_S;
pub type pfnViDevPmOps = ::std::option::Option<
    unsafe extern "C" fn(pvData: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_PM_OPS_S {
    pub pfnSnsSuspend: pfnViDevPmOps,
    pub pfnSnsResume: pfnViDevPmOps,
    pub pfnMipiSuspend: pfnViDevPmOps,
    pub pfnMipiResume: pfnViDevPmOps,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_PM_OPS_S"][::std::mem::size_of::<_VI_PM_OPS_S>() - 32usize];
    ["Alignment of _VI_PM_OPS_S"][::std::mem::align_of::<_VI_PM_OPS_S>() - 8usize];
    ["Offset of field: _VI_PM_OPS_S::pfnSnsSuspend"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnSnsSuspend) - 0usize];
    ["Offset of field: _VI_PM_OPS_S::pfnSnsResume"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnSnsResume) - 8usize];
    ["Offset of field: _VI_PM_OPS_S::pfnMipiSuspend"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnMipiSuspend) - 16usize];
    ["Offset of field: _VI_PM_OPS_S::pfnMipiResume"]
        [::std::mem::offset_of!(_VI_PM_OPS_S, pfnMipiResume) - 24usize];
};
pub type VI_PM_OPS_S = _VI_PM_OPS_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_SMOOTH_RAW_DUMP_INFO_S {
    pub ViPipe: VI_PIPE,
    pub u8BlkCnt: CVI_U8,
    pub phy_addr_list: *mut CVI_U64,
    pub stCropRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_SMOOTH_RAW_DUMP_INFO_S"]
        [::std::mem::size_of::<_VI_SMOOTH_RAW_DUMP_INFO_S>() - 32usize];
    ["Alignment of _VI_SMOOTH_RAW_DUMP_INFO_S"]
        [::std::mem::align_of::<_VI_SMOOTH_RAW_DUMP_INFO_S>() - 8usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::ViPipe"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, ViPipe) - 0usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::u8BlkCnt"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, u8BlkCnt) - 4usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::phy_addr_list"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, phy_addr_list) - 8usize];
    ["Offset of field: _VI_SMOOTH_RAW_DUMP_INFO_S::stCropRect"]
        [::std::mem::offset_of!(_VI_SMOOTH_RAW_DUMP_INFO_S, stCropRect) - 16usize];
};
pub type VI_SMOOTH_RAW_DUMP_INFO_S = _VI_SMOOTH_RAW_DUMP_INFO_S;
pub type GDC_HANDLE = CVI_S64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GDC_TASK_ATTR_S {
    pub stImgIn: VIDEO_FRAME_INFO_S,
    pub stImgOut: VIDEO_FRAME_INFO_S,
    pub au64privateData: [CVI_U64; 4usize],
    pub reserved: CVI_U64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _GDC_TASK_ATTR_S"][::std::mem::size_of::<_GDC_TASK_ATTR_S>() - 344usize];
    ["Alignment of _GDC_TASK_ATTR_S"][::std::mem::align_of::<_GDC_TASK_ATTR_S>() - 8usize];
    ["Offset of field: _GDC_TASK_ATTR_S::stImgIn"]
        [::std::mem::offset_of!(_GDC_TASK_ATTR_S, stImgIn) - 0usize];
    ["Offset of field: _GDC_TASK_ATTR_S::stImgOut"]
        [::std::mem::offset_of!(_GDC_TASK_ATTR_S, stImgOut) - 152usize];
    ["Offset of field: _GDC_TASK_ATTR_S::au64privateData"]
        [::std::mem::offset_of!(_GDC_TASK_ATTR_S, au64privateData) - 304usize];
    ["Offset of field: _GDC_TASK_ATTR_S::reserved"]
        [::std::mem::offset_of!(_GDC_TASK_ATTR_S, reserved) - 336usize];
};
pub type GDC_TASK_ATTR_S = _GDC_TASK_ATTR_S;
pub const _FISHEYE_MOUNT_MODE_E_FISHEYE_DESKTOP_MOUNT: _FISHEYE_MOUNT_MODE_E = 0;
pub const _FISHEYE_MOUNT_MODE_E_FISHEYE_CEILING_MOUNT: _FISHEYE_MOUNT_MODE_E = 1;
pub const _FISHEYE_MOUNT_MODE_E_FISHEYE_WALL_MOUNT: _FISHEYE_MOUNT_MODE_E = 2;
pub const _FISHEYE_MOUNT_MODE_E_FISHEYE_MOUNT_MODE_BUTT: _FISHEYE_MOUNT_MODE_E = 3;
pub type _FISHEYE_MOUNT_MODE_E = ::std::os::raw::c_uint;
pub use self::_FISHEYE_MOUNT_MODE_E as FISHEYE_MOUNT_MODE_E;
pub const _FISHEYE_VIEW_MODE_E_FISHEYE_VIEW_360_PANORAMA: _FISHEYE_VIEW_MODE_E = 0;
pub const _FISHEYE_VIEW_MODE_E_FISHEYE_VIEW_180_PANORAMA: _FISHEYE_VIEW_MODE_E = 1;
pub const _FISHEYE_VIEW_MODE_E_FISHEYE_VIEW_NORMAL: _FISHEYE_VIEW_MODE_E = 2;
pub const _FISHEYE_VIEW_MODE_E_FISHEYE_NO_TRANSFORMATION: _FISHEYE_VIEW_MODE_E = 3;
pub const _FISHEYE_VIEW_MODE_E_FISHEYE_VIEW_MODE_BUTT: _FISHEYE_VIEW_MODE_E = 4;
pub type _FISHEYE_VIEW_MODE_E = ::std::os::raw::c_uint;
pub use self::_FISHEYE_VIEW_MODE_E as FISHEYE_VIEW_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FISHEYE_REGION_ATTR_S {
    pub enViewMode: FISHEYE_VIEW_MODE_E,
    pub u32InRadius: CVI_U32,
    pub u32OutRadius: CVI_U32,
    pub u32Pan: CVI_U32,
    pub u32Tilt: CVI_U32,
    pub u32HorZoom: CVI_U32,
    pub u32VerZoom: CVI_U32,
    pub stOutRect: RECT_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FISHEYE_REGION_ATTR_S"][::std::mem::size_of::<_FISHEYE_REGION_ATTR_S>() - 44usize];
    ["Alignment of _FISHEYE_REGION_ATTR_S"]
        [::std::mem::align_of::<_FISHEYE_REGION_ATTR_S>() - 4usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::enViewMode"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, enViewMode) - 0usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32InRadius"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32InRadius) - 4usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32OutRadius"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32OutRadius) - 8usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32Pan"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32Pan) - 12usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32Tilt"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32Tilt) - 16usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32HorZoom"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32HorZoom) - 20usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::u32VerZoom"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, u32VerZoom) - 24usize];
    ["Offset of field: _FISHEYE_REGION_ATTR_S::stOutRect"]
        [::std::mem::offset_of!(_FISHEYE_REGION_ATTR_S, stOutRect) - 28usize];
};
pub type FISHEYE_REGION_ATTR_S = _FISHEYE_REGION_ATTR_S;
pub const _USAGE_MODE_MODE_PANORAMA_360: _USAGE_MODE = 1;
pub const _USAGE_MODE_MODE_PANORAMA_180: _USAGE_MODE = 2;
pub const _USAGE_MODE_MODE_01_1O: _USAGE_MODE = 3;
pub const _USAGE_MODE_MODE_02_1O4R: _USAGE_MODE = 4;
pub const _USAGE_MODE_MODE_03_4R: _USAGE_MODE = 5;
pub const _USAGE_MODE_MODE_04_1P2R: _USAGE_MODE = 6;
pub const _USAGE_MODE_MODE_05_1P2R: _USAGE_MODE = 7;
pub const _USAGE_MODE_MODE_06_1P: _USAGE_MODE = 8;
pub const _USAGE_MODE_MODE_07_2P: _USAGE_MODE = 9;
pub const _USAGE_MODE_MODE_MAX: _USAGE_MODE = 10;
pub type _USAGE_MODE = ::std::os::raw::c_uint;
pub use self::_USAGE_MODE as USAGE_MODE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _FISHEYE_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub bBgColor: CVI_BOOL,
    pub u32BgColor: CVI_U32,
    pub s32HorOffset: CVI_S32,
    pub s32VerOffset: CVI_S32,
    pub u32TrapezoidCoef: CVI_U32,
    pub s32FanStrength: CVI_S32,
    pub enMountMode: FISHEYE_MOUNT_MODE_E,
    pub enUseMode: USAGE_MODE,
    pub u32RegionNum: CVI_U32,
    pub astFishEyeRegionAttr: [FISHEYE_REGION_ATTR_S; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _FISHEYE_ATTR_S"][::std::mem::size_of::<_FISHEYE_ATTR_S>() - 212usize];
    ["Alignment of _FISHEYE_ATTR_S"][::std::mem::align_of::<_FISHEYE_ATTR_S>() - 4usize];
    ["Offset of field: _FISHEYE_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _FISHEYE_ATTR_S::bBgColor"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, bBgColor) - 1usize];
    ["Offset of field: _FISHEYE_ATTR_S::u32BgColor"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, u32BgColor) - 4usize];
    ["Offset of field: _FISHEYE_ATTR_S::s32HorOffset"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, s32HorOffset) - 8usize];
    ["Offset of field: _FISHEYE_ATTR_S::s32VerOffset"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, s32VerOffset) - 12usize];
    ["Offset of field: _FISHEYE_ATTR_S::u32TrapezoidCoef"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, u32TrapezoidCoef) - 16usize];
    ["Offset of field: _FISHEYE_ATTR_S::s32FanStrength"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, s32FanStrength) - 20usize];
    ["Offset of field: _FISHEYE_ATTR_S::enMountMode"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, enMountMode) - 24usize];
    ["Offset of field: _FISHEYE_ATTR_S::enUseMode"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, enUseMode) - 28usize];
    ["Offset of field: _FISHEYE_ATTR_S::u32RegionNum"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, u32RegionNum) - 32usize];
    ["Offset of field: _FISHEYE_ATTR_S::astFishEyeRegionAttr"]
        [::std::mem::offset_of!(_FISHEYE_ATTR_S, astFishEyeRegionAttr) - 36usize];
};
pub type FISHEYE_ATTR_S = _FISHEYE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _SPREAD_ATTR_S {
    pub bEnable: CVI_BOOL,
    pub u32SpreadCoef: CVI_U32,
    pub stDestSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _SPREAD_ATTR_S"][::std::mem::size_of::<_SPREAD_ATTR_S>() - 16usize];
    ["Alignment of _SPREAD_ATTR_S"][::std::mem::align_of::<_SPREAD_ATTR_S>() - 4usize];
    ["Offset of field: _SPREAD_ATTR_S::bEnable"]
        [::std::mem::offset_of!(_SPREAD_ATTR_S, bEnable) - 0usize];
    ["Offset of field: _SPREAD_ATTR_S::u32SpreadCoef"]
        [::std::mem::offset_of!(_SPREAD_ATTR_S, u32SpreadCoef) - 4usize];
    ["Offset of field: _SPREAD_ATTR_S::stDestSize"]
        [::std::mem::offset_of!(_SPREAD_ATTR_S, stDestSize) - 8usize];
};
pub type SPREAD_ATTR_S = _SPREAD_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _POINT2F_S {
    pub x: CVI_FLOAT,
    pub y: CVI_FLOAT,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _POINT2F_S"][::std::mem::size_of::<_POINT2F_S>() - 8usize];
    ["Alignment of _POINT2F_S"][::std::mem::align_of::<_POINT2F_S>() - 4usize];
    ["Offset of field: _POINT2F_S::x"][::std::mem::offset_of!(_POINT2F_S, x) - 0usize];
    ["Offset of field: _POINT2F_S::y"][::std::mem::offset_of!(_POINT2F_S, y) - 4usize];
};
pub type POINT2F_S = _POINT2F_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _AFFINE_ATTR_S {
    pub u32RegionNum: CVI_U32,
    pub astRegionAttr: [[POINT2F_S; 4usize]; 32usize],
    pub stDestSize: SIZE_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _AFFINE_ATTR_S"][::std::mem::size_of::<_AFFINE_ATTR_S>() - 1036usize];
    ["Alignment of _AFFINE_ATTR_S"][::std::mem::align_of::<_AFFINE_ATTR_S>() - 4usize];
    ["Offset of field: _AFFINE_ATTR_S::u32RegionNum"]
        [::std::mem::offset_of!(_AFFINE_ATTR_S, u32RegionNum) - 0usize];
    ["Offset of field: _AFFINE_ATTR_S::astRegionAttr"]
        [::std::mem::offset_of!(_AFFINE_ATTR_S, astRegionAttr) - 4usize];
    ["Offset of field: _AFFINE_ATTR_S::stDestSize"]
        [::std::mem::offset_of!(_AFFINE_ATTR_S, stDestSize) - 1028usize];
};
pub type AFFINE_ATTR_S = _AFFINE_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _DWA_BUF_WRAP_S {
    pub bEnable: CVI_BOOL,
    pub u32BufLine: CVI_U32,
    pub u32WrapBufferSize: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _DWA_BUF_WRAP_S"][::std::mem::size_of::<_DWA_BUF_WRAP_S>() - 12usize];
    ["Alignment of _DWA_BUF_WRAP_S"][::std::mem::align_of::<_DWA_BUF_WRAP_S>() - 4usize];
    ["Offset of field: _DWA_BUF_WRAP_S::bEnable"]
        [::std::mem::offset_of!(_DWA_BUF_WRAP_S, bEnable) - 0usize];
    ["Offset of field: _DWA_BUF_WRAP_S::u32BufLine"]
        [::std::mem::offset_of!(_DWA_BUF_WRAP_S, u32BufLine) - 4usize];
    ["Offset of field: _DWA_BUF_WRAP_S::u32WrapBufferSize"]
        [::std::mem::offset_of!(_DWA_BUF_WRAP_S, u32WrapBufferSize) - 8usize];
};
pub type DWA_BUF_WRAP_S = _DWA_BUF_WRAP_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VI_MESH_ATTR_S {
    pub chn: VI_CHN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VI_MESH_ATTR_S"][::std::mem::size_of::<_VI_MESH_ATTR_S>() - 4usize];
    ["Alignment of _VI_MESH_ATTR_S"][::std::mem::align_of::<_VI_MESH_ATTR_S>() - 4usize];
    ["Offset of field: _VI_MESH_ATTR_S::chn"]
        [::std::mem::offset_of!(_VI_MESH_ATTR_S, chn) - 0usize];
};
pub type VI_MESH_ATTR_S = _VI_MESH_ATTR_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VPSS_MESH_ATTR_S {
    pub grp: VPSS_GRP,
    pub chn: VPSS_CHN,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VPSS_MESH_ATTR_S"][::std::mem::size_of::<_VPSS_MESH_ATTR_S>() - 8usize];
    ["Alignment of _VPSS_MESH_ATTR_S"][::std::mem::align_of::<_VPSS_MESH_ATTR_S>() - 4usize];
    ["Offset of field: _VPSS_MESH_ATTR_S::grp"]
        [::std::mem::offset_of!(_VPSS_MESH_ATTR_S, grp) - 0usize];
    ["Offset of field: _VPSS_MESH_ATTR_S::chn"]
        [::std::mem::offset_of!(_VPSS_MESH_ATTR_S, chn) - 4usize];
};
pub type VPSS_MESH_ATTR_S = _VPSS_MESH_ATTR_S;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _MESH_DUMP_ATTR_S {
    pub binFileName: [CVI_CHAR; 128usize],
    pub enModId: MOD_ID_E,
    pub __bindgen_anon_1: _MESH_DUMP_ATTR_S__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MESH_DUMP_ATTR_S__bindgen_ty_1 {
    pub viMeshAttr: VI_MESH_ATTR_S,
    pub vpssMeshAttr: VPSS_MESH_ATTR_S,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MESH_DUMP_ATTR_S__bindgen_ty_1"]
        [::std::mem::size_of::<_MESH_DUMP_ATTR_S__bindgen_ty_1>() - 8usize];
    ["Alignment of _MESH_DUMP_ATTR_S__bindgen_ty_1"]
        [::std::mem::align_of::<_MESH_DUMP_ATTR_S__bindgen_ty_1>() - 4usize];
    ["Offset of field: _MESH_DUMP_ATTR_S__bindgen_ty_1::viMeshAttr"]
        [::std::mem::offset_of!(_MESH_DUMP_ATTR_S__bindgen_ty_1, viMeshAttr) - 0usize];
    ["Offset of field: _MESH_DUMP_ATTR_S__bindgen_ty_1::vpssMeshAttr"]
        [::std::mem::offset_of!(_MESH_DUMP_ATTR_S__bindgen_ty_1, vpssMeshAttr) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _MESH_DUMP_ATTR_S"][::std::mem::size_of::<_MESH_DUMP_ATTR_S>() - 140usize];
    ["Alignment of _MESH_DUMP_ATTR_S"][::std::mem::align_of::<_MESH_DUMP_ATTR_S>() - 4usize];
    ["Offset of field: _MESH_DUMP_ATTR_S::binFileName"]
        [::std::mem::offset_of!(_MESH_DUMP_ATTR_S, binFileName) - 0usize];
    ["Offset of field: _MESH_DUMP_ATTR_S::enModId"]
        [::std::mem::offset_of!(_MESH_DUMP_ATTR_S, enModId) - 128usize];
};
pub type MESH_DUMP_ATTR_S = _MESH_DUMP_ATTR_S;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_DEBUG: _ERR_LEVEL_E = 0;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_INFO: _ERR_LEVEL_E = 1;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_NOTICE: _ERR_LEVEL_E = 2;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_WARNING: _ERR_LEVEL_E = 3;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ERROR: _ERR_LEVEL_E = 4;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_CRIT: _ERR_LEVEL_E = 5;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_ALERT: _ERR_LEVEL_E = 6;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_FATAL: _ERR_LEVEL_E = 7;
pub const _ERR_LEVEL_E_EN_ERR_LEVEL_BUTT: _ERR_LEVEL_E = 8;
pub type _ERR_LEVEL_E = ::std::os::raw::c_uint;
pub use self::_ERR_LEVEL_E as ERR_LEVEL_E;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_DEVID: _EN_ERR_CODE_E = 1;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_CHNID: _EN_ERR_CODE_E = 2;
pub const _EN_ERR_CODE_E_EN_ERR_ILLEGAL_PARAM: _EN_ERR_CODE_E = 3;
pub const _EN_ERR_CODE_E_EN_ERR_EXIST: _EN_ERR_CODE_E = 4;
pub const _EN_ERR_CODE_E_EN_ERR_UNEXIST: _EN_ERR_CODE_E = 5;
pub const _EN_ERR_CODE_E_EN_ERR_NULL_PTR: _EN_ERR_CODE_E = 6;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_CONFIG: _EN_ERR_CODE_E = 7;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_SUPPORT: _EN_ERR_CODE_E = 8;
pub const _EN_ERR_CODE_E_EN_ERR_NOT_PERM: _EN_ERR_CODE_E = 9;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_PIPEID: _EN_ERR_CODE_E = 10;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_GRPID: _EN_ERR_CODE_E = 11;
pub const _EN_ERR_CODE_E_EN_ERR_NOMEM: _EN_ERR_CODE_E = 12;
pub const _EN_ERR_CODE_E_EN_ERR_NOBUF: _EN_ERR_CODE_E = 13;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_EMPTY: _EN_ERR_CODE_E = 14;
pub const _EN_ERR_CODE_E_EN_ERR_BUF_FULL: _EN_ERR_CODE_E = 15;
pub const _EN_ERR_CODE_E_EN_ERR_SYS_NOTREADY: _EN_ERR_CODE_E = 16;
pub const _EN_ERR_CODE_E_EN_ERR_BADADDR: _EN_ERR_CODE_E = 17;
pub const _EN_ERR_CODE_E_EN_ERR_BUSY: _EN_ERR_CODE_E = 18;
pub const _EN_ERR_CODE_E_EN_ERR_SIZE_NOT_ENOUGH: _EN_ERR_CODE_E = 19;
pub const _EN_ERR_CODE_E_EN_ERR_INVALID_VB: _EN_ERR_CODE_E = 20;
pub const _EN_ERR_CODE_E_EN_ERR_BUTT: _EN_ERR_CODE_E = 63;
pub type _EN_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_ERR_CODE_E as EN_ERR_CODE_E;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_ENABLED: _EN_VI_ERR_CODE_E = 64;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOT_DISABLED: _EN_VI_ERR_CODE_E = 65;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_CHN_NOT_DISABLED: _EN_VI_ERR_CODE_E = 66;
pub const _EN_VI_ERR_CODE_E_ERR_VI_CFG_TIMEOUT: _EN_VI_ERR_CODE_E = 67;
pub const _EN_VI_ERR_CODE_E_ERR_VI_NORM_UNMATCH: _EN_VI_ERR_CODE_E = 68;
pub const _EN_VI_ERR_CODE_E_ERR_VI_INVALID_PHYCHNID: _EN_VI_ERR_CODE_E = 69;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_NOTBIND: _EN_VI_ERR_CODE_E = 70;
pub const _EN_VI_ERR_CODE_E_ERR_VI_FAILED_BINDED: _EN_VI_ERR_CODE_E = 71;
pub const _EN_VI_ERR_CODE_E_ERR_VI_DIS_PROCESS_FAIL: _EN_VI_ERR_CODE_E = 72;
pub type _EN_VI_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VI_ERR_CODE_E as EN_VI_ERR_CODE_E;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 64;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 65;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_DEV_HAS_ENABLED: _EN_VOU_ERR_CODE_E = 66;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 69;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 70;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_LAYER_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 71;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_DISABLED: _EN_VOU_ERR_CODE_E = 72;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_ENABLED: _EN_VOU_ERR_CODE_E = 73;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_NOT_CONFIG: _EN_VOU_ERR_CODE_E = 74;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_WAIT_TIMEOUT: _EN_VOU_ERR_CODE_E = 78;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_VFRAME: _EN_VOU_ERR_CODE_E = 79;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_RECT_PARA: _EN_VOU_ERR_CODE_E = 80;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_CHN_AREA_OVERLAP: _EN_VOU_ERR_CODE_E = 101;
pub const _EN_VOU_ERR_CODE_E_EN_ERR_VO_INVALID_LAYERID: _EN_VOU_ERR_CODE_E = 102;
pub const _EN_VOU_ERR_CODE_E_ERR_VO_BUTT: _EN_VOU_ERR_CODE_E = 103;
pub type _EN_VOU_ERR_CODE_E = ::std::os::raw::c_uint;
pub use self::_EN_VOU_ERR_CODE_E as EN_VOU_ERR_CODE_E;
extern "C" {
    pub fn closelog();
}
extern "C" {
    pub fn openlog(
        __ident: *const ::std::os::raw::c_char,
        __option: ::std::os::raw::c_int,
        __facility: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlogmask(__mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syslog(__pri: ::std::os::raw::c_int, __fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn vsyslog(
        __pri: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __ap: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LOG_LEVEL_CONF_S {
    pub enModId: MOD_ID_E,
    pub s32Level: CVI_S32,
    pub cModName: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _LOG_LEVEL_CONF_S"][::std::mem::size_of::<_LOG_LEVEL_CONF_S>() - 24usize];
    ["Alignment of _LOG_LEVEL_CONF_S"][::std::mem::align_of::<_LOG_LEVEL_CONF_S>() - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::enModId"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, enModId) - 0usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::s32Level"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, s32Level) - 4usize];
    ["Offset of field: _LOG_LEVEL_CONF_S::cModName"]
        [::std::mem::offset_of!(_LOG_LEVEL_CONF_S, cModName) - 8usize];
};
pub type LOG_LEVEL_CONF_S = _LOG_LEVEL_CONF_S;
extern "C" {
    pub static mut log_levels: *mut CVI_S32;
}
extern "C" {
    pub static mut log_name: [*const CVI_CHAR; 8usize];
}
extern "C" {
    pub static MOD_STRING: [*const ::std::os::raw::c_char; 34usize];
}
pub const _VB_UID_E_VB_UID_VI: _VB_UID_E = 0;
pub const _VB_UID_E_VB_UID_VO: _VB_UID_E = 1;
pub const _VB_UID_E_VB_UID_VPSS: _VB_UID_E = 2;
pub const _VB_UID_E_VB_UID_VENC: _VB_UID_E = 3;
pub const _VB_UID_E_VB_UID_VDEC: _VB_UID_E = 4;
pub const _VB_UID_E_VB_UID_H265E: _VB_UID_E = 5;
pub const _VB_UID_E_VB_UID_H264E: _VB_UID_E = 6;
pub const _VB_UID_E_VB_UID_JPEGE: _VB_UID_E = 7;
pub const _VB_UID_E_VB_UID_H264D: _VB_UID_E = 8;
pub const _VB_UID_E_VB_UID_JPEGD: _VB_UID_E = 9;
pub const _VB_UID_E_VB_UID_DIS: _VB_UID_E = 10;
pub const _VB_UID_E_VB_UID_USER: _VB_UID_E = 11;
pub const _VB_UID_E_VB_UID_AI: _VB_UID_E = 12;
pub const _VB_UID_E_VB_UID_AENC: _VB_UID_E = 13;
pub const _VB_UID_E_VB_UID_RC: _VB_UID_E = 14;
pub const _VB_UID_E_VB_UID_VFMW: _VB_UID_E = 15;
pub const _VB_UID_E_VB_UID_GDC: _VB_UID_E = 16;
pub const _VB_UID_E_VB_UID_BUTT: _VB_UID_E = 17;
pub type _VB_UID_E = ::std::os::raw::c_uint;
pub use self::_VB_UID_E as VB_UID_E;
pub type VB_POOL = CVI_U32;
pub type VB_BLK = CVI_U64;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_NONE: _VB_REMAP_MODE_E = 0;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_NOCACHE: _VB_REMAP_MODE_E = 1;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_CACHED: _VB_REMAP_MODE_E = 2;
pub const _VB_REMAP_MODE_E_VB_REMAP_MODE_BUTT: _VB_REMAP_MODE_E = 3;
pub type _VB_REMAP_MODE_E = ::std::os::raw::c_uint;
pub use self::_VB_REMAP_MODE_E as VB_REMAP_MODE_E;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_POOL_CONFIG_S {
    pub u32BlkSize: CVI_U32,
    pub u32BlkCnt: CVI_U32,
    pub enRemapMode: VB_REMAP_MODE_E,
    pub acName: [CVI_CHAR; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_POOL_CONFIG_S"][::std::mem::size_of::<_VB_POOL_CONFIG_S>() - 44usize];
    ["Alignment of _VB_POOL_CONFIG_S"][::std::mem::align_of::<_VB_POOL_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_POOL_CONFIG_S::u32BlkSize"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, u32BlkSize) - 0usize];
    ["Offset of field: _VB_POOL_CONFIG_S::u32BlkCnt"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, u32BlkCnt) - 4usize];
    ["Offset of field: _VB_POOL_CONFIG_S::enRemapMode"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, enRemapMode) - 8usize];
    ["Offset of field: _VB_POOL_CONFIG_S::acName"]
        [::std::mem::offset_of!(_VB_POOL_CONFIG_S, acName) - 12usize];
};
pub type VB_POOL_CONFIG_S = _VB_POOL_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_CONFIG_S {
    pub u32MaxPoolCnt: CVI_U32,
    pub astCommPool: [VB_POOL_CONFIG_S; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_CONFIG_S"][::std::mem::size_of::<_VB_CONFIG_S>() - 708usize];
    ["Alignment of _VB_CONFIG_S"][::std::mem::align_of::<_VB_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_CONFIG_S::u32MaxPoolCnt"]
        [::std::mem::offset_of!(_VB_CONFIG_S, u32MaxPoolCnt) - 0usize];
    ["Offset of field: _VB_CONFIG_S::astCommPool"]
        [::std::mem::offset_of!(_VB_CONFIG_S, astCommPool) - 4usize];
};
pub type VB_CONFIG_S = _VB_CONFIG_S;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _VB_SUPPLEMENT_CONFIG_S {
    pub u32SupplementConfig: CVI_U32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _VB_SUPPLEMENT_CONFIG_S"][::std::mem::size_of::<_VB_SUPPLEMENT_CONFIG_S>() - 4usize];
    ["Alignment of _VB_SUPPLEMENT_CONFIG_S"]
        [::std::mem::align_of::<_VB_SUPPLEMENT_CONFIG_S>() - 4usize];
    ["Offset of field: _VB_SUPPLEMENT_CONFIG_S::u32SupplementConfig"]
        [::std::mem::offset_of!(_VB_SUPPLEMENT_CONFIG_S, u32SupplementConfig) - 0usize];
};
pub type VB_SUPPLEMENT_CONFIG_S = _VB_SUPPLEMENT_CONFIG_S;
extern "C" {
    pub fn CVI_VI_Suspend() -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_Resume() -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetDevNum(devNum: CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetDevNum(devNum: *mut CVI_U32) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetDevAttr(ViDev: VI_DEV, pstDevAttr: *const VI_DEV_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetDevAttr(ViDev: VI_DEV, pstDevAttr: *mut VI_DEV_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_EnableDev(ViDev: VI_DEV) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_DisableDev(ViDev: VI_DEV) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetDevTimingAttr(
        ViDev: VI_DEV,
        pstTimingAttr: *const VI_DEV_TIMING_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetDevTimingAttr(
        ViDev: VI_DEV,
        pstTimingAttr: *mut VI_DEV_TIMING_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_CreatePipe(ViPipe: VI_PIPE, pstPipeAttr: *const VI_PIPE_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_DestroyPipe(ViPipe: VI_PIPE) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetPipeAttr(ViPipe: VI_PIPE, pstPipeAttr: *const VI_PIPE_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeAttr(ViPipe: VI_PIPE, pstPipeAttr: *mut VI_PIPE_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_StartPipe(ViPipe: VI_PIPE) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_StopPipe(ViPipe: VI_PIPE) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetPipeCrop(ViPipe: VI_PIPE, pstCropInfo: *const CROP_INFO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeCrop(ViPipe: VI_PIPE, pstCropInfo: *mut CROP_INFO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetPipeDumpAttr(ViPipe: VI_PIPE, pstDumpAttr: *const VI_DUMP_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeDumpAttr(ViPipe: VI_PIPE, pstDumpAttr: *mut VI_DUMP_ATTR_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetPipeFrameSource(ViPipe: VI_PIPE, enSource: VI_PIPE_FRAME_SOURCE_E) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeFrameSource(
        ViPipe: VI_PIPE,
        penSource: *mut VI_PIPE_FRAME_SOURCE_E,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeFrame(
        ViPipe: VI_PIPE,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_ReleasePipeFrame(
        ViPipe: VI_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_StartSmoothRawDump(pstDumpInfo: *const VI_SMOOTH_RAW_DUMP_INFO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_StopSmoothRawDump(pstDumpInfo: *const VI_SMOOTH_RAW_DUMP_INFO_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetSmoothRawDump(
        ViPipe: VI_PIPE,
        pstVideoFrame: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_PutSmoothRawDump(
        ViPipe: VI_PIPE,
        pstVideoFrame: *const VIDEO_FRAME_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SendPipeRaw(
        u32PipeNum: CVI_U32,
        PipeId: *mut VI_PIPE,
        pstVideoFrame: *mut *const VIDEO_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_QueryPipeStatus(ViPipe: VI_PIPE, pstStatus: *mut VI_PIPE_STATUS_S) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetPipeFd(ViPipe: VI_PIPE) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_DumpHwRegisterToFile(
        ViPipe: VI_PIPE,
        fp: *mut FILE,
        pstRegTbl: *mut VI_DUMP_REGISTER_TABLE_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_AttachVbPool(ViPipe: VI_PIPE, ViChn: VI_CHN, VbPool: VB_POOL) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_DetachVbPool(ViPipe: VI_PIPE, ViChn: VI_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnAttr: *mut VI_CHN_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnAttr: *mut VI_CHN_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_EnableChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_DisableChn(ViPipe: VI_PIPE, ViChn: VI_CHN) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetChnCrop(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstCropInfo: *const VI_CROP_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnCrop(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstCropInfo: *mut VI_CROP_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetChnRotation(ViPipe: VI_PIPE, ViChn: VI_CHN, enRotation: ROTATION_E)
        -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnRotation(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        penRotation: *mut ROTATION_E,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetChnLDCAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstLDCAttr: *const VI_LDC_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnLDCAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstLDCAttr: *mut VI_LDC_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnFrame(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFrameInfo: *mut VIDEO_FRAME_INFO_S,
        s32MilliSec: CVI_S32,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_ReleaseChnFrame(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFrameInfo: *const VIDEO_FRAME_INFO_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_QueryChnStatus(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstChnStatus: *mut VI_CHN_STATUS_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_CloseFd() -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_RegChnFlipMirrorCallBack(
        ViPipe: VI_PIPE,
        ViDev: VI_DEV,
        pvData: *mut ::std::os::raw::c_void,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_UnRegChnFlipMirrorCallBack(ViPipe: VI_PIPE, ViDev: VI_DEV) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetChnFlipMirror(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        bFlip: CVI_BOOL,
        bMirror: CVI_BOOL,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetChnFlipMirror(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pbFlip: *mut CVI_BOOL,
        pbMirror: *mut CVI_BOOL,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_RegPmCallBack(
        ViDev: VI_DEV,
        pstPmOps: *mut VI_PM_OPS_S,
        pvData: *mut ::std::os::raw::c_void,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_UnRegPmCallBack(ViDev: VI_DEV) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_Trig_AHD(ViPipe: VI_PIPE, u8AHDSignal: CVI_U8) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetDevBindPipe(
        ViDev: VI_DEV,
        pstDevBindPipe: *const VI_DEV_BIND_PIPE_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetDevBindPipe(ViDev: VI_DEV, pstDevBindPipe: *mut VI_DEV_BIND_PIPE_S)
        -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetExtChnFisheye(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFishEyeAttr: *const FISHEYE_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetExtChnFisheye(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstFishEyeAttr: *mut FISHEYE_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_SetExtChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstExtChnAttr: *const VI_EXT_CHN_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn CVI_VI_GetExtChnAttr(
        ViPipe: VI_PIPE,
        ViChn: VI_CHN,
        pstExtChnAttr: *mut VI_EXT_CHN_ATTR_S,
    ) -> CVI_S32;
}
extern "C" {
    pub fn _CVI_VI_CFG_CTRL_TEST() -> CVI_S32;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
